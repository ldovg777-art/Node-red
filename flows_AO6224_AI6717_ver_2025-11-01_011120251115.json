[
    {
        "id": "ba6153df2a5704ba",
        "type": "tab",
        "label": "All Vars Init & Read",
        "disabled": false,
        "info": "Handles initialization on start and reading variables (n1-pk5) from file."
    },
    {
        "id": "6035afc350b45a52",
        "type": "tab",
        "label": "All Vars UI",
        "disabled": false,
        "info": "Handles UI elements display, input, and status updates for variables (n1-pk5)."
    },
    {
        "id": "dec49f13b89f25f1",
        "type": "tab",
        "label": "All Vars Save",
        "disabled": false,
        "info": "Handles applying changes to globals and saving variables (n1-pk5) to file."
    },
    {
        "id": "459913172d62e701",
        "type": "tab",
        "label": "Calc Init & Read",
        "disabled": false,
        "info": "Handles initialization on start and reading calculation variables (koef/konst) from file."
    },
    {
        "id": "12f8c9ce06674206",
        "type": "tab",
        "label": "Calc UI",
        "disabled": false,
        "info": "Handles UI elements display, input, and status updates for calculation variables (koef/konst)."
    },
    {
        "id": "04891a37d169f2b9",
        "type": "tab",
        "label": "Calc Save",
        "disabled": false,
        "info": "Handles applying changes to globals and saving calculation variables (koef/konst) to file."
    },
    {
        "id": "0aab3c6cefb9136c",
        "type": "tab",
        "label": "функция итерации",
        "disabled": false,
        "info": "Выполняет циклическую итерацию переменной x через 5 шагов, используя глобальные переменные n, k, h, p, pk. Отображает x на графике, имеет кнопку сброса и выводит номер шага перед паузой."
    },
    {
        "id": "e9378293b40785cc",
        "type": "tab",
        "label": "АО6224_AI6717_v2",
        "disabled": false,
        "info": "Управляет АО модуля 6224 на основе global.x.\nЧитает АИ модуля 6717.\nПрименяет koef/konst к значениям AI перед сохранением и отображением.\nПозволяет записывать цикл данных AI_0-AI_7 в файл по кнопке (начиная после первого завершения шага 5).\nОтображает на UI преобразованные значения AI_0-7 для КАЖДОГО шага итерации.",
        "env": []
    },
    {
        "id": "394376f74e1d5d6d",
        "type": "tab",
        "label": "PH Init & Read",
        "disabled": false,
        "info": "Handles initialization on start and reading PH variables from file."
    },
    {
        "id": "5bd29ca20083e1c1",
        "type": "tab",
        "label": "PH Save",
        "disabled": false,
        "info": "Handles applying PH changes to globals and saving to file."
    },
    {
        "id": "0adabbe16538e192",
        "type": "tab",
        "label": "PH UI",
        "disabled": false,
        "info": "Handles PH UI elements display, input, and status updates. Includes PH charts."
    },
    {
        "id": "6c5a62355aa37281",
        "type": "tab",
        "label": "PH Calculations",
        "disabled": false,
        "info": "Performs periodic calculations for camm, ckisl, ai2t1t2h1h2, ph. Performs cammkisl_smus calculation at the end of each cycle. Sends data to charts."
    },
    {
        "id": "abdee1c6947fc850",
        "type": "tab",
        "label": "Redox Init & Read",
        "disabled": false,
        "info": "Инициализация и чтение параметров Redox из файла."
    },
    {
        "id": "59dd9bd5d7fbfa1b",
        "type": "tab",
        "label": "Redox UI",
        "disabled": false,
        "info": "UI для настройки и отображения Redox."
    },
    {
        "id": "0ae21f32b9588b98",
        "type": "tab",
        "label": "Redox Calculations",
        "disabled": false,
        "info": "Расчет и сглаживание Redox потенциала (ai3ph5, ai3ph5smus)."
    },
    {
        "id": "06037d2af0b832a5",
        "type": "tab",
        "label": "Redox Save",
        "disabled": false,
        "info": "Сохранение параметров Redox в файл."
    },
    {
        "id": "da1a1a8bab77791d",
        "type": "tab",
        "label": "AO LC Init & Read",
        "disabled": false,
        "info": "Инициализация и чтение конфигурации аналоговых выходов 4-20мА (ключи, K, C)."
    },
    {
        "id": "8883b7a3da4b5d71",
        "type": "tab",
        "label": "AO LC Save",
        "disabled": false,
        "info": "Сохранение конфигурации аналоговых выходов 4-20мА."
    },
    {
        "id": "5828ca1bfd74414b",
        "type": "tab",
        "label": "AO LC Output Logic",
        "disabled": false,
        "info": "Логика вывода сигналов 4-20мА на основе конфигурации."
    },
    {
        "id": "5ffb7f66ab5e8db1",
        "type": "tab",
        "label": "Redox Init & Read2",
        "disabled": false,
        "info": "Инициализация и чтение параметров Redox2 (ai4p2h5koef, ai4p2h5konst, window_smusp2) из файла redox_variables2.json."
    },
    {
        "id": "aba43ca783b076c8",
        "type": "tab",
        "label": "Redox UI2",
        "disabled": false,
        "info": "UI для настройки и отображения Redox2 (ai4p2h5koef, ai4p2h5konst, window_smusp2, ai4h5, ai4p2h5, ai4p2h5smus)."
    },
    {
        "id": "95cb96cbe4bfe7a2",
        "type": "tab",
        "label": "Redox Calculations2",
        "disabled": false,
        "info": "Расчет и сглаживание Redox потенциала 2 (ai4p2h5, ai4p2h5smus) на основе ai4h5."
    },
    {
        "id": "6c25c64f47ba7aa8",
        "type": "tab",
        "label": "Redox Save2",
        "disabled": false,
        "info": "Сохранение параметров Redox2 (ai4p2h5koef, ai4p2h5konst, window_smusp2) в файл redox_variables2.json."
    },
    {
        "id": "23e887414e2dc8e7",
        "type": "tab",
        "label": "Server",
        "disabled": false,
        "info": "Modbus TCP Server для панели Weintek. Инициализация и циклическое обновление регистров из глобальных переменных. Добавлена логика опроса для записи уставок с HMI.",
        "env": []
    },
    {
        "id": "22da98f038da3ad9",
        "type": "tab",
        "label": "AO LC Config UI",
        "disabled": false,
        "info": "UI для настройки аналоговых выходов 4-20мА (ключи, K, C) и отображения их работы на графике."
    },
    {
        "id": "18ecd8ee6e51a55f",
        "type": "tab",
        "label": "PID Config Init & Read",
        "disabled": false,
        "info": "Инициализация и чтение конфигурации ПИД-регулятора из файла pid_config.json"
    },
    {
        "id": "629daadfb0018491",
        "type": "tab",
        "label": "PID Config Save",
        "disabled": false,
        "info": "Сохранение конфигурации ПИД-регулятора в файл pid_config.json."
    },
    {
        "id": "d769e22348317e1e",
        "type": "tab",
        "label": "PID Config UI",
        "disabled": false,
        "info": "UI для настройки параметров ПИД-регулятора."
    },
    {
        "id": "fab7173f60094a7c",
        "type": "tab",
        "label": "PID Control Logic",
        "disabled": false,
        "info": "Основная логика ПИД-регулирования: выбор PV, передача параметров в ПИД, обработка выхода."
    },
    {
        "id": "4ac5bdc990fc4dcf",
        "type": "tab",
        "label": "Резервное Копирование",
        "disabled": false,
        "info": "Содержит логику для ежедневного и ручного резервного копирования, а также восстановления переменных из бэкапа за текущий день. Обрабатывает 7 файлов: all, calculation, ph, redox, ao_lc, redox2, pid_config."
    },
    {
        "id": "084003c6178784f4",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            },
            "rebuild": false
        }
    },
    {
        "id": "fefac9801da80b93",
        "type": "ui_group",
        "name": "Шаги",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7bbe98b569431b92",
        "type": "ui_group",
        "name": "Переменные Шаг 1",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f2b1f8709bad5c42",
        "type": "ui_group",
        "name": "Переменные Шаг 2",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1247de7ed48c5785",
        "type": "ui_group",
        "name": "Переменные Шаг 3",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8f599a2a4ff7868a",
        "type": "ui_group",
        "name": "Переменные Шаг 4",
        "tab": "",
        "order": 5,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "31401d2598399c8b",
        "type": "ui_group",
        "name": "Переменные Шаг 5",
        "tab": "",
        "order": 6,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "iteration_ui_tab",
        "type": "ui_tab",
        "name": "Итерация",
        "icon": "show_chart",
        "order": 2
    },
    {
        "id": "iteration_ui_group",
        "type": "ui_group",
        "name": "График и Управление Итерацией",
        "tab": "iteration_ui_tab",
        "order": 1,
        "disp": true,
        "width": "32",
        "collapse": false
    },
    {
        "id": "b5ad3d26d2dec3f7",
        "type": "ui_group",
        "name": "Default",
        "tab": "bf598e27688ff446",
        "order": 1,
        "disp": false,
        "width": "32",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bf598e27688ff446",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "890b934665542552",
        "type": "ui_tab",
        "name": "Результаты по Шагам",
        "icon": "assignment",
        "order": 5,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "9348979b18aad42e",
        "type": "ui_group",
        "name": "Значения AI 1 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1c9c669cfa71380c",
        "type": "ui_group",
        "name": "Значения AI 2 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "78478d37299df3f2",
        "type": "ui_group",
        "name": "Значения AI 3 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4ad62ba0c83b740b",
        "type": "ui_group",
        "name": "Значения AI 4 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9eaeaa2ca534b09b",
        "type": "ui_group",
        "name": "Значения AI 5 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d513ea3bdc3c943e",
        "type": "ui_group",
        "name": "Значения AI 6 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1c524b55f70bd43f",
        "type": "ui_group",
        "name": "Значения AI 7 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0f43dd3488f8235e",
        "type": "ui_group",
        "name": "Значения AI 8 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eb35cce35ef3368f",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.214",
        "tcpPort": "502",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 2000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 4000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "1d5f2aa7532ab803",
        "type": "ui_tab",
        "name": "Аналоговые Выходы LC",
        "icon": "settings_input_component",
        "order": 9,
        "hidden": true
    },
    {
        "id": "f8cbd350fb5a27b0",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "fefac9801da80b93",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "54339644530d4b82",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "fefac9801da80b93",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "e78c84ec9d4f1d9b",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "7bbe98b569431b92",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "106ff6b580069103",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "7bbe98b569431b92",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "e78bc829b7beb062",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "7bbe98b569431b92",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "51967bc3ca33a7c1",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "7bbe98b569431b92",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "ffb21851a22de2d3",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "7bbe98b569431b92",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "8dc46289625316fb",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "f2b1f8709bad5c42",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "0d044e98634ed235",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "f2b1f8709bad5c42",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "e4cd27a3b30fe0ac",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "f2b1f8709bad5c42",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "4ddea2677796f496",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "f2b1f8709bad5c42",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "53f8eed6c1fecc3b",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "f2b1f8709bad5c42",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "f6072045a9432ebc",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "1247de7ed48c5785",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "487416b56ad083ec",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "1247de7ed48c5785",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "1bd2c6b7c688744c",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "1247de7ed48c5785",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "1925dbceab1cdac5",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "1247de7ed48c5785",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "1a38d972b87caa3e",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "1247de7ed48c5785",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "3dc996653f4053ba",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "8f599a2a4ff7868a",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "93055d79ca0308a4",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "8f599a2a4ff7868a",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "39344f2b5aa7d49e",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "8f599a2a4ff7868a",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "52da9807a9ad4277",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "8f599a2a4ff7868a",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "27b65972c36ae0a9",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "8f599a2a4ff7868a",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "0db1a5f1a5a09f15",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "31401d2598399c8b",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "d994c086b08cb653",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "31401d2598399c8b",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "99e63006a4b92658",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "31401d2598399c8b",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "f57b6e03ef423b43",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "31401d2598399c8b",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "ef289365b2f09764",
        "type": "ui_spacer",
        "z": "0aab3c6cefb9136c",
        "name": "spacer",
        "group": "31401d2598399c8b",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "b52ad0f12cf76b90",
        "type": "ui_tab",
        "z": "12f8c9ce06674206",
        "name": "Переменные Расчета",
        "icon": "settings_input_component",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "c988c6372c91f4dc",
        "type": "ui_group",
        "z": "12f8c9ce06674206",
        "name": "Управление Расчетом",
        "tab": "b52ad0f12cf76b90",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "4f1a66eaaa94d6d1",
        "type": "ui_group",
        "z": "12f8c9ce06674206",
        "name": "Коэффициенты (koef 0-7)",
        "tab": "b52ad0f12cf76b90",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6be19a21b1adeb14",
        "type": "ui_group",
        "z": "12f8c9ce06674206",
        "name": "Константы (konst 0-7)",
        "tab": "b52ad0f12cf76b90",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "83b781694d048a60",
        "type": "ui_tab",
        "z": "6035afc350b45a52",
        "name": "Переменные 1 2 3 4 5",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "bc84d9116936497a",
        "type": "ui_group",
        "z": "6035afc350b45a52",
        "name": "Шаги",
        "tab": "83b781694d048a60",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ce3817ffe4df45f7",
        "type": "ui_group",
        "z": "6035afc350b45a52",
        "name": "Переменные Шаг 1",
        "tab": "83b781694d048a60",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f4b0b1599e1cbb6a",
        "type": "ui_group",
        "z": "6035afc350b45a52",
        "name": "Переменные Шаг 2",
        "tab": "83b781694d048a60",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "856aa35a1221533d",
        "type": "ui_group",
        "z": "6035afc350b45a52",
        "name": "Переменные Шаг 3",
        "tab": "83b781694d048a60",
        "order": 4,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "48506493f6a2e380",
        "type": "ui_group",
        "z": "6035afc350b45a52",
        "name": "Переменные Шаг 4",
        "tab": "83b781694d048a60",
        "order": 5,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0618562608265ead",
        "type": "ui_group",
        "z": "6035afc350b45a52",
        "name": "Переменные Шаг 5",
        "tab": "83b781694d048a60",
        "order": 6,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "01aa0c0329411915",
        "type": "ui_tab",
        "z": "0adabbe16538e192",
        "name": "Переменные Расчета PH",
        "icon": "bar-chart",
        "order": 6,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "748fbd9daf52d233",
        "type": "ui_group",
        "z": "0adabbe16538e192",
        "name": "Управление PH",
        "tab": "01aa0c0329411915",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c49db3556cbd5bbe",
        "type": "ui_group",
        "z": "0adabbe16538e192",
        "name": "Переменные Входов PH",
        "tab": "01aa0c0329411915",
        "order": 2,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "59f514d740aa728e",
        "type": "ui_group",
        "z": "0adabbe16538e192",
        "name": "Основные Переменные PH",
        "tab": "01aa0c0329411915",
        "order": 3,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5f7282cf711876bf",
        "type": "ui_group",
        "z": "0adabbe16538e192",
        "name": "Константы и Лимиты PH",
        "tab": "01aa0c0329411915",
        "order": 4,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a434ae3bb07dd675",
        "type": "ui_group",
        "z": "0adabbe16538e192",
        "name": "Графики PH",
        "tab": "01aa0c0329411915",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cbf35f7b08366f68",
        "type": "ui_tab",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Redox Потенциал",
        "icon": "flash_on",
        "order": 7,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "da8e034452136c3f",
        "type": "ui_group",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Управление Redox",
        "tab": "cbf35f7b08366f68",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "80211a0365e16957",
        "type": "ui_group",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Параметры и Значения Redox",
        "tab": "cbf35f7b08366f68",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d9e0afc7a4030d81",
        "type": "ui_group",
        "z": "59dd9bd5d7fbfa1b",
        "name": "График Redox",
        "tab": "cbf35f7b08366f68",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "471be57479d45576",
        "type": "ui_tab",
        "z": "aba43ca783b076c8",
        "name": "Redox Потенциал 2",
        "icon": "flash_on",
        "order": 8,
        "hidden": true
    },
    {
        "id": "24e8a091d7c97818",
        "type": "ui_group",
        "z": "aba43ca783b076c8",
        "name": "Управление Redox 2",
        "tab": "471be57479d45576",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9a3e7a9985889fef",
        "type": "ui_group",
        "z": "aba43ca783b076c8",
        "name": "Параметры и Значения Redox 2",
        "tab": "471be57479d45576",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ebf6560acee59f7c",
        "type": "ui_group",
        "z": "aba43ca783b076c8",
        "name": "График Redox 2",
        "tab": "471be57479d45576",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1614da6767ff2948",
        "type": "ui_group",
        "z": "22da98f038da3ad9",
        "name": "Управление Конфигурацией АО 4-20мА",
        "tab": "1d5f2aa7532ab803",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c0b003c67ca6ac14",
        "type": "ui_group",
        "z": "22da98f038da3ad9",
        "name": "Канал 2 (AO1 физич.)",
        "tab": "1d5f2aa7532ab803",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "aae5e2a2b9a42817",
        "type": "ui_group",
        "z": "22da98f038da3ad9",
        "name": "Канал 3 (AO2 физич.)",
        "tab": "1d5f2aa7532ab803",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d09e28e2748d0284",
        "type": "ui_group",
        "z": "22da98f038da3ad9",
        "name": "Канал 4 (AO3 физич.)",
        "tab": "1d5f2aa7532ab803",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8ffa84d5c6b622d8",
        "type": "ui_group",
        "z": "22da98f038da3ad9",
        "name": "Графики Выходных Токов АО LC",
        "tab": "1d5f2aa7532ab803",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b53dacbc259cef59",
        "type": "ui_tab",
        "z": "d769e22348317e1e",
        "name": "Настройки ПИД",
        "icon": "settings_applications",
        "order": 10,
        "hidden": true
    },
    {
        "id": "2852bc2315c1b1d0",
        "type": "ui_group",
        "z": "d769e22348317e1e",
        "name": "Основные Параметры ПИД",
        "tab": "b53dacbc259cef59",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b0d59d8cd8ab1e42",
        "type": "ui_group",
        "z": "d769e22348317e1e",
        "name": "Коэффициенты ПИД",
        "tab": "b53dacbc259cef59",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0409730677eef917",
        "type": "ui_group",
        "z": "d769e22348317e1e",
        "name": "Дополнительные Параметры ПИД",
        "tab": "b53dacbc259cef59",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2d25a3947cc3202c",
        "type": "ui_group",
        "z": "d769e22348317e1e",
        "name": "Управление Сохранением (ПИД)",
        "tab": "b53dacbc259cef59",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bffa24bb5659d45b",
        "type": "ui_group",
        "z": "d769e22348317e1e",
        "name": "Мониторинг ПИД",
        "tab": "b53dacbc259cef59",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f865e3b9a8326d9a",
        "type": "ui_tab",
        "name": "История версий",
        "icon": "assignment_turned_in",
        "order": 11,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "e9abdc54dcb621b3",
        "type": "ui_group",
        "name": "История изменений",
        "tab": "f865e3b9a8326d9a",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fe79dd604c847d68",
        "type": "inject",
        "z": "ba6153df2a5704ba",
        "name": "При старте потока 1c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "9d3dfc3f73164b31"
            ]
        ]
    },
    {
        "id": "fe1f9125261c43c8",
        "type": "link in",
        "z": "ba6153df2a5704ba",
        "name": "link in: trigger-read-all-vars",
        "links": [
            "2be95c7fa6b6b155",
            "a1be82c82ae84bde"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "e52a0fc5a2a275dd"
            ]
        ]
    },
    {
        "id": "e52a0fc5a2a275dd",
        "type": "file in",
        "z": "ba6153df2a5704ba",
        "name": "Прочитать файл переменных",
        "filename": "/home/root/.node-red/save/variables_all.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 490,
        "y": 140,
        "wires": [
            [
                "9757501e56ced190"
            ]
        ]
    },
    {
        "id": "e7ce7310d09c419e",
        "type": "catch",
        "z": "ba6153df2a5704ba",
        "name": "Перехват ошибки чтения файла",
        "scope": [
            "e52a0fc5a2a275dd"
        ],
        "uncaught": false,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "2e08d37375bfbb32"
            ]
        ]
    },
    {
        "id": "9757501e56ced190",
        "type": "json",
        "z": "ba6153df2a5704ba",
        "name": "Разобрать JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 60,
        "wires": [
            [
                "2e08d37375bfbb32"
            ]
        ]
    },
    {
        "id": "2e08d37375bfbb32",
        "type": "function",
        "z": "ba6153df2a5704ba",
        "name": "Init/Read State & Globals (All Vars)",
        "func": "const VERSION_PATTERN = /^\\d{12}$/;\nconst READABLE_PATTERN = /^\\d{4}-\\d{2}-\\d{2}_\\d{4}$/;\nconst FILE_NAME_PATTERN = /^flows_[A-Za-z0-9_-]+_ver_(\\d{4}-\\d{2}-\\d{2})_(\\d{12})$/;\nconst PROJECT_SLUG = 'AO6224_AI6717';\n\nconst toReadableVersion = (value) => {\n    if (typeof value === 'string' && VERSION_PATTERN.test(value)) {\n        const day = value.slice(0, 2);\n        const month = value.slice(2, 4);\n        const year = value.slice(4, 8);\n        const build = value.slice(8);\n        return `${year}-${month}-${day}_${build}`;\n    }\n    if (typeof value === 'string' && READABLE_PATTERN.test(value)) {\n        return value;\n    }\n    if (typeof value === 'string') {\n        const match = value.match(FILE_NAME_PATTERN);\n        if (match) {\n            const [, datePart, buildPart] = match;\n            return `${datePart}_${buildPart}`;\n        }\n    }\n    return '1970-01-01_0000';\n};\n\nconst normalizeVersion = (value) => {\n    if (typeof value !== 'string' || !value.length) {\n        return undefined;\n    }\n    if (VERSION_PATTERN.test(value)) {\n        return value;\n    }\n    if (READABLE_PATTERN.test(value)) {\n        const [datePart, buildPart] = value.split('_');\n        const [year, month, day] = datePart.split('-');\n        return `${day}${month}${year}${buildPart}`;\n    }\n    const match = value.match(FILE_NAME_PATTERN);\n    if (match) {\n        const [, datePart, buildPart] = match;\n        const [year, month, day] = datePart.split('-');\n        return `${day}${month}${year}${buildPart}`;\n    }\n    return undefined;\n};\n\nconst pad2 = (value) => String(value).padStart(2, '0');\nconst formatVersion = (date) => {\n    const current = date instanceof Date ? date : new Date(date);\n    return `${pad2(current.getDate())}${pad2(current.getMonth() + 1)}${current.getFullYear()}${pad2(current.getHours())}${pad2(current.getMinutes())}`;\n};\n\nconst deriveVersionFromFileName = (fileName) => {\n    if (typeof fileName === 'string' && fileName.endsWith('.json')) {\n        const candidate = fileName.slice(0, -5);\n        return normalizeVersion(candidate);\n    }\n    return undefined;\n};\n\nlet projectVersion = normalizeVersion(flow.get('versionRaw'))\n    || normalizeVersion(flow.get('version'))\n    || normalizeVersion(global.get('currentVersion'))\n    || deriveVersionFromFileName(flow.get('flowFileName'))\n    || deriveVersionFromFileName(global.get('flowFileName'));\nif (!projectVersion) {\n    projectVersion = formatVersion(new Date());\n}\n\nconst readableVersion = toReadableVersion(projectVersion);\nconst flowFileName = (() => {\n    const [datePart] = readableVersion.split('_');\n    const compact = toVersionString(readableVersion);\n    const buildFull = compact;\n    return `flows_${PROJECT_SLUG}_ver_${datePart}_${buildFull}.json`;\n})();\nconst versionNumber = Number(projectVersion);\n\nif (global.get('currentVersion') !== projectVersion) {\n    global.set('currentVersion', projectVersion);\n}\n\nif (global.get('flowFileName') !== flowFileName) {\n    global.set('flowFileName', flowFileName);\n}\n\nif (flow.get('flowFileName') !== flowFileName) {\n    flow.set('flowFileName', flowFileName);\n}\n\nif (flow.get('version') !== readableVersion) {\n    flow.set('version', readableVersion);\n}\n\nif (flow.get('versionRaw') !== projectVersion) {\n    flow.set('versionRaw', projectVersion);\n}\n\nif (Number.isFinite(versionNumber) && global.get('VER') !== versionNumber) {\n    global.set('VER', versionNumber);\n}\n\nconst uiStateMetaInit = global.get('uiState_meta') || {};\nlet metaUpdated = false;\n\nif (uiStateMetaInit.version !== projectVersion) {\n    uiStateMetaInit.version = projectVersion;\n    metaUpdated = true;\n}\n\nif (Number.isFinite(versionNumber) && uiStateMetaInit.versionNumber !== versionNumber) {\n    uiStateMetaInit.versionNumber = versionNumber;\n    metaUpdated = true;\n}\n\nif (uiStateMetaInit.fileName !== flowFileName) {\n    uiStateMetaInit.fileName = flowFileName;\n    metaUpdated = true;\n}\n\nif (uiStateMetaInit.readableVersion !== readableVersion) {\n    uiStateMetaInit.readableVersion = readableVersion;\n    metaUpdated = true;\n}\n\nif (metaUpdated) {\n    global.set('uiState_meta', uiStateMetaInit);\n}\n\nconst defaultVars = {n1:-100,k1:100,h1:10,p1:200,pk1:1000,n2:-200,k2:200,h2:20,p2:300,pk2:1100,n3:-300,k3:300,h3:30,p3:400,pk3:1200,n4:-400,k4:400,h4:40,p4:500,pk4:1300,n5:-500,k5:500,h5:50,p5:600,pk5:1400};\nlet loadedVars = {};\nlet source = msg.topic === 'init' ? '[INIT_ALL]' : '[READ_ALL_BTN]';\nconst requiredKeys = Object.keys(defaultVars);\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && requiredKeys.every(key => Object.prototype.hasOwnProperty.call(msg.payload, key));\n\nif (isValidPayload) {\n    loadedVars = msg.payload;\n    node.warn(source + \" Переменные (1-5) загружены из файла.\");\n} else {\n    loadedVars = {...defaultVars};\n    if (msg.error) {\n         node.warn(source + \" Ошибка чтения файла переменных (1-5): \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init') {\n         node.warn(source + \" Файл переменных (1-5) не найден/поврежден/неполный. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл переменных (1-5) не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key in defaultVars) {\n    let currentVal = Object.prototype.hasOwnProperty.call(loadedVars, key) ? loadedVars[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n    if (Number.isNaN(numValue)) {\n        node.warn(`Invalid number format for ${key}: ${currentVal}. Using default.`);\n        currentVal = defaultVars[key];\n        loadedVars[key] = currentVal;\n    } else {\n         currentVal = numValue;\n         loadedVars[key] = currentVal;\n    }\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\nglobal.set('savedStateAll', {...loadedVars});\nglobal.set('uiStateAll', {...loadedVars});\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные (1-5) установлены/обновлены: \" + JSON.stringify(loadedVars));\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные (1-5) уже были установлены.\");\n}\n\nreturn {payload:true,version:projectVersion,filename:flowFileName,versionNumber:Number.isFinite(versionNumber)?versionNumber:null,readableVersion};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 140,
        "wires": [
            [
                "39bc16e6daf33048"
            ]
        ]
    },
    {
        "id": "39bc16e6daf33048",
        "type": "link out",
        "z": "ba6153df2a5704ba",
        "name": "link out: trigger-all-vars-ui-update",
        "mode": "link",
        "links": [
            "256345716d3ef92c"
        ],
        "x": 1130,
        "y": 140,
        "wires": []
    },
    {
        "id": "256345716d3ef92c",
        "type": "link in",
        "z": "6035afc350b45a52",
        "name": "link in: trigger-all-vars-ui-update",
        "links": [
            "39bc16e6daf33048",
            "392a0b22a309701c"
        ],
        "x": 245,
        "y": 500,
        "wires": [
            [
                "a603c92c6503c5bf"
            ]
        ]
    },
    {
        "id": "a603c92c6503c5bf",
        "type": "function",
        "z": "6035afc350b45a52",
        "name": "Update UI Elements (All Vars)",
        "func": "const uiState = global.get('uiStateAll') || {};\nconst savedState = global.get('savedStateAll') || {};\nconst uiMessages = [];\nconst orderedKeys = [];\nfor (let i = 1; i <= 5; i++) {\n    orderedKeys.push(`n${i}`, `k${i}`, `h${i}`, `p${i}`, `pk${i}`);\n}\n\n// Prepare messages for UI numeric inputs (outputs 0-24)\nfor (const key of orderedKeys) {\n    const value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : 0;\n    uiMessages.push({ payload: value, topic: key });\n}\n\n// Prepare message for the status indicator (output 25)\nlet hasUnsavedChanges = false;\nfor (const key of orderedKeys) {\n    if (!savedState.hasOwnProperty(key) || !uiState.hasOwnProperty(key) || Number(savedState[key]) !== Number(uiState[key])) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\nuiMessages.push({ payload: statusMessage });\n\nreturn uiMessages;",
        "outputs": 26,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 500,
        "wires": [
            [
                "88bf1101a8eee9b3"
            ],
            [
                "52d62bf87e680a2c"
            ],
            [
                "92390c3ca882e2fa"
            ],
            [
                "1e5a5836026bc697"
            ],
            [
                "a6bf04393f1835e1"
            ],
            [
                "e5756f46fc793526"
            ],
            [
                "8f5c5c7f886f0f50"
            ],
            [
                "e1b4103d01159ea9"
            ],
            [
                "9efbf82b34eb5cc5"
            ],
            [
                "d325e1663a551953"
            ],
            [
                "7a08824017f1f11a"
            ],
            [
                "73efa32f8e967cef"
            ],
            [
                "e59df81d9397f530"
            ],
            [
                "02bfbf04b7b4406f"
            ],
            [
                "104dbed15d5707dd"
            ],
            [
                "5f725b4e9776face"
            ],
            [
                "bcd025e9b1e9881e"
            ],
            [
                "36ac638e035bf6b3"
            ],
            [
                "362055444e1e170c"
            ],
            [
                "3c8f5bbafc3a0c6c"
            ],
            [
                "9b89812c2f251c7f"
            ],
            [
                "d4155d71a7895337"
            ],
            [
                "58a6dade790d1cf9"
            ],
            [
                "0831c7b62b0c6cf6"
            ],
            [
                "d33264a5e9247327"
            ],
            [
                "1c58ce2ebe0b7829"
            ]
        ]
    },
    {
        "id": "9f9c55c6e716dfbb",
        "type": "function",
        "z": "6035afc350b45a52",
        "name": "Handle UI Input & Update Status (All Vars)",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\n\nlet uiState = global.get('uiStateAll') || {};\nconst savedState = global.get('savedStateAll') || {};\n\nconst validVars = [];\nfor (let i = 1; i <= 5; i++) {\n    validVars.push(`n${i}`, `k${i}`, `h${i}`, `p${i}`, `pk${i}`);\n}\n\nif (validVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    uiState[varName] = newValue;\n    global.set('uiStateAll', uiState);\n} else {\n    node.warn(\"[UI_INPUT_ALL] Получено некорректное сообщение от UI: \" + JSON.stringify(msg));\n    return null;\n}\n\nlet hasUnsavedChanges = false;\nfor (const key of validVars) {\n    if (!savedState.hasOwnProperty(key) || !uiState.hasOwnProperty(key) || Number(savedState[key]) !== Number(uiState[key])) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\n\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 500,
        "wires": [
            [
                "1c58ce2ebe0b7829"
            ]
        ]
    },
    {
        "id": "2db90ae931c5c8c4",
        "type": "link in",
        "z": "6035afc350b45a52",
        "name": "link in: update-all-vars-status-text",
        "links": [
            "a3340f8743e0a305"
        ],
        "x": 1455,
        "y": 600,
        "wires": [
            [
                "1c58ce2ebe0b7829"
            ]
        ]
    },
    {
        "id": "45559e72be266934",
        "type": "ui_button",
        "z": "6035afc350b45a52",
        "name": "Чтение из файла",
        "group": "bc84d9116936497a",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение",
        "tooltip": "Прочитать значения переменных из файла, обновить поля и ГЛОБАЛЬНЫЕ переменные",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-download",
        "payload": "read_request",
        "payloadType": "str",
        "topic": "read_request",
        "topicType": "str",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "2be95c7fa6b6b155"
            ]
        ]
    },
    {
        "id": "2be95c7fa6b6b155",
        "type": "link out",
        "z": "6035afc350b45a52",
        "name": "link out: trigger-read-all-vars",
        "mode": "link",
        "links": [
            "fe1f9125261c43c8"
        ],
        "x": 385,
        "y": 80,
        "wires": []
    },
    {
        "id": "762da5510358d015",
        "type": "ui_button",
        "z": "6035afc350b45a52",
        "name": "Запись в файл",
        "group": "bc84d9116936497a",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись",
        "tooltip": "Применить изменения к ГЛОБАЛЬНЫМ переменным и сохранить текущие значения в файл",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-upload",
        "payload": "write_request",
        "payloadType": "str",
        "topic": "write_request",
        "topicType": "str",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "00d898da337ee775"
            ]
        ]
    },
    {
        "id": "00d898da337ee775",
        "type": "link out",
        "z": "6035afc350b45a52",
        "name": "link out: trigger-save-all-vars",
        "mode": "link",
        "links": [
            "57238d4db0d9ca16"
        ],
        "x": 385,
        "y": 140,
        "wires": []
    },
    {
        "id": "88bf1101a8eee9b3",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "n1",
        "label": "Переменная n1:",
        "group": "ce3817ffe4df45f7",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "n1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "52d62bf87e680a2c",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "k1",
        "label": "Переменная k1:",
        "group": "ce3817ffe4df45f7",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "k1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "92390c3ca882e2fa",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "h1",
        "label": "Переменная h1:",
        "tooltip": "",
        "group": "ce3817ffe4df45f7",
        "order": 5,
        "width": 6,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "h1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": "1",
        "className": "",
        "x": 1050,
        "y": 180,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "1e5a5836026bc697",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "p1",
        "label": "Переменная p1 (ms):",
        "group": "ce3817ffe4df45f7",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "p1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "a6bf04393f1835e1",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "pk1",
        "label": "Переменная pk1 (ms):",
        "group": "ce3817ffe4df45f7",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pk1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 260,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "e5756f46fc793526",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "n2",
        "label": "Переменная n2:",
        "group": "f4b0b1599e1cbb6a",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "n2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "8f5c5c7f886f0f50",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "k2",
        "label": "Переменная k2:",
        "group": "f4b0b1599e1cbb6a",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "k2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 340,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "e1b4103d01159ea9",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "h2",
        "label": "Переменная h2:",
        "group": "f4b0b1599e1cbb6a",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "h2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 380,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "9efbf82b34eb5cc5",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "p2",
        "label": "Переменная p2 (ms):",
        "group": "f4b0b1599e1cbb6a",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "p2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 420,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "d325e1663a551953",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "pk2",
        "label": "Переменная pk2 (ms):",
        "group": "f4b0b1599e1cbb6a",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pk2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 460,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "7a08824017f1f11a",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "n3",
        "label": "Переменная n3:",
        "group": "856aa35a1221533d",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "n3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 500,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "73efa32f8e967cef",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "k3",
        "label": "Переменная k3:",
        "group": "856aa35a1221533d",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "k3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 540,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "e59df81d9397f530",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "h3",
        "label": "Переменная h3:",
        "group": "856aa35a1221533d",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "h3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "02bfbf04b7b4406f",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "p3",
        "label": "Переменная p3 (ms):",
        "group": "856aa35a1221533d",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "p3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 620,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "104dbed15d5707dd",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "pk3",
        "label": "Переменная pk3 (ms):",
        "group": "856aa35a1221533d",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pk3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 660,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "5f725b4e9776face",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "n4",
        "label": "Переменная n4:",
        "group": "48506493f6a2e380",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "n4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 700,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "bcd025e9b1e9881e",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "k4",
        "label": "Переменная k4:",
        "group": "48506493f6a2e380",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "k4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 740,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "36ac638e035bf6b3",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "h4",
        "label": "Переменная h4:",
        "group": "48506493f6a2e380",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "h4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 780,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "362055444e1e170c",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "p4",
        "label": "Переменная p4 (ms):",
        "group": "48506493f6a2e380",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "p4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 820,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "3c8f5bbafc3a0c6c",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "pk4",
        "label": "Переменная pk4 (ms):",
        "group": "48506493f6a2e380",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pk4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 860,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "9b89812c2f251c7f",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "n5",
        "label": "Переменная n5:",
        "group": "0618562608265ead",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "n5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 900,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "d4155d71a7895337",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "k5",
        "label": "Переменная k5:",
        "group": "0618562608265ead",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "k5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 940,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "58a6dade790d1cf9",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "h5",
        "label": "Переменная h5:",
        "group": "0618562608265ead",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "h5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 980,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "0831c7b62b0c6cf6",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "p5",
        "label": "Переменная p5 (ms):",
        "group": "0618562608265ead",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "p5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 1020,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "d33264a5e9247327",
        "type": "ui_numeric",
        "z": "6035afc350b45a52",
        "name": "pk5",
        "label": "Переменная pk5 (ms):",
        "group": "0618562608265ead",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pk5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 1060,
        "wires": [
            [
                "9f9c55c6e716dfbb"
            ]
        ]
    },
    {
        "id": "1c58ce2ebe0b7829",
        "type": "ui_text",
        "z": "6035afc350b45a52",
        "group": "bc84d9116936497a",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус сохранения",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1630,
        "y": 550,
        "wires": []
    },
    {
        "id": "dc13e614b7e05f98",
        "type": "ui_button",
        "z": "6035afc350b45a52",
        "name": "Создать бэкап сейчас",
        "group": "bc84d9116936497a",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Создать Бэкап",
        "tooltip": "Сохранить текущие файлы переменных (All, Calc, PH) в каталог бэкапа с текущей датой",
        "color": "",
        "bgcolor": "orange",
        "className": "",
        "icon": "save",
        "payload": "manual",
        "payloadType": "str",
        "topic": "manual_backup",
        "topicType": "str",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "59fd1d0f99fdcc48"
            ]
        ]
    },
    {
        "id": "69e52e6c83e325c3",
        "type": "ui_button",
        "z": "6035afc350b45a52",
        "name": "Восстановить из бэкапа (сегодня)",
        "group": "bc84d9116936497a",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Восстановить Бэкап",
        "tooltip": "Перезаписать текущие файлы переменных (All, Calc, PH) файлами из бэкапа за СЕГОДНЯШНЮЮ дату и перезагрузить переменные.",
        "color": "",
        "bgcolor": "darkred",
        "className": "",
        "icon": "restore",
        "payload": "restore",
        "payloadType": "str",
        "topic": "restore_backup",
        "topicType": "str",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "25a2b0bb09e27063"
            ]
        ]
    },
    {
        "id": "59fd1d0f99fdcc48",
        "type": "link out",
        "z": "6035afc350b45a52",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "5635207c8d47f9d0"
        ],
        "x": 375,
        "y": 260,
        "wires": []
    },
    {
        "id": "25a2b0bb09e27063",
        "type": "link out",
        "z": "6035afc350b45a52",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "859e0bc908216428"
        ],
        "x": 435,
        "y": 200,
        "wires": []
    },
    {
        "id": "57238d4db0d9ca16",
        "type": "link in",
        "z": "dec49f13b89f25f1",
        "name": "link in: trigger-save-all-vars",
        "links": [
            "00d898da337ee775",
            "4be7fd27115709bc"
        ],
        "x": 245,
        "y": 80,
        "wires": [
            [
                "b8c5c60d5bb9f7c3"
            ]
        ]
    },
    {
        "id": "b8c5c60d5bb9f7c3",
        "type": "function",
        "z": "dec49f13b89f25f1",
        "name": "Apply Globals, Save State & File (All Vars)",
        "func": "const uiState = global.get('uiStateAll') || {};\nlet savedState = global.get('savedStateAll') || {};\n\nlet globalsChanged = false;\nconst validVars = [];\nfor (let i = 1; i <= 5; i++) {\n    validVars.push(`n${i}`, `k${i}`, `h${i}`, `p${i}`, `pk${i}`);\n}\n\nconst stateToSave = {};\n\nfor (const key of validVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : null;\n    \n    const numValue = Number(valueToSet);\n    if (valueToSet === null || isNaN(numValue)){\n         node.warn(`Attempted to save invalid/missing value for ${key}: ${valueToSet}. Using last saved value or default.`);\n         // Use last saved value or default from the init flow\n         const defaultVal = global.get('savedStateAll') ? global.get('savedStateAll')[key] : undefined; // Fallback needed\n         valueToSet = defaultVal !== undefined ? defaultVal : 0; // Default to 0 if truly missing\n    } else {\n         valueToSet = numValue;\n         // Add clamping if needed\n    }\n    \n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChanged = true;\n    }\n    stateToSave[key] = valueToSet;\n}\n\nglobal.set('savedStateAll', { ...stateToSave });\nglobal.set('uiStateAll', { ...stateToSave });\n\nif (globalsChanged) {\n    node.log(\"[WRITE_ALL_BTN] Глобальные переменные (1-5) обновлены из UI: \" + JSON.stringify(stateToSave));\n} else {\n    node.log(\"[WRITE_ALL_BTN] Глобальные переменные (1-5) не требовали обновления.\");\n}\nnode.log(\"[WRITE_ALL_BTN] global.savedStateAll и global.uiStateAll обновлены.\");\n\nconst filePayload = { payload: { ...stateToSave } };\nconst statusMessage = { payload: \"<font color='green'>Все изменения сохранены</font>\" };\n\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "af43b5031708a713"
            ],
            [
                "a3340f8743e0a305"
            ]
        ]
    },
    {
        "id": "af43b5031708a713",
        "type": "json",
        "z": "dec49f13b89f25f1",
        "name": "Объект в JSON",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "67cfd1c8bf30845b"
            ]
        ]
    },
    {
        "id": "67cfd1c8bf30845b",
        "type": "file",
        "z": "dec49f13b89f25f1",
        "name": "Сохранить файл переменных",
        "filename": "/home/root/.node-red/save/variables_all.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "efc8fd1cb239a15e"
            ]
        ]
    },
    {
        "id": "efc8fd1cb239a15e",
        "type": "ui_toast",
        "z": "dec49f13b89f25f1",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение",
        "name": "Уведомление о сохранении",
        "x": 480,
        "y": 340,
        "wires": []
    },
    {
        "id": "a3340f8743e0a305",
        "type": "link out",
        "z": "dec49f13b89f25f1",
        "name": "link out: update-all-vars-status-text",
        "mode": "link",
        "links": [
            "2db90ae931c5c8c4"
        ],
        "x": 750,
        "y": 100,
        "wires": []
    },
    {
        "id": "a0db2f669b64bd61",
        "type": "inject",
        "z": "459913172d62e701",
        "name": "При старте потока 2c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "a5b3ce9fdb814e9c"
            ]
        ]
    },
    {
        "id": "8489b771daf8dfc0",
        "type": "link in",
        "z": "459913172d62e701",
        "name": "link in: trigger-read-calc",
        "links": [
            "3057ebe730a831c0"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "356bccb04dd00c31"
            ]
        ]
    },
    {
        "id": "356bccb04dd00c31",
        "type": "file in",
        "z": "459913172d62e701",
        "name": "Прочитать файл переменных расчета",
        "filename": "/home/root/.node-red/save/variables_calculation.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "c0a4251861e01177"
            ]
        ]
    },
    {
        "id": "708951edb097d5ef",
        "type": "catch",
        "z": "459913172d62e701",
        "name": "Перехват ошибки чтения файла",
        "scope": [
            "356bccb04dd00c31"
        ],
        "uncaught": false,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "db70258907818f5d"
            ]
        ]
    },
    {
        "id": "c0a4251861e01177",
        "type": "json",
        "z": "459913172d62e701",
        "name": "Разобрать JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "db70258907818f5d"
            ]
        ]
    },
    {
        "id": "db70258907818f5d",
        "type": "function",
        "z": "459913172d62e701",
        "name": "Init/Read State & Globals (Calc)",
        "func": "const defaultVars = {\n    koef0: 1, konst0: 0,\n    koef1: 1, konst1: 0,\n    koef2: 1, konst2: 0,\n    koef3: 1, konst3: 0,\n    koef4: 1, konst4: 0,\n    koef5: 1, konst5: 0,\n    koef6: 1, konst6: 0,\n    koef7: 1, konst7: 0\n};\n\nlet loadedVars = {};\nlet source = msg.topic === 'init' ? '[INIT_CALC]' : '[READ_CALC_BTN]';\n\nconst requiredKeys = Object.keys(defaultVars);\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && requiredKeys.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    loadedVars = msg.payload;\n    node.warn(source + \" Переменные расчета (koef/konst) загружены из файла.\");\n} else {\n    loadedVars = { ...defaultVars };\n    if (msg.error) {\n         node.warn(source + \" Ошибка чтения файла переменных расчета: \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init'){\n         node.warn(source + \" Файл переменных расчета (koef/konst) не найден/поврежден/неполный. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл переменных расчета (koef/konst) не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key in defaultVars) { // Iterate over default keys to ensure all exist\n    let currentVal = loadedVars.hasOwnProperty(key) ? loadedVars[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n\n    if (isNaN(numValue)) {\n        node.warn(`Invalid number format for ${key}: ${currentVal}. Using default.`);\n        currentVal = defaultVars[key];\n        loadedVars[key] = currentVal; // Correct loadedVars as well\n    } else {\n         currentVal = numValue; // Use the number value\n         // Add clamping if needed, e.g., between -1000 and 1000\n         // if (currentVal < -1000) currentVal = -1000;\n         // if (currentVal > 1000) currentVal = 1000;\n         loadedVars[key] = currentVal; // Update loadedVars with potentially clamped value\n    }\n    \n    // Set global variables\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\n// Set global states\nglobal.set('savedStateCalc', { ...loadedVars });\nglobal.set('uiStateCalc', { ...loadedVars });\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные расчета (koef/konst) установлены/обновлены: \" + JSON.stringify(loadedVars));\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные расчета (koef/konst) уже были установлены.\");\n}\n\n// Send trigger to UI flow\nreturn { payload: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 140,
        "wires": [
            [
                "3011b4228cd7baaf"
            ]
        ]
    },
    {
        "id": "3011b4228cd7baaf",
        "type": "link out",
        "z": "459913172d62e701",
        "name": "link out: trigger-calc-ui-update",
        "mode": "link",
        "links": [
            "8ef1a4072670ce1b"
        ],
        "x": 1090,
        "y": 140,
        "wires": []
    },
    {
        "id": "8ef1a4072670ce1b",
        "type": "link in",
        "z": "12f8c9ce06674206",
        "name": "link in: trigger-calc-ui-update",
        "links": [
            "3011b4228cd7baaf",
            "3166a153e733534a"
        ],
        "x": 115,
        "y": 400,
        "wires": [
            [
                "dd3235feb522af9a"
            ]
        ]
    },
    {
        "id": "dd3235feb522af9a",
        "type": "function",
        "z": "12f8c9ce06674206",
        "name": "Update UI Elements (Calc)",
        "func": "const uiState = global.get('uiStateCalc') || {};\nconst savedState = global.get('savedStateCalc') || {};\nconst uiMessages = [];\nconst orderedKeys = [];\nfor (let i = 0; i <= 7; i++) {\n    orderedKeys.push(`koef${i}`, `konst${i}`);\n}\n\n// Prepare messages for UI numeric inputs (outputs 0-15)\nfor (const key of orderedKeys) {\n    const value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : 0; // Default to 0 if key missing\n    uiMessages.push({ payload: value, topic: key });\n}\n\n// Prepare message for the status indicator (output 16)\nlet hasUnsavedChanges = false;\nfor (const key of orderedKeys) {\n    // Use Number() to handle potential type differences\n    // Ensure both states have the key before comparing\n    if (!savedState.hasOwnProperty(key) || !uiState.hasOwnProperty(key) || Number(savedState[key]) !== Number(uiState[key])) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\nuiMessages.push({ payload: statusMessage });\n\n// Return the array of messages (16 for numerics + 1 for status text)\nreturn uiMessages;",
        "outputs": 17,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "c8779e55bbb441eb"
            ],
            [
                "b37bb6efc2c78bd3"
            ],
            [
                "059561b598806d16"
            ],
            [
                "8ea2ee250d8b9d2b"
            ],
            [
                "f888574c02deb485"
            ],
            [
                "c22485d3b290626f"
            ],
            [
                "ee908c4514fac698"
            ],
            [
                "23132b06b289860c"
            ],
            [
                "36e132b71dd4ce27"
            ],
            [
                "b7a05060e80f4b52"
            ],
            [
                "fe69623550097c7a"
            ],
            [
                "c7f343764f8c44eb"
            ],
            [
                "e7649290106a66b4"
            ],
            [
                "753bdf156aebca67"
            ],
            [
                "a8a7f76de28b4ab1"
            ],
            [
                "74c31bf27b59a2ec"
            ],
            [
                "d5242950718dce8b"
            ]
        ]
    },
    {
        "id": "d0736a92c88ca08f",
        "type": "function",
        "z": "12f8c9ce06674206",
        "name": "Handle UI Input & Update Status (Calc)",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\n\nlet uiState = global.get('uiStateCalc') || {};\nconst savedState = global.get('savedStateCalc') || {};\n\nconst validVars = [];\nfor (let i = 0; i <= 7; i++) {\n    validVars.push(`koef${i}`, `konst${i}`);\n}\n\nif (validVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    uiState[varName] = newValue;\n    global.set('uiStateCalc', uiState);\n} else {\n    node.warn(\"[UI_CALC_INPUT] Получено некорректное сообщение от UI: \" + JSON.stringify(msg));\n    return null; // Stop processing if invalid\n}\n\nlet hasUnsavedChanges = false;\nfor (const key of validVars) {\n    if (!savedState.hasOwnProperty(key) || !uiState.hasOwnProperty(key) || Number(savedState[key]) !== Number(uiState[key])) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\n\n// Only output the status message\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 400,
        "wires": [
            [
                "d5242950718dce8b"
            ]
        ]
    },
    {
        "id": "20fcac8fa955599c",
        "type": "link in",
        "z": "12f8c9ce06674206",
        "name": "link in: update-calc-status-text",
        "links": [
            "fa23c6232b9f8a18"
        ],
        "x": 875,
        "y": 500,
        "wires": [
            [
                "d5242950718dce8b"
            ]
        ]
    },
    {
        "id": "4d79481eaa096675",
        "type": "ui_button",
        "z": "12f8c9ce06674206",
        "name": "Чтение из файла",
        "group": "c988c6372c91f4dc",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение",
        "tooltip": "Прочитать значения переменных расчета из файла, обновить поля и ГЛОБАЛЬНЫЕ переменные",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-download",
        "payload": "read_request",
        "payloadType": "str",
        "topic": "read_request",
        "topicType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "3057ebe730a831c0"
            ]
        ]
    },
    {
        "id": "3057ebe730a831c0",
        "type": "link out",
        "z": "12f8c9ce06674206",
        "name": "link out: trigger-read-calc",
        "mode": "link",
        "links": [
            "8489b771daf8dfc0"
        ],
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "68b867c264145ebd",
        "type": "ui_button",
        "z": "12f8c9ce06674206",
        "name": "Запись в файл",
        "group": "c988c6372c91f4dc",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись",
        "tooltip": "Применить изменения к ГЛОБАЛЬНЫМ переменным и сохранить текущие значения в файл",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-upload",
        "payload": "write_request",
        "payloadType": "str",
        "topic": "write_request",
        "topicType": "str",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "2ea47d8e8ef4edd6"
            ]
        ]
    },
    {
        "id": "2ea47d8e8ef4edd6",
        "type": "link out",
        "z": "12f8c9ce06674206",
        "name": "link out: trigger-save-calc",
        "mode": "link",
        "links": [
            "f85b948170d968d8"
        ],
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "c8779e55bbb441eb",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "koef0",
        "label": "Koef 0:",
        "group": "4f1a66eaaa94d6d1",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef0",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "b37bb6efc2c78bd3",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "konst0",
        "label": "Konst 0:",
        "group": "6be19a21b1adeb14",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst0",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 140,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "059561b598806d16",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "koef1",
        "label": "Koef 1:",
        "group": "4f1a66eaaa94d6d1",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "8ea2ee250d8b9d2b",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "konst1",
        "label": "Konst 1:",
        "group": "6be19a21b1adeb14",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 220,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "f888574c02deb485",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "koef2",
        "label": "Koef 2:",
        "group": "4f1a66eaaa94d6d1",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 260,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "c22485d3b290626f",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "konst2",
        "label": "Konst 2:",
        "group": "6be19a21b1adeb14",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 300,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "ee908c4514fac698",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "koef3",
        "label": "Koef 3:",
        "group": "4f1a66eaaa94d6d1",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 340,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "23132b06b289860c",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "konst3",
        "label": "Konst 3:",
        "group": "6be19a21b1adeb14",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 380,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "36e132b71dd4ce27",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "koef4",
        "label": "Koef 4:",
        "group": "4f1a66eaaa94d6d1",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 420,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "b7a05060e80f4b52",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "konst4",
        "label": "Konst 4:",
        "group": "6be19a21b1adeb14",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 460,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "fe69623550097c7a",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "koef5",
        "label": "Koef 5:",
        "group": "4f1a66eaaa94d6d1",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 500,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "c7f343764f8c44eb",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "konst5",
        "label": "Konst 5:",
        "group": "6be19a21b1adeb14",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 540,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "e7649290106a66b4",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "koef6",
        "label": "Koef 6:",
        "group": "4f1a66eaaa94d6d1",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef6",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 580,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "753bdf156aebca67",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "konst6",
        "label": "Konst 6:",
        "group": "6be19a21b1adeb14",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst6",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 620,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "a8a7f76de28b4ab1",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "koef7",
        "label": "Koef 7:",
        "group": "4f1a66eaaa94d6d1",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef7",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 660,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "74c31bf27b59a2ec",
        "type": "ui_numeric",
        "z": "12f8c9ce06674206",
        "name": "konst7",
        "label": "Konst 7:",
        "group": "6be19a21b1adeb14",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst7",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 700,
        "wires": [
            [
                "d0736a92c88ca08f"
            ]
        ]
    },
    {
        "id": "d5242950718dce8b",
        "type": "ui_text",
        "z": "12f8c9ce06674206",
        "group": "c988c6372c91f4dc",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус сохранения",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1110,
        "y": 450,
        "wires": []
    },
    {
        "id": "f85b948170d968d8",
        "type": "link in",
        "z": "04891a37d169f2b9",
        "name": "link in: trigger-save-calc",
        "links": [
            "2ea47d8e8ef4edd6",
            "1562093a54497e29"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "bf7b112abafac6d8"
            ]
        ]
    },
    {
        "id": "bf7b112abafac6d8",
        "type": "function",
        "z": "04891a37d169f2b9",
        "name": "Apply Globals, Save State & File (Calc)",
        "func": "const uiState = global.get('uiStateCalc') || {};\nlet savedState = global.get('savedStateCalc') || {}; // Will be updated\n\nlet globalsChanged = false;\nconst validVars = [];\nfor (let i = 0; i <= 7; i++) {\n    validVars.push(`koef${i}`, `konst${i}`);\n}\n\nconst stateToSave = {};\n\nfor (const key of validVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : null;\n    \n    // Ensure the value being set is a number\n    const numValue = Number(valueToSet);\n    if (valueToSet === null || isNaN(numValue)){\n         node.warn(`Attempted to save invalid/missing value for ${key}: ${valueToSet}. Using last saved value or default.`);\n         // Use last saved value or default from the init flow\n         const defaultValue = key.startsWith('koef') ? 1 : 0;\n         valueToSet = savedState.hasOwnProperty(key) ? savedState[key] : defaultValue; \n    } else {\n         valueToSet = numValue; // Use the valid number\n         // Add clamping if needed\n         // if (valueToSet < -1000) valueToSet = -1000;\n         // if (valueToSet > 1000) valueToSet = 1000;\n    }\n    \n    // Update global variable if changed\n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChanged = true;\n    }\n    // Store the potentially clamped/corrected value for saving state and file\n    stateToSave[key] = valueToSet; \n}\n\n// Update the global saved state\nglobal.set('savedStateCalc', { ...stateToSave });\n// Update the global UI state as well, in case values were clamped/corrected\nglobal.set('uiStateCalc', { ...stateToSave }); \n\nif (globalsChanged) {\n    node.log(\"[WRITE_CALC_BTN] Глобальные переменные расчета обновлены из UI: \" + JSON.stringify(stateToSave));\n} else {\n    node.log(\"[WRITE_CALC_BTN] Глобальные переменные расчета не требовали обновления.\");\n}\nnode.log(\"[WRITE_CALC_BTN] global.savedStateCalc и global.uiStateCalc обновлены.\");\n\n// Output 1: Data to save to file\nconst filePayload = { payload: { ...stateToSave } };\n\n// Output 2: Status message for UI text node via link out\nconst statusMessage = { payload: \"<font color='green'>Все изменения сохранены</font>\" };\n\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "69e95b3f01b89dca"
            ],
            [
                "fa23c6232b9f8a18"
            ]
        ]
    },
    {
        "id": "69e95b3f01b89dca",
        "type": "json",
        "z": "04891a37d169f2b9",
        "name": "Объект в JSON",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "ba550ae23eb2a0e1"
            ]
        ]
    },
    {
        "id": "ba550ae23eb2a0e1",
        "type": "file",
        "z": "04891a37d169f2b9",
        "name": "Сохранить файл переменных расчета",
        "filename": "/home/root/.node-red/save/variables_calculation.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "89b9249358fb2c3c"
            ]
        ]
    },
    {
        "id": "89b9249358fb2c3c",
        "type": "ui_toast",
        "z": "04891a37d169f2b9",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение Расчета",
        "name": "Уведомление о сохранении",
        "x": 480,
        "y": 340,
        "wires": []
    },
    {
        "id": "fa23c6232b9f8a18",
        "type": "link out",
        "z": "04891a37d169f2b9",
        "name": "link out: update-calc-status-text",
        "mode": "link",
        "links": [
            "20fcac8fa955599c"
        ],
        "x": 730,
        "y": 100,
        "wires": []
    },
    {
        "id": "fa908dcc5f9506e9",
        "type": "inject",
        "z": "0aab3c6cefb9136c",
        "name": "Запуск при старте 3с",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "start",
        "payload": "true",
        "payloadType": "bool",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "2f7d6b4240cc4f5a"
            ]
        ]
    },
    {
        "id": "edd20603f5ad97a0",
        "type": "ui_button",
        "z": "0aab3c6cefb9136c",
        "name": "Сброс итерации",
        "group": "iteration_ui_group",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "label": "Сброс итерации",
        "tooltip": "Остановить текущую итерацию и начать с Шага 1",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "refresh",
        "payload": "reset",
        "payloadType": "str",
        "topic": "reset",
        "topicType": "str",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "c821f45e40c16c37"
            ]
        ]
    },
    {
        "id": "c821f45e40c16c37",
        "type": "function",
        "z": "0aab3c6cefb9136c",
        "name": "Контроллер итерации",
        "func": "const fContext = flow.get('iterationContext') || {};\nconst gContext = global;\n\nif (fContext.intervalId) {\n    clearInterval(fContext.intervalId);\n    fContext.intervalId = null;\n}\nif (fContext.firstPauseTimeoutId) {\n    clearTimeout(fContext.firstPauseTimeoutId);\n    fContext.firstPauseTimeoutId = null;\n}\nif (fContext.nextStepDelayTimeoutId) {\n    clearTimeout(fContext.nextStepDelayTimeoutId);\n    fContext.nextStepDelayTimeoutId = null;\n}\nif (fContext.stepSendDelayTimeoutId) {\n    delete fContext.stepSendDelayTimeoutId;\n}\nif (fContext.pauseTimeoutId) {\n    delete fContext.pauseTimeoutId;\n}\n\n\nif (msg.topic === 'reset') {\n    node.warn(\"[ITERATION] Сброс итерации...\");\n    fContext.currentStep = 1;\n    fContext.isRunning = true;\n    if (fContext.intervalId) clearInterval(fContext.intervalId);\n    if (fContext.firstPauseTimeoutId) clearTimeout(fContext.firstPauseTimeoutId);\n    if (fContext.nextStepDelayTimeoutId) clearTimeout(fContext.nextStepDelayTimeoutId);\n    fContext.intervalId = null;\n    fContext.firstPauseTimeoutId = null;\n    fContext.nextStepDelayTimeoutId = null;\n\n    flow.set('iterationContext', fContext);\n    node.send([{ topic: 'start_step', payload: fContext.currentStep }, null, null]);\n    return null;\n}\n\nif (msg.topic === 'start' || msg.topic === 'start_step') {\n    if (msg.topic === 'start' && fContext.isRunning) {\n        node.log(\"[ITERATION] Итерация уже запущена (игнорирую 'start').\");\n        return null;\n    }\n\n    if (msg.topic === 'start') {\n        fContext.currentStep = 1;\n    }\n\n    fContext.currentStep = fContext.currentStep || 1;\n    fContext.isRunning = true;\n\n    const step = fContext.currentStep;\n    node.log(`[ITERATION] Запуск Шага ${step}`);\n\n    const n = gContext.get(`n${step}`);\n    const k = gContext.get(`k${step}`);\n    const h = gContext.get(`h${step}`);\n    let p = gContext.get(`p${step}`);\n    let pk = gContext.get(`pk${step}`);\n\n    if ([n, k, h, p, pk].some(val => typeof val !== 'number')) {\n        node.error(`[ITERATION] Ошибка: Не все переменные для Шага ${step} являются числами (${n},${k},${h},${p},${pk}). Остановка.`);\n        fContext.isRunning = false;\n        flow.set('iterationContext', fContext);\n        return null;\n    }\n    if (n === k) {\n        node.error(`[ITERATION] Ошибка: Начальное значение n${step} (${n}) равно конечному k${step} (${k}). Итерация невозможна. Остановка.`);\n        fContext.isRunning = false;\n        flow.set('iterationContext', fContext);\n        return null;\n    }\n    if (h === 0) {\n        node.error(`[ITERATION] Ошибка: Шаг h${step} равен нулю. Итерация невозможна. Остановка.`);\n        fContext.isRunning = false;\n        flow.set('iterationContext', fContext);\n        return null;\n    }\n    if (p <= 0) {\n        node.warn(`[ITERATION] Предупреждение: Период p${step} (${p}ms) <= 0. Используется 100ms.`);\n        p = 100;\n    }\n    if (pk < 0) {\n        node.warn(`[ITERATION] Предупреждение: Пауза pk${step} (${pk}ms) < 0. Используется 0ms.`);\n        pk = 0;\n    }\n\n    const isIncreasing = k > n;\n    const stepIncrement = isIncreasing ? Math.abs(h) : -Math.abs(h);\n    node.log(`[ITERATION] Шаг ${step}: Направление ${isIncreasing ? 'возрастание' : 'убывание'}, шаг из h${step}=${h} равен ${stepIncrement}`);\n\n    gContext.set('x', n);\n    node.log(`[ITERATION] Шаг ${step}: x инициализирован значением n${step} = ${n}`);\n\n    node.send([null, { payload: n }, null]);\n\n    fContext.intervalId = setInterval(() => {\n        const currentfContext = flow.get('iterationContext') || {};\n        if (!currentfContext.isRunning || currentfContext.intervalId !== fContext.intervalId) {\n            clearInterval(fContext.intervalId);\n            return;\n        }\n\n        let currentX = gContext.get('x');\n        let nextX = currentX + stepIncrement;\n\n        if ((isIncreasing && nextX > k) || (!isIncreasing && nextX < k)) {\n            currentX = k;\n        } else {\n            currentX = nextX;\n        }\n        gContext.set('x', currentX);\n\n        node.send([null, { payload: currentX }, null]);\n\n        const conditionMet = currentX === k;\n\n        if (conditionMet) {\n            node.log(`[ITERATION] Шаг ${step} завершен. x (${currentX}) достиг k${step} (${k}).`);\n            clearInterval(fContext.intervalId);\n            fContext.intervalId = null;\n\n            node.log(`[ITERATION] Запуск ПЕРВОЙ паузы pk=${pk}ms.`);\n            fContext.firstPauseTimeoutId = setTimeout(() => {\n                const latestfContext1 = flow.get('iterationContext') || {};\n                if (!latestfContext1.isRunning || latestfContext1.firstPauseTimeoutId !== fContext.firstPauseTimeoutId) {\n                    node.warn(\"[ITERATION] Сброс произошел во время ПЕРВОЙ паузы 'pk'. Номер шага и вторая пауза 'pk' не запускаются.\")\n                    return;\n                }\n                latestfContext1.firstPauseTimeoutId = null;\n\n                node.log(`[ITERATION] Отправка номера шага ${step} на выход 3 (после ПЕРВОЙ паузы pk=${pk}ms).`);\n                node.send([null, null, { payload: step }]);\n\n                node.log(`[ITERATION] Запуск ВТОРОЙ паузы pk=${pk}ms перед следующим шагом.`);\n                latestfContext1.nextStepDelayTimeoutId = setTimeout(() => {\n                    const latestfContext2 = flow.get('iterationContext') || {};\n                    if (!latestfContext2.isRunning || latestfContext2.nextStepDelayTimeoutId !== latestfContext1.nextStepDelayTimeoutId) {\n                        node.warn(\"[ITERATION] Сброс произошел во время ВТОРОЙ паузы 'pk'. Следующий шаг не запускается.\")\n                        return;\n                    }\n                    latestfContext2.nextStepDelayTimeoutId = null;\n\n                    latestfContext2.currentStep = (step % 5) + 1;\n                    node.log(`[ITERATION] Запуск следующего шага ${latestfContext2.currentStep} (после ВТОРОЙ паузы pk=${pk}ms).`);\n                    flow.set('iterationContext', latestfContext2);\n                    node.send([{ topic: 'start_step', payload: latestfContext2.currentStep }, null, null]);\n\n                }, pk);\n                flow.set('iterationContext', latestfContext1);\n\n            }, pk);\n            flow.set('iterationContext', fContext);\n\n        }\n    }, p);\n\n    flow.set('iterationContext', fContext);\n}\n\nreturn null;\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "// Code added here will be run once when the node is started.\nnode.log(\"[ITERATION] Контроллер инициализирован.\");\n// Initialize flow context for iteration\nflow.set('iterationContext', { \n    currentStep: 1,\n    isRunning: false,\n    intervalId: null,\n    pauseTimeoutId: null\n});\n// Initialize global x if not present\nif (global.get('x') === undefined) {\n    global.set('x', 0);\n}\n// Initialize global nh if not present\nif (global.get('nh') === undefined) {\n    global.set('nh', 0); // Or null, or a suitable default\n}\n",
        "finalize": "// Code added here will be run when the node is stopped or restarted.\nconst fContext = flow.get('iterationContext') || {};\nnode.log(\"[ITERATION] Остановка контроллера...\");\nif (fContext.intervalId) {\n    clearInterval(fContext.intervalId);\n    node.log(\"[ITERATION] Остановлен таймер интервала при выключении.\");\n}\nif (fContext.pauseTimeoutId) {\n    clearTimeout(fContext.pauseTimeoutId);\n    node.log(\"[ITERATION] Остановлен таймер паузы при выключении.\");\n}\n// Reset context on finalize\nflow.set('iterationContext', { \n    currentStep: 1,\n    isRunning: false,\n    intervalId: null,\n    pauseTimeoutId: null\n});\nnode.log(\"[ITERATION] Контроллер остановлен и контекст сброшен.\");\n",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "c821f45e40c16c37",
                "e11d518fa54c3c84"
            ],
            [
                "6ae0f7de6ac4e10b"
            ],
            [
                "7c4897294eb0273d",
                "d655c580310a7aac"
            ]
        ]
    },
    {
        "id": "2bb113fc6e830695",
        "type": "ui_chart",
        "z": "0aab3c6cefb9136c",
        "name": "График итерации X",
        "group": "iteration_ui_group",
        "order": 1,
        "width": 32,
        "height": 12,
        "label": "Значение X",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "200",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7c4897294eb0273d",
        "type": "change",
        "z": "0aab3c6cefb9136c",
        "name": "Установить global.nh",
        "rules": [
            {
                "t": "set",
                "p": "nh",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e11d518fa54c3c84",
        "type": "link out",
        "z": "0aab3c6cefb9136c",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "e440836aad74ded4"
        ],
        "x": 915,
        "y": 240,
        "wires": []
    },
    {
        "id": "d655c580310a7aac",
        "type": "link out",
        "z": "0aab3c6cefb9136c",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "2a0309279ebedb44",
            "860ffc0e071f2112",
            "a9b3bf4efaf75f93",
            "b6181a6c9c6ee23d"
        ],
        "x": 915,
        "y": 280,
        "wires": []
    },
    {
        "id": "15c4871884471ec6",
        "type": "link in",
        "z": "0aab3c6cefb9136c",
        "name": "Сброс итерации",
        "links": [
            "392a0b22a309701c"
        ],
        "x": 145,
        "y": 180,
        "wires": [
            [
                "edd20603f5ad97a0"
            ]
        ]
    },
    {
        "id": "f737018cea686424",
        "type": "delay",
        "z": "0aab3c6cefb9136c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 110,
        "y": 360,
        "wires": [
            [
                "edd20603f5ad97a0"
            ]
        ]
    },
    {
        "id": "69374ce71e9a4ab6",
        "type": "ADAM-write",
        "z": "e9378293b40785cc",
        "name": "Канал 0 АО (6224)",
        "host": "192.168.2.2",
        "serialPortCfg": "",
        "unit_id": 1,
        "write_ch": 0,
        "write_ch_type": "write_ao_1",
        "reconnecttimeout": "1",
        "Series": "mbtcp",
        "advDevTypeTCP": "ADAM-6224",
        "advDevTypeRTU": "ADAM-4022T",
        "advDevType": "ADAM-6224",
        "x": 1130,
        "y": 140,
        "wires": []
    },
    {
        "id": "60e9258db2bc6fe1",
        "type": "range",
        "z": "e9378293b40785cc",
        "minin": "-5000",
        "maxin": "5000",
        "minout": "0",
        "maxout": "4095",
        "action": "clamp",
        "round": true,
        "property": "payload",
        "name": "Scale x to 0-4095",
        "x": 900,
        "y": 140,
        "wires": [
            [
                "69374ce71e9a4ab6",
                "b42a1410f56d726a"
            ]
        ]
    },
    {
        "id": "28a832887dbccfa7",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Get Global Var x",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "x",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "78cb40103b2226b5"
            ]
        ]
    },
    {
        "id": "431ad8a977051c78",
        "type": "inject",
        "z": "e9378293b40785cc",
        "name": "Periodic Trigger 0.1с",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "28a832887dbccfa7",
                "eac38ea743545412"
            ]
        ]
    },
    {
        "id": "78cb40103b2226b5",
        "type": "rbe",
        "z": "e9378293b40785cc",
        "name": "Filter unchanged x",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "x": 630,
        "y": 140,
        "wires": [
            [
                "60e9258db2bc6fe1",
                "4fcb1c6ff9ad2e3a"
            ]
        ]
    },
    {
        "id": "b42a1410f56d726a",
        "type": "get-ai-value",
        "z": "e9378293b40785cc",
        "name": "AI 6717 Read",
        "x": 500,
        "y": 500,
        "wires": [
            [
                "70ba148dcd0318b7"
            ],
            [
                "2ffe8d33e7fbdfea"
            ],
            [
                "c716d21223ec4b04"
            ],
            [
                "cb7ee3c64c3fd6e3"
            ],
            [
                "1f7322f85079d239"
            ],
            [
                "42775e48822c3ff5"
            ],
            [
                "dfa565fb522dba55"
            ],
            [
                "12cf3db6d6aaeefb"
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "70ba148dcd0318b7",
        "type": "range",
        "z": "e9378293b40785cc",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 0 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 320,
        "wires": [
            [
                "b4b038c49713b94a"
            ]
        ]
    },
    {
        "id": "2ffe8d33e7fbdfea",
        "type": "range",
        "z": "e9378293b40785cc",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 1 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 360,
        "wires": [
            [
                "1be450bec0fb58d2"
            ]
        ]
    },
    {
        "id": "c716d21223ec4b04",
        "type": "range",
        "z": "e9378293b40785cc",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 2 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 400,
        "wires": [
            [
                "d2a7a1bafe0931ac"
            ]
        ]
    },
    {
        "id": "cb7ee3c64c3fd6e3",
        "type": "range",
        "z": "e9378293b40785cc",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 3 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 440,
        "wires": [
            [
                "567a5b3d819025aa"
            ]
        ]
    },
    {
        "id": "1f7322f85079d239",
        "type": "range",
        "z": "e9378293b40785cc",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 4 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 480,
        "wires": [
            [
                "69d25f8ed813be9a"
            ]
        ]
    },
    {
        "id": "42775e48822c3ff5",
        "type": "range",
        "z": "e9378293b40785cc",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 5 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 520,
        "wires": [
            [
                "cdb026811905360a"
            ]
        ]
    },
    {
        "id": "dfa565fb522dba55",
        "type": "range",
        "z": "e9378293b40785cc",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 6 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 560,
        "wires": [
            [
                "f8c5afe7cb648655"
            ]
        ]
    },
    {
        "id": "12cf3db6d6aaeefb",
        "type": "range",
        "z": "e9378293b40785cc",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 7 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 600,
        "wires": [
            [
                "5cdeb550ffa8eddf"
            ]
        ]
    },
    {
        "id": "b4b038c49713b94a",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Set Topic AI_0",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 320,
        "wires": [
            [
                "5d7b4191ce07fe45",
                "17165b0e28fb330b"
            ]
        ]
    },
    {
        "id": "1be450bec0fb58d2",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Set Topic AI_1",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 360,
        "wires": [
            [
                "5d7b4191ce07fe45"
            ]
        ]
    },
    {
        "id": "d2a7a1bafe0931ac",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Set Topic AI_2",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 400,
        "wires": [
            [
                "5d7b4191ce07fe45"
            ]
        ]
    },
    {
        "id": "567a5b3d819025aa",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Set Topic AI_3",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 440,
        "wires": [
            [
                "5d7b4191ce07fe45"
            ]
        ]
    },
    {
        "id": "69d25f8ed813be9a",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Set Topic AI_4",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 480,
        "wires": [
            [
                "5d7b4191ce07fe45"
            ]
        ]
    },
    {
        "id": "cdb026811905360a",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Set Topic AI_5",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_5",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 520,
        "wires": [
            [
                "5d7b4191ce07fe45"
            ]
        ]
    },
    {
        "id": "f8c5afe7cb648655",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Set Topic AI_6",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_6",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "5d7b4191ce07fe45"
            ]
        ]
    },
    {
        "id": "5cdeb550ffa8eddf",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Set Topic AI_7",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_7",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 600,
        "wires": [
            [
                "5d7b4191ce07fe45"
            ]
        ]
    },
    {
        "id": "e531123449713d2b",
        "type": "ui_chart",
        "z": "e9378293b40785cc",
        "name": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 8,
        "width": "32",
        "height": "12",
        "label": "AI Каналы 6717 (мВ, масштабированные)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "-2000",
        "ymax": "2000",
        "removeOlder": "30",
        "removeOlderPoints": "100",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#d62728",
            "#9467bd",
            "#8c564b",
            "#e377c2",
            "#7f7f7f",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1310,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "eac38ea743545412",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Get Global Var nh (Step)",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "nh",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 300,
        "wires": [
            [
                "e681d358e038dd78"
            ]
        ]
    },
    {
        "id": "e681d358e038dd78",
        "type": "rbe",
        "z": "e9378293b40785cc",
        "name": "Filter unchanged nh",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "x": 260,
        "y": 420,
        "wires": [
            [
                "b42a1410f56d726a",
                "e690b9b40a246dbb"
            ]
        ]
    },
    {
        "id": "e690b9b40a246dbb",
        "type": "debug",
        "z": "e9378293b40785cc",
        "name": "debug nh (Step)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 500,
        "wires": []
    },
    {
        "id": "5d7b4191ce07fe45",
        "type": "join",
        "z": "e9378293b40785cc",
        "name": "Join AI_0-7",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "0.05",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1300,
        "y": 460,
        "wires": [
            [
                "7d1421a8e9089270",
                "4ead613bc56efeed"
            ]
        ]
    },
    {
        "id": "7d1421a8e9089270",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Сбор данных AI для лога",
        "func": "// Этот узел собирает данные только если включено логирование\nlet isLogging = flow.get('isLogging') || false;\nif (!isLogging) {\n    return null; // Не собираем данные, если логирование выключено\n}\n\nlet loggedData = flow.get('loggedData') || [];\nconst timestamp = new Date().toISOString();\nconst dataPoint = { timestamp: timestamp };\nlet allChannelsValid = true;\n\n// Проверяем, что все 8 каналов пришли и являются числами\nfor (let i = 0; i < 8; i++) {\n    const key = `AI_${i}`;\n    const value = msg.payload[key];\n    if (typeof value === 'number') {\n        dataPoint[key] = value; // Добавляем только числовые значения\n    } else {\n        node.warn(`[LOG_COLLECT] Получены нечисловые данные от ${key}: ${value}, точка не будет записана полностью.`);\n        allChannelsValid = false;\n        break; // Прерываем, если хотя бы один канал невалиден\n    }\n}\n\n// Добавляем точку данных в массив, только если все каналы валидны\nif (allChannelsValid) {\n    loggedData.push(dataPoint);\n    flow.set('loggedData', loggedData);\n}\n\nreturn null; // Этот узел не передает сообщения дальше",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Инициализация переменных при развертывании потока\nflow.set('isLogging', false);       // Флаг активности логирования\nflow.set('loggedData', []);         // Массив для сбора данных\nflow.set('loggingRequested', false); // Флаг запроса на логирование\nflow.set('latestAIReadings', {});  // Последние считанные значения AI (до коэфф/конст)\nnode.log(\"Состояние записи и последние значения АИ инициализированы.\");",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a9b3bf4efaf75f93",
        "type": "link in",
        "z": "e9378293b40785cc",
        "name": "Link In (Завершение Шага)",
        "links": [
            "d655c580310a7aac"
        ],
        "x": 115,
        "y": 700,
        "wires": [
            [
                "f8d9831a3d503625"
            ]
        ]
    },
    {
        "id": "f8d9831a3d503625",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Управление записью лога",
        "func": "let isLogging = flow.get('isLogging') || false;\nlet loggingRequested = flow.get('loggingRequested') || false;\nlet loggedData = flow.get('loggedData') || [];\nlet statusMsg = null; // Сообщение для UI\nlet dataToSave = null; // Данные для сохранения в файл\n\n// Обработка нажатия кнопки \"Начать запись\"\nif (msg.topic === 'start_logging') {\n    if (isLogging) {\n        node.warn(\"Запись уже активна.\");\n        statusMsg = { payload: \"<font color='blue'>Запись уже идет...</font>\" };\n    } else if (loggingRequested) {\n        node.warn(\"Запрос на запись уже отправлен, ожидание шага 5.\");\n        statusMsg = { payload: \"<font color='orange'>Ожидание завершения цикла (Шаг 5)...</font>\" };\n    } else {\n        node.log(\"Запрос на начало записи следующего цикла итерации.\");\n        flow.set('loggingRequested', true);\n        statusMsg = { payload: \"<font color='orange'>Ожидание завершения цикла (Шаг 5)...</font>\" };\n    }\n} \n// Обработка сигнала завершения шага (предполагается, что payload - номер шага)\nelse if (typeof msg.payload === 'number') { \n    const step = msg.payload;\n    // Если был запрос и завершился шаг 5, начинаем запись\n    if (step === 5 && loggingRequested) {\n        node.log(\"Начало записи данных (после Шага 5).\");\n        flow.set('isLogging', true);\n        flow.set('loggingRequested', false);\n        flow.set('loggedData', []); // Очищаем массив перед началом новой записи\n        statusMsg = { payload: \"<font color='blue'>Идет запись...</font>\" };\n    }\n    // Если запись активна и завершился шаг 5, завершаем запись\n    else if (step === 5 && isLogging) {\n        node.log(`Завершение записи после шага ${step}. Собрано точек: ${loggedData.length}`);\n        flow.set('isLogging', false);\n        if (loggedData.length > 0) {\n            dataToSave = { payload: loggedData }; // Передаем собранные данные на выход 1\n            statusMsg = { payload: \"<font color='green'>Запись завершена, файл сохранен.</font>\" };\n        } else {\n            node.warn(\"Запись завершена, но данные не были собраны.\");\n            statusMsg = { payload: \"<font color='orange'>Запись завершена, но данных нет.</font>\" };\n        }\n        flow.set('loggedData', []); // Очищаем массив после завершения\n    }\n} else {\n    // Игнорируем другие сообщения\n    node.warn(`[LOG_CONTROL] Получено неожиданное сообщение: ${JSON.stringify(msg)}`);\n    return [null, null];\n}\n\n// Выход 1: данные для сохранения (или null)\n// Выход 2: сообщение статуса для UI (или null)\nreturn [dataToSave, statusMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 700,
        "wires": [
            [
                "a70f7470bb659169"
            ],
            [
                "4c26373ffd1cb92d"
            ]
        ]
    },
    {
        "id": "ebab7e9ea29a02d4",
        "type": "ui_button",
        "z": "e9378293b40785cc",
        "name": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Начать запись цикла",
        "tooltip": "Записать данные AI_0-7 за один полный цикл итерации (начиная после следующего завершения шага 5) в файл",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "play_arrow",
        "payload": "true",
        "payloadType": "bool",
        "topic": "start_logging",
        "topicType": "str",
        "x": 140,
        "y": 760,
        "wires": [
            [
                "f8d9831a3d503625"
            ]
        ]
    },
    {
        "id": "4c26373ffd1cb92d",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "b5ad3d26d2dec3f7",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Статус записи:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 620,
        "y": 760,
        "wires": []
    },
    {
        "id": "a70f7470bb659169",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Формат CSV (8 каналов)",
        "func": "const data = msg.payload;\n// Проверка, что пришли данные и это массив\nif (!Array.isArray(data) || data.length === 0) {\n    node.warn(\"Нет данных для форматирования в CSV.\");\n    return null; // Не продолжаем, если данных нет\n}\n\n// Заголовок CSV файла\nconst header = \"timestamp,AI_0,AI_1,AI_2,AI_3,AI_4,AI_5,AI_6,AI_7\";\n\n// Формирование строк CSV\nconst rows = data.map(row => {\n    const ts = row.timestamp || ''; // Временная метка\n    const values = [];\n    // Проходим по всем 8 каналам\n    for (let i = 0; i < 8; i++) {\n        const key = `AI_${i}`;\n        // Проверяем, что значение существует и является числом\n        const value = (typeof row[key] === 'number') ? row[key] : ''; // Пустая строка, если нет данных\n        values.push(value);\n    }\n    // Собираем строку: timestamp,val0,val1,...,val7\n    return `${ts},${values.join(',')}`;\n});\n\n// Собираем итоговую CSV строку\nconst csvString = header + \"\\n\" + rows.join(\"\\n\");\n\n// Помещаем CSV строку в payload для следующего узла\nmsg.payload = csvString;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 700,
        "wires": [
            [
                "bf4469b125f403c8"
            ]
        ]
    },
    {
        "id": "bf4469b125f403c8",
        "type": "file",
        "z": "e9378293b40785cc",
        "name": "Запись лога в CSV",
        "filename": "/home/root/.node-red/save/ai_log.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 970,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "4ead613bc56efeed",
        "type": "change",
        "z": "e9378293b40785cc",
        "name": "Store Latest AI Readings (Raw)",
        "rules": [
            {
                "t": "set",
                "p": "latestAIReadings",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "7bc4cc8f5be3f660",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "9348979b18aad42e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 60,
        "wires": []
    },
    {
        "id": "65b7c7ef01a9d481",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "9348979b18aad42e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 100,
        "wires": []
    },
    {
        "id": "79beb1bf3878d7e4",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "9348979b18aad42e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 140,
        "wires": []
    },
    {
        "id": "51acaed9ab390135",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "9348979b18aad42e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 180,
        "wires": []
    },
    {
        "id": "f0fcc92b6004936f",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "9348979b18aad42e",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 220,
        "wires": []
    },
    {
        "id": "f8f6d2f91b49e7a6",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "1c9c669cfa71380c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 260,
        "wires": []
    },
    {
        "id": "d504a7a089b2a433",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "1c9c669cfa71380c",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 300,
        "wires": []
    },
    {
        "id": "d68279ab9a284d98",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "1c9c669cfa71380c",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 340,
        "wires": []
    },
    {
        "id": "5da2fbb8e3fbef51",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "1c9c669cfa71380c",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 380,
        "wires": []
    },
    {
        "id": "36118bf23eb5f623",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "1c9c669cfa71380c",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 420,
        "wires": []
    },
    {
        "id": "b1339588124557a3",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "78478d37299df3f2",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 460,
        "wires": []
    },
    {
        "id": "c404e2a827e5fa0a",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "78478d37299df3f2",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 500,
        "wires": []
    },
    {
        "id": "b12f7b928cb2d25b",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "78478d37299df3f2",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 540,
        "wires": []
    },
    {
        "id": "9345e475964458b5",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "78478d37299df3f2",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 580,
        "wires": []
    },
    {
        "id": "33cedced1db914f7",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "78478d37299df3f2",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 620,
        "wires": []
    },
    {
        "id": "4fc38743267c3c7f",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "4ad62ba0c83b740b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 660,
        "wires": []
    },
    {
        "id": "efbd0a953b224d42",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "4ad62ba0c83b740b",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 700,
        "wires": []
    },
    {
        "id": "55042c0dbddd5d07",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "4ad62ba0c83b740b",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 740,
        "wires": []
    },
    {
        "id": "9348033dc5b7c5ce",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "4ad62ba0c83b740b",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 780,
        "wires": []
    },
    {
        "id": "d31ace69d95a60ed",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "4ad62ba0c83b740b",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 820,
        "wires": []
    },
    {
        "id": "1deb4e9010b12a17",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "9eaeaa2ca534b09b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 860,
        "wires": []
    },
    {
        "id": "797cddd617633e6a",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "9eaeaa2ca534b09b",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 900,
        "wires": []
    },
    {
        "id": "a02e125fb7608369",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "9eaeaa2ca534b09b",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 940,
        "wires": []
    },
    {
        "id": "465858c2d4a4fcea",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "9eaeaa2ca534b09b",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 980,
        "wires": []
    },
    {
        "id": "39485e53d2d5c02f",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "9eaeaa2ca534b09b",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5159b557380a79f3",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "d513ea3bdc3c943e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1060,
        "wires": []
    },
    {
        "id": "9ca5f4da2facbe98",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "d513ea3bdc3c943e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1100,
        "wires": []
    },
    {
        "id": "4e4894a268a3d1c1",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "d513ea3bdc3c943e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1140,
        "wires": []
    },
    {
        "id": "c20528069522e77a",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "d513ea3bdc3c943e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1180,
        "wires": []
    },
    {
        "id": "5e0957a21d651383",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "d513ea3bdc3c943e",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1220,
        "wires": []
    },
    {
        "id": "15890f519c10ce93",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "1c524b55f70bd43f",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1260,
        "wires": []
    },
    {
        "id": "df5af1467054afb8",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "1c524b55f70bd43f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1300,
        "wires": []
    },
    {
        "id": "c6da360e1a16bd73",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "1c524b55f70bd43f",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1340,
        "wires": []
    },
    {
        "id": "451ae435e97ee191",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "1c524b55f70bd43f",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1380,
        "wires": []
    },
    {
        "id": "e5acc44983b0f11b",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "1c524b55f70bd43f",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1420,
        "wires": []
    },
    {
        "id": "cb5cf60d37bbadfe",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "0f43dd3488f8235e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1460,
        "wires": []
    },
    {
        "id": "1cdae3aeff9a02aa",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "0f43dd3488f8235e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1500,
        "wires": []
    },
    {
        "id": "84a37a8377a893b9",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "0f43dd3488f8235e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1540,
        "wires": []
    },
    {
        "id": "3cd4364ad9820377",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "0f43dd3488f8235e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1580,
        "wires": []
    },
    {
        "id": "1dd4e5704ad63b10",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "0f43dd3488f8235e",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1620,
        "wires": []
    },
    {
        "id": "e440836aad74ded4",
        "type": "link in",
        "z": "e9378293b40785cc",
        "name": "Link In (Начало Шага)",
        "links": [
            "e11d518fa54c3c84"
        ],
        "x": 115,
        "y": 860,
        "wires": [
            [
                "e71cf597dd45bcf4"
            ]
        ]
    },
    {
        "id": "e71cf597dd45bcf4",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Сохранить AI пред. шага (с коэф/конст) и обновить UI",
        "func": "// Получаем номер НАЧИНАЮЩЕГОСЯ шага\nconst startingStep = msg.payload;\nif (typeof startingStep !== 'number' || startingStep < 1 || startingStep > 5) {\n    node.warn(`[AI_SAVE] Получено некорректное сообщение для начала шага: ${JSON.stringify(msg.payload)}`);\n    return null; // Игнорируем некорректные сообщения\n}\n\n// Определяем номер ПРЕДЫДУЩЕГО шага, данные которого мы сохраняем\nlet previousStep;\nif (startingStep === 1) {\n    previousStep = 5; // После 5-го идет 1-й\n} else {\n    previousStep = startingStep - 1;\n}\n\nnode.log(`[AI_SAVE] Начинается шаг ${startingStep}, сохраняем данные для предыдущего шага ${previousStep}`);\n\n// Получаем последние СЫРЫЕ (масштабированные) значения AI из переменной потока\nconst latestAI = flow.get('latestAIReadings');\n\n// Массив для хранения сообщений, которые будут отправлены на UI элементы\n// 40 выходов: 8 каналов * 5 шагов\nlet uiUpdateMessages = new Array(40).fill(null);\n\n// Проверяем, есть ли данные для сохранения\nif (latestAI && typeof latestAI === 'object' && Object.keys(latestAI).length > 0) {\n    node.log(`[AI_SAVE] Получены последние значения AI: ${JSON.stringify(latestAI)}`);\n    \n    // Обрабатываем каждый из 8 каналов\n    for (let i = 0; i < 8; i++) {\n        const aiChannelKey = `AI_${i}`; // Ключ в объекте latestAI (e.g., 'AI_0')\n        const globalVarKey = `ai${i + 1}h${previousStep}`; // Ключ для глобальной переменной (e.g., 'ai1h5')\n        const koefKey = `koef${i}`; // Ключ для коэффициента (e.g., 'koef0')\n        const konstKey = `konst${i}`; // Ключ для константы (e.g., 'konst0')\n        \n        const rawValue = latestAI[aiChannelKey]; // Получаем сырое значение\n        \n        // Определяем индекс выхода для UI элемента\n        // Выходы 0-4 для AI_0 (шаги 1-5), 5-9 для AI_1 (шаги 1-5), и т.д.\n        const uiOutputIndex = i * 5 + (previousStep - 1); \n\n        // Проверяем, что сырое значение - число\n        if (typeof rawValue === 'number') {\n            // Получаем коэффициент и константу из глобального контекста\n            // Используем значения по умолчанию (1 и 0), если они не найдены\n            const koef = global.get(koefKey) ?? 1;\n            const konst = global.get(konstKey) ?? 0;\n            \n            // Применяем преобразование\n            const transformedValue = rawValue * koef + konst;\n            \n            // Сохраняем преобразованное значение в глобальную переменную\n            global.set(globalVarKey, transformedValue);\n            node.log(`[AI_SAVE] Шаг ${previousStep}, Канал ${aiChannelKey}: Сохранено global.${globalVarKey} = ${transformedValue.toFixed(3)} (Raw: ${rawValue}, Koef: ${koef}, Konst: ${konst}). Индекс UI: ${uiOutputIndex}`);\n\n            // Готовим сообщение для обновления UI (с форматированием до 2 знаков)\n            if (uiOutputIndex >= 0 && uiOutputIndex < 40) {\n                 uiUpdateMessages[uiOutputIndex] = { payload: transformedValue.toFixed(2) };\n            } else {\n                 node.warn(`[AI_SAVE] Ошибка: Неверный индекс UI ${uiOutputIndex} для global.${globalVarKey}`);\n            }\n        } else {\n            // Если сырое значение не число, сохраняем null и 'N/A' в UI\n            global.set(globalVarKey, null); \n            if (uiOutputIndex >= 0 && uiOutputIndex < 40) {\n                uiUpdateMessages[uiOutputIndex] = { payload: \"N/A\" }; \n            }\n            node.warn(`[AI_SAVE] Нет числовых данных для ${aiChannelKey} при сохранении шага ${previousStep}. Индекс UI: ${uiOutputIndex}`);\n        }\n    }\n} else {\n    // Если нет последних данных AI, выводим предупреждение и 'N/A' во все поля UI для этого шага\n    node.warn(`[AI_SAVE] Не удалось получить последние значения AI ('flow.latestAIReadings' пуст или не объект) для сохранения шага ${previousStep}`);\n     for (let i = 0; i < 8; i++) {\n         let uiOutputIndex = i * 5 + (previousStep - 1);\n         if (uiOutputIndex >= 0 && uiOutputIndex < 40) {\n             uiUpdateMessages[uiOutputIndex] = { payload: \"N/A\" }; \n         }\n     }\n}\n\n// Возвращаем массив сообщений для обновления UI\n// Каждый элемент массива соответствует одному выходу узла\nreturn uiUpdateMessages;",
        "outputs": 40,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 720,
        "wires": [
            [
                "7bc4cc8f5be3f660"
            ],
            [
                "65b7c7ef01a9d481"
            ],
            [
                "79beb1bf3878d7e4"
            ],
            [
                "51acaed9ab390135"
            ],
            [
                "f0fcc92b6004936f"
            ],
            [
                "f8f6d2f91b49e7a6"
            ],
            [
                "d504a7a089b2a433"
            ],
            [
                "d68279ab9a284d98"
            ],
            [
                "5da2fbb8e3fbef51"
            ],
            [
                "36118bf23eb5f623"
            ],
            [
                "b1339588124557a3"
            ],
            [
                "c404e2a827e5fa0a"
            ],
            [
                "b12f7b928cb2d25b"
            ],
            [
                "9345e475964458b5"
            ],
            [
                "33cedced1db914f7"
            ],
            [
                "4fc38743267c3c7f"
            ],
            [
                "efbd0a953b224d42"
            ],
            [
                "55042c0dbddd5d07"
            ],
            [
                "9348033dc5b7c5ce"
            ],
            [
                "d31ace69d95a60ed"
            ],
            [
                "1deb4e9010b12a17"
            ],
            [
                "797cddd617633e6a"
            ],
            [
                "a02e125fb7608369"
            ],
            [
                "465858c2d4a4fcea"
            ],
            [
                "39485e53d2d5c02f"
            ],
            [
                "5159b557380a79f3"
            ],
            [
                "9ca5f4da2facbe98"
            ],
            [
                "4e4894a268a3d1c1"
            ],
            [
                "c20528069522e77a"
            ],
            [
                "5e0957a21d651383"
            ],
            [
                "15890f519c10ce93"
            ],
            [
                "df5af1467054afb8"
            ],
            [
                "c6da360e1a16bd73"
            ],
            [
                "451ae435e97ee191"
            ],
            [
                "e5acc44983b0f11b"
            ],
            [
                "cb5cf60d37bbadfe"
            ],
            [
                "1cdae3aeff9a02aa"
            ],
            [
                "84a37a8377a893b9"
            ],
            [
                "3cd4364ad9820377"
            ],
            [
                "1dd4e5704ad63b10"
            ]
        ]
    },
    {
        "id": "17165b0e28fb330b",
        "type": "rbe",
        "z": "e9378293b40785cc",
        "name": "Filter unchanged AI_0",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 1260,
        "y": 320,
        "wires": [
            [
                "4fcb1c6ff9ad2e3a"
            ]
        ]
    },
    {
        "id": "87209507d1fa78a6",
        "type": "inject",
        "z": "e9378293b40785cc",
        "name": "Версия: инициализация",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "version",
        "payload": "011120251115",
        "payloadType": "str",
        "x": 160,
        "y": 40,
        "wires": [
            [
                "c8d8c3d57f38fd5e"
            ]
        ]
    },
    {
        "id": "c8d8c3d57f38fd5e",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Сформировать строку версии",
        "func": "const VERSION_PATTERN = /^\\d{12}$/;\nconst READABLE_PATTERN = /^\\d{4}-\\d{2}-\\d{2}_\\d{4}$/;\nconst FILE_NAME_PATTERN_ISO = /^flows_[A-Za-z0-9_-]+_ver_(\\d{4}-\\d{2}-\\d{2})_(\\d{12})$/;\nconst FILE_NAME_PATTERN_SHORT = /^flows_[A-Za-z0-9_-]+_ver_(\\d{4}-\\d{2}-\\d{2})_(\\d{4})$/;\nconst FILE_NAME_PATTERN_COMPACT = /^flows_[A-Za-z0-9_-]+_ver_(\\d{12})$/;\nconst DEFAULT_VERSION = '011120251115';\n\nconst fromReadable = (value) => {\n    const [datePart, buildPart] = value.split('_');\n    const [year, month, day] = datePart.split('-');\n    return `${day}${month}${year}${buildPart.slice(-4)}`;\n};\n\nconst fromFileName = (value) => {\n    if (typeof value !== 'string' || !value.length) {\n        return null;\n    }\n    const trimmed = value.endsWith('.json') ? value.slice(0, -5) : value;\n    const isoMatch = trimmed.match(FILE_NAME_PATTERN_ISO);\n    if (isoMatch) {\n        const [, datePart, buildPart] = isoMatch;\n        const [year, month, day] = datePart.split('-');\n        return `${day}${month}${year}${buildPart.slice(-4)}`;\n    }\n    const shortMatch = trimmed.match(FILE_NAME_PATTERN_SHORT);\n    if (shortMatch) {\n        const [, datePart, buildPart] = shortMatch;\n        const [year, month, day] = datePart.split('-');\n        return `${day}${month}${year}${buildPart.slice(-4)}`;\n    }\n    const compactMatch = trimmed.match(FILE_NAME_PATTERN_COMPACT);\n    if (compactMatch) {\n        return compactMatch[1];\n    }\n    return null;\n};\n\nconst toVersionString = (value) => {\n    if (typeof value === 'string') {\n        const trimmed = value.trim();\n        if (!trimmed.length) {\n            return DEFAULT_VERSION;\n        }\n        if (VERSION_PATTERN.test(trimmed)) {\n            return trimmed;\n        }\n        if (READABLE_PATTERN.test(trimmed)) {\n            return fromReadable(trimmed);\n        }\n        const fileNameVersion = fromFileName(trimmed);\n        if (fileNameVersion) {\n            return fileNameVersion;\n        }\n    } else if (typeof value === 'number' && Number.isFinite(value)) {\n        const asString = Math.trunc(value).toString();\n        if (VERSION_PATTERN.test(asString)) {\n            return asString;\n        }\n    }\n    return DEFAULT_VERSION;\n};\n\nmsg.payload = toVersionString(msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 40,
        "wires": [
            [
                "f72d4cf75a9a463b"
            ]
        ]
    },
    {
        "id": "f72d4cf75a9a463b",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Сохранить версию в контексте",
        "func": "const VERSION_PATTERN = /^\\d{12}$/;\nconst READABLE_PATTERN = /^\\d{4}-\\d{2}-\\d{2}_\\d{4}$/;\nconst FILE_NAME_PATTERN_READABLE = /^flows_[A-Za-z0-9_-]+_ver_(\\d{4}-\\d{2}-\\d{2})_(\\d{12})$/;\nconst FILE_NAME_PATTERN_SHORT = /^flows_[A-Za-z0-9_-]+_ver_(\\d{4}-\\d{2}-\\d{2})_(\\d{4})$/;\nconst FILE_NAME_PATTERN_COMPACT = /^flows_[A-Za-z0-9_-]+_ver_(\\d{12})$/;\nconst DEFAULT_VERSION = '011120251115';\nconst PROJECT_SLUG = 'AO6224_AI6717';\n\nconst fromReadable = (value) => {\n    const [datePart, buildPart] = value.split('_');\n    const [year, month, day] = datePart.split('-');\n    return `${day}${month}${year}${buildPart.slice(-4)}`;\n};\n\nconst versionFromFileName = (value) => {\n    if (typeof value !== 'string' || !value.length) {\n        return null;\n    }\n    const candidate = value.endsWith('.json') ? value.slice(0, -5) : value;\n    if (VERSION_PATTERN.test(candidate)) {\n        return candidate;\n    }\n    if (READABLE_PATTERN.test(candidate)) {\n        return fromReadable(candidate);\n    }\n    const readableMatch = candidate.match(FILE_NAME_PATTERN_READABLE);\n    if (readableMatch) {\n        const [, datePart, buildPart] = readableMatch;\n        const [year, month, day] = datePart.split('-');\n        return `${day}${month}${year}${buildPart.slice(-4)}`;\n    }\n    const compactMatch = candidate.match(FILE_NAME_PATTERN_COMPACT);\n    if (compactMatch) {\n        return compactMatch[1];\n    }\n    return null;\n};\n\nconst toVersionString = (value) => {\n    if (typeof value === 'string') {\n        const trimmed = value.trim();\n        if (!trimmed.length) {\n            return DEFAULT_VERSION;\n        }\n        if (VERSION_PATTERN.test(trimmed)) {\n            return trimmed;\n        }\n        if (READABLE_PATTERN.test(trimmed)) {\n            return fromReadable(trimmed);\n        }\n        const fromFile = versionFromFileName(trimmed);\n        if (fromFile) {\n            return fromFile;\n        }\n    }\n    if (typeof value === 'number' && Number.isFinite(value)) {\n        const asString = Math.trunc(value).toString();\n        if (VERSION_PATTERN.test(asString)) {\n            return asString;\n        }\n    }\n    return DEFAULT_VERSION;\n};\n\nconst toReadableVersion = (value) => {\n    if (VERSION_PATTERN.test(value)) {\n        const day = value.slice(0, 2);\n        const month = value.slice(2, 4);\n        const year = value.slice(4, 8);\n        const build = value.slice(8);\n        return `${year}-${month}-${day}_${build}`;\n    }\n    if (READABLE_PATTERN.test(value)) {\n        return value;\n    }\n    const fromFile = versionFromFileName(value);\n    if (fromFile) {\n        return toReadableVersion(fromFile);\n    }\n    return '1970-01-01_0000';\n};\n\nconst normalizeStoredVersion = (value) => {\n    if (typeof value === 'number' && Number.isFinite(value)) {\n        return toVersionString(String(Math.trunc(value)));\n    }\n    if (typeof value === 'string' && value.length) {\n        if (VERSION_PATTERN.test(value)) {\n            return value;\n        }\n        if (READABLE_PATTERN.test(value)) {\n            return fromReadable(value);\n        }\n        const fromFile = versionFromFileName(value);\n        if (fromFile) {\n            return fromFile;\n        }\n    }\n    return null;\n};\n\nlet version = toVersionString(msg.payload);\n\nif (!VERSION_PATTERN.test(version)) {\n    const fallback = normalizeStoredVersion(flow.get('versionRaw'))\n        || normalizeStoredVersion(flow.get('version'))\n        || normalizeStoredVersion(global.get('currentVersion'))\n        || versionFromFileName(flow.get('flowFileName'))\n        || versionFromFileName(global.get('flowFileName'))\n        || DEFAULT_VERSION;\n    version = fallback;\n    msg.payload = version;\n}\n\nconst versionNumber = Number(version);\nconst readableVersion = toReadableVersion(version);\nconst flowFileName = (() => {\n    const datePart = `${version.slice(4, 8)}-${version.slice(2, 4)}-${version.slice(0, 2)}`;\n    return `flows_${PROJECT_SLUG}_ver_${datePart}_${version}.json`;\n})();\n\nif (Number.isFinite(versionNumber)) {\n    if (global.get('VER') !== versionNumber) {\n        global.set('VER', versionNumber);\n    }\n} else {\n    node.warn(`Невозможно преобразовать версию \"${version}\" в число. Значение VER не обновлено.`);\n}\n\nif (flow.get('versionRaw') !== version) {\n    flow.set('versionRaw', version);\n}\n\nif (flow.get('version') !== readableVersion) {\n    flow.set('version', readableVersion);\n}\n\nif (flow.get('flowFileName') !== flowFileName) {\n    flow.set('flowFileName', flowFileName);\n}\n\nif (global.get('currentVersion') !== version) {\n    global.set('currentVersion', version);\n}\n\nif (global.get('flowFileName') !== flowFileName) {\n    global.set('flowFileName', flowFileName);\n}\n\nconst uiStateMeta = global.get('uiState_meta') || {};\nlet metaChanged = false;\n\nif (uiStateMeta.version !== version) {\n    uiStateMeta.version = version;\n    metaChanged = true;\n}\n\nif (uiStateMeta.versionNumber !== versionNumber && Number.isFinite(versionNumber)) {\n    uiStateMeta.versionNumber = versionNumber;\n    metaChanged = true;\n}\n\nif (uiStateMeta.fileName !== flowFileName) {\n    uiStateMeta.fileName = flowFileName;\n    metaChanged = true;\n}\n\nif (uiStateMeta.readableVersion !== readableVersion) {\n    uiStateMeta.readableVersion = readableVersion;\n    metaChanged = true;\n}\n\nif (metaChanged) {\n    global.set('uiState_meta', uiStateMeta);\n}\n\nmsg.versionNumber = Number.isFinite(versionNumber) ? versionNumber : null;\nmsg.filename = flowFileName;\nmsg.projectVersion = version;\nmsg.readableVersion = readableVersion;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 40,
        "wires": [
            [
                "3769b7bf587b57b8",
                "74b9d3db5e0c0f02"
            ]
        ]
    },
    {
        "id": "3769b7bf587b57b8",
        "type": "ui_text",
        "z": "e9378293b40785cc",
        "group": "b5ad3d26d2dec3f7",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "Version",
        "label": "Version",
        "format": "Текущая версия: {{msg.payload}}.",
        "layout": "row-left",
        "className": "",
        "style": "",
        "font": "",
        "fontSize": "",
        "color": "",
        "x": 700,
        "y": 40,
        "wires": []
    },
    {
        "id": "74b9d3db5e0c0f02",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Сформировать историю изменений",
        "func": "const VERSION_PATTERN = /^(\\d{2})(\\d{2})(\\d{4})(\\d{2})(\\d{2})$/;\nconst currentVersion = msg.payload;\nlet parsedDate = '';\nlet parsedTime = '';\n\nif (typeof currentVersion === 'string') {\n    const match = currentVersion.match(VERSION_PATTERN);\n    if (match) {\n        const [, day, month, year, hour, minute] = match;\n        parsedDate = `${year}-${month}-${day}`;\n        parsedTime = `${hour}:${minute}`;\n    }\n}\n\nconst formattedDate = parsedTime ? `${parsedDate} ${parsedTime}` : parsedDate || '2025-11-01';\n\nconst history = [\n    {\n        version: currentVersion,\n        date: formattedDate,\n        changes: [\n            'Обновлена команда открытия вкладок: ui_control.tab теперь принимает строку ID вместо объекта.',\n            'Синхронизировано имя файла экспорта с новой версией flows_AO6224_AI6717_ver_2025-11-01_011120251115.json.'\n        ]\n    },\n\n    {\n        version: '011120251100',\n        date: '2025-11-01 11:00',\n        changes: [\n            'Автозапуск итерации без ожидания подключения Dashboard.',\n            'Меню «Перейти к вкладке» раскрывает скрытые вкладки и активирует выбранную.',\n            'Обновлена версия проекта и имя файла экспорта на flows_AO6224_AI6717_ver_2025-11-01_011120251100.json.'\n        ]\n    },\n\n    {\n        version: '011120251000',\n        date: '2025-11-01 10:00',\n        changes: [\n            'Скрыта автозагрузка всех вторичных вкладок; добавлено меню навигации через Dashboard.',\n            'Графики pH, Redox, AO LC и ПИД загружаются по требованию через переключатели и flow-контекст.',\n            'Запуск Modbus-пулов и архиваторов перенесён до готовности UI; обновлён опрос глобальных переменных до 100 мс.',\n            'Отключена пересборка UI при деплое; обновлён формат имени файла экспорта на flows_AO6224_AI6717_ver_2025-11-01_011120251000.json.'\n        ]\n    },\n\n    {\n        version: '311020251659',\n        date: '2025-10-31 16:59',\n        changes: [\n            'Добавлены переключатели для отображения графиков \"AI Каналы 6717 (мВ, масштабированные)\" и \"График и Управление Итерацией\".',\n            'Отображение обоих графиков по умолчанию отключено.',\n            'Обновлена версия проекта и имя файла экспорта на 311020251659.'\n        ]\n    },\n    {\n        version: '311020251510',\n        date: '2025-10-31 15:10',\n        changes: [\n            'Увеличена ширина графика \"График и Управление Итерацией\" до 32 плиток для унификации с графиком AI.',\n            'Обновлена версия проекта и имя файла экспорта на 311020251510.',\n            'Актуализирован перечень изменений на главном экране.'\n        ]\n    },\n    {\n        version: '311020251448',\n        date: '2025-10-31 14:48',\n        changes: [\n            'Приведён график \"График и Управление Итерацией\" к размеру графика \"AI Каналы 6717 (мВ, масштабированные)\".',\n            'Обновлена версия проекта и имя файла экспорта на 311020251448.',\n            'Актуализирован перечень изменений на главном экране.'\n        ]\n    },\n    {\n        version: '311020251433',\n        date: '2025-10-31 14:33',\n        changes: [\n            'Добавлены на вкладку Home элементы с текущими датой, временем и днём недели.',\n            'Реализовано ежесекундное обновление отображения даты и времени.',\n            'Обновлена версия проекта и имя файла экспорта на 311020251433.',\n            'Актуализирован перечень изменений на главном экране.'\n        ]\n    },\n    {\n        version: '231020251107',\n        date: '2025-10-23',\n        changes: [\n            'Зафиксирован формат имени файла и версии DDMMYYYYHHmm (пример: 231020251107).',\n            'Главная панель Dashboard отображает строку \"Текущая версия: 231020251107.\" и синхронизрована с глобальной переменной VER.'\n        ]\n    },\n    {\n        version: '231020251001',\n        date: '2025-10-23',\n        changes: [\n            'Обновлён формат версии на DDMMYYYYHHmm и синхронизировано имя файла проекта.',\n            'Добавлена глобальная переменная VER и экспорт версии в Modbus для отображения на панели оператора.'\n        ]\n    },\n    {\n        version: '2025-10-23_1',\n        date: '2025-10-23',\n        changes: [\n            'Добавлен дашборд \"История версий\" с отображением актуальной версии и списка изменений.',\n            'Обновлён механизм сохранения версии в контекст (flow.version и global.currentVersion) с форматом YYYY-MM-DD_build.'\n        ]\n    },\n    {\n        version: '2025-10-22_1',\n        date: '2025-10-22',\n        changes: [\n            'Базовая конфигурация проекта.'\n        ]\n    }\n];\n\nmsg.history = history;\nmsg.currentVersion = currentVersion;\nconst parsedNumber = Number(currentVersion);\nif (!Number.isFinite(msg.versionNumber)) {\n    msg.versionNumber = Number.isFinite(parsedNumber) ? parsedNumber : null;\n}\nlet readableVersion = msg.readableVersion;\nif (!readableVersion) {\n    if (VERSION_PATTERN.test(currentVersion)) {\n        const [, day, month, year, hour, minute] = currentVersion.match(VERSION_PATTERN);\n        readableVersion = `${year}-${month}-${day}_${hour}${minute}`;\n    } else if (typeof currentVersion === 'string') {\n        readableVersion = currentVersion;\n    }\n    if (readableVersion) {\n        msg.readableVersion = readableVersion;\n    }\n}\nif (!msg.filename && typeof currentVersion === 'string') {\n    msg.filename = 'flows_AO6224_AI6717_ver_2025-11-01_011120251115.json';\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "c1f5f2f34e24a819"
            ]
        ]
    },
    {
        "id": "c1f5f2f34e24a819",
        "type": "ui_template",
        "z": "e9378293b40785cc",
        "group": "e9abdc54dcb621b3",
        "name": "История версий",
        "order": 1,
        "width": "12",
        "height": "0",
        "format": "<div class=\"version-history\">\n  <style>\n    .version-history h3 {\n      margin: 0 0 12px;\n    }\n    .version-history p {\n      margin: 0 0 16px;\n    }\n    .version-history .version-entry {\n      margin-bottom: 18px;\n      padding-bottom: 12px;\n      border-bottom: 1px solid #ccc;\n    }\n    .version-history .version-entry:last-child {\n      border-bottom: none;\n    }\n    .version-history .version-entry h4 {\n      margin: 0 0 8px;\n    }\n    .version-history .version-entry ul {\n      margin: 0 0 0 20px;\n      padding: 0;\n    }\n  </style>\n  <h3>История версий</h3>\n  <p><strong>Текущая версия:</strong> {{msg.currentVersion}}.</p>\n  <div class=\"version-entry\" ng-repeat=\"entry in msg.history\">\n    <h4>{{entry.version}}<span ng-if=\"entry.date\"> ({{entry.date}})</span></h4>\n    <ul>\n      <li ng-repeat=\"item in entry.changes track by $index\">{{item}}</li>\n    </ul>\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "65f142e582cabe94",
        "type": "inject",
        "z": "394376f74e1d5d6d",
        "name": "При старте потока  1.5c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1.5",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "efa3339bb84c65ff"
            ]
        ]
    },
    {
        "id": "0f58740bdde9faeb",
        "type": "link in",
        "z": "394376f74e1d5d6d",
        "name": "link in: trigger-read-ph",
        "links": [
            "b0e196ae0e220823",
            "026db46d70a413ce"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "efa3339bb84c65ff"
            ]
        ]
    },
    {
        "id": "efa3339bb84c65ff",
        "type": "file in",
        "z": "394376f74e1d5d6d",
        "name": "Прочитать файл переменных PH",
        "filename": "/home/root/.node-red/save/ph_calc_variables.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "7c552e027c26e045"
            ]
        ]
    },
    {
        "id": "d3581cd03b823746",
        "type": "catch",
        "z": "394376f74e1d5d6d",
        "name": "Перехват ошибки чтения файла",
        "scope": [
            "efa3339bb84c65ff"
        ],
        "uncaught": false,
        "x": 430,
        "y": 280,
        "wires": [
            [
                "c74e6804b26ebaae"
            ]
        ]
    },
    {
        "id": "7c552e027c26e045",
        "type": "json",
        "z": "394376f74e1d5d6d",
        "name": "Разобрать JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 140,
        "wires": [
            [
                "c74e6804b26ebaae"
            ]
        ]
    },
    {
        "id": "c74e6804b26ebaae",
        "type": "function",
        "z": "394376f74e1d5d6d",
        "name": "Init/Read State & Globals (PH)",
        "func": "const defaultVars = {\n    ai2t1h1: 0.000,\n    ai2t2h2: 0.000,\n    ai2t1h1koef1: 0.100,\n    ai2t2h2koef2: 0.100,\n    ai2t1h1konst1: 0.000,\n    ai2t2h2konst2: 0.000,\n    ai2t1t2h1h2: 0.000,\n    ai2t1t2h1h2koef: 0.100,\n    ai2t1t2h1h2konst: 0.000,\n    camm: 0.000,\n    ckisl: 0.000,\n    cammkisl: 0.000,\n    cammkisl_smus: null,\n    ph: 7.000,\n    phkonstamm: 0.500,\n    phkonstkisl: 0.500,\n    phneitr: 7.000,\n    phminkisl: 1.000,\n    phminamm: 1.000,\n    window_smus: 10 \n};\n\nconst savableVars = [\n    'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm',\n    'window_smus' \n];\n\nconst nonSavableVars = [\n    'ai2t1h1', 'ai2t2h2', 'ai2t1t2h1h2', 'camm', 'ckisl', 'cammkisl', 'ph', 'cammkisl_smus'\n];\n\nlet currentGlobalState = {};\nlet source = msg.topic === 'init' ? '[INIT_PH]' : '[READ_BTN_PH]';\n\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && savableVars.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    node.warn(source + \" Данные для сохраняемых переменных PH загружены из файла.\");\n    for (const key of savableVars) {\n        currentGlobalState[key] = msg.payload[key];\n    }\n    for (const key of nonSavableVars) {\n        currentGlobalState[key] = defaultVars[key];\n    }\n} else {\n    currentGlobalState = { ...defaultVars };\n    if (msg.error) {\n        node.warn(source + \" Ошибка чтения файла переменных PH: \" + msg.error.message + \". Используются значения по умолчанию для всех переменных.\");\n    } else if (msg.topic !== 'init') {\n         node.warn(source + \" Файл переменных PH не найден/поврежден/неполный. Используются значения по умолчанию для всех переменных.\");\n    } else {\n        node.log(source + \" Файл переменных PH не найден. Используются значения по умолчанию для всех переменных.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key in defaultVars) {\n    let currentVal = currentGlobalState.hasOwnProperty(key) ? currentGlobalState[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n\n    if (isNaN(numValue)) {\n        node.warn(`Invalid number format for ${key}: ${currentVal}. Using default.`);\n        currentVal = defaultVars[key];\n        currentGlobalState[key] = currentVal;\n    } else {\n         currentVal = numValue;\n    }\n\n    \n    if (key === 'ph' || key === 'phneitr') {\n        if (currentVal < 0) currentVal = 0;\n        if (currentVal > 14) currentVal = 14;\n    } else if (key === 'window_smus') {\n        if (currentVal < 1) currentVal = 1;\n        if (currentVal > 1000) currentVal = 1000;\n        currentVal = Math.round(currentVal); \n    } else {\n        \n        if (currentVal < -10000) currentVal = -10000; \n        if (currentVal > 10000) currentVal = 10000;\n    }\n    currentGlobalState[key] = currentVal;\n\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\n\nglobal.set('cammkisl_history', []);\n\nglobal.set('savedState_ph', { ...currentGlobalState }); \nglobal.set('uiState_ph', { ...currentGlobalState });\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные PH установлены/обновлены: \" + JSON.stringify(currentGlobalState));\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные PH уже были установлены.\");\n}\n\nreturn { payload: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            [
                "207f56fa36a2cfaa"
            ]
        ]
    },
    {
        "id": "207f56fa36a2cfaa",
        "type": "link out",
        "z": "394376f74e1d5d6d",
        "name": "link out: trigger-ph-ui-update",
        "mode": "link",
        "links": [
            "75f06ba54fe094f1"
        ],
        "x": 1050,
        "y": 140,
        "wires": []
    },
    {
        "id": "4e6c11e8bc465a42",
        "type": "link in",
        "z": "5bd29ca20083e1c1",
        "name": "link in: trigger-save-ph",
        "links": [
            "563e5988935d27fe",
            "e48a8fe8e05fec86"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "d67e5b265d30c4a2"
            ]
        ]
    },
    {
        "id": "d67e5b265d30c4a2",
        "type": "function",
        "z": "5bd29ca20083e1c1",
        "name": "Apply Globals, Save State & File (PH)",
        "func": "const uiState = global.get('uiState_ph') || {};\nlet savedState = global.get('savedState_ph') || {};\n\nlet globalsChanged = false;\n\n\nconst savableVars = [\n    'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm',\n    'window_smus' \n];\n\nconst stateToSave = {};\n\n\nfor (const key of savableVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : null;\n    \n    const numValue = Number(valueToSet);\n    if (valueToSet === null || isNaN(numValue)){\n         node.warn(`Attempted to set global for ${key} with invalid value: ${valueToSet}. Using last saved value or default.`);\n         \n         const defaultValue = global.get('savedState_ph') ? global.get('savedState_ph')[key] : undefined; \n         valueToSet = defaultValue !== undefined ? defaultValue : 0; \n    } else {\n         valueToSet = numValue;\n        \n        if (key === 'phneitr') {\n            if (valueToSet < 0) valueToSet = 0;\n            if (valueToSet > 14) valueToSet = 14;\n        } else if (key === 'window_smus') { \n            if (valueToSet < 1) valueToSet = 1;\n            if (valueToSet > 1000) valueToSet = 1000;\n            valueToSet = Math.round(valueToSet);\n        } else {\n            if (valueToSet < -1000) valueToSet = -1000;\n            if (valueToSet > 1000) valueToSet = 1000;\n        }\n    }\n    \n    \n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChanged = true;\n    }\n    \n    \n    stateToSave[key] = valueToSet;\n    \n    \n    uiState[key] = valueToSet;\n}\n\n\nlet fullSavedState = global.get('savedState_ph') || {};\nfor(const key of savableVars) {\n    fullSavedState[key] = uiState[key];\n}\n\n\nconst nonSavableVars = [\n    'ai2t1h1', 'ai2t2h2', 'ai2t1t2h1h2', 'camm', 'ckisl', 'cammkisl', 'ph', 'cammkisl_smus'\n];\nfor(const key of nonSavableVars) {\n    fullSavedState[key] = global.get(key);\n}\n\nglobal.set('savedState_ph', fullSavedState);\n\n\nglobal.set('uiState_ph', { ...uiState, ...fullSavedState }); \n\nif (globalsChanged) {\n    node.log(\"[WRITE_BTN_PH] Сохраняемые глобальные переменные PH обновлены из UI.\");\n} else {\n    node.log(\"[WRITE_BTN_PH] Сохраняемые глобальные переменные PH не требовали обновления.\");\n}\nnode.log(\"[WRITE_BTN_PH] global.savedState_ph и global.uiState_ph обновлены.\");\n\n\nconst filePayload = { payload: stateToSave }; \n\n\nconst statusMessage = { payload: \"<font color='green'>Все изменения сохранены</font>\" };\n\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "11fcb170a758212b"
            ],
            [
                "aff8d037de8daed1"
            ]
        ]
    },
    {
        "id": "11fcb170a758212b",
        "type": "json",
        "z": "5bd29ca20083e1c1",
        "name": "Объект в JSON",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "772e712acd5a9d63"
            ]
        ]
    },
    {
        "id": "772e712acd5a9d63",
        "type": "file",
        "z": "5bd29ca20083e1c1",
        "name": "Сохранить файл переменных PH",
        "filename": "/home/root/.node-red/save/ph_calc_variables.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "7e98b8bd6878ea96"
            ]
        ]
    },
    {
        "id": "7e98b8bd6878ea96",
        "type": "ui_toast",
        "z": "5bd29ca20083e1c1",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение PH",
        "name": "Уведомление о сохранении",
        "x": 460,
        "y": 340,
        "wires": []
    },
    {
        "id": "aff8d037de8daed1",
        "type": "link out",
        "z": "5bd29ca20083e1c1",
        "name": "link out: update-ph-status-text",
        "mode": "link",
        "links": [
            "15a7fda76c5d164b"
        ],
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "75f06ba54fe094f1",
        "type": "link in",
        "z": "0adabbe16538e192",
        "name": "link in: trigger-ph-ui-update",
        "links": [
            "207f56fa36a2cfaa",
            "2167545833e4c604"
        ],
        "x": 115,
        "y": 400,
        "wires": [
            [
                "4c394d819a557f1c"
            ]
        ]
    },
    {
        "id": "4c394d819a557f1c",
        "type": "function",
        "z": "0adabbe16538e192",
        "name": "Update UI Elements (PH)",
        "func": "const uiState = global.get('uiState_ph') || {};\nconst savedState = global.get('savedState_ph') || {};\nconst uiMessages = [];\n\n\nconst allVars = [\n    'ai2t1h1', 'ai2t2h2', 'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2', 'ai2t1t2h1h2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'camm', 'ckisl', 'cammkisl', 'cammkisl_smus', \n    'ph',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm',\n    'window_smus' \n];\n\n\nconst savableVars = [\n    'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm',\n    'window_smus'\n];\n\n\nfor (const key of allVars) {\n    const value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : 0;\n    \n    let formattedValue = (typeof value === 'number') ? value.toFixed(3) : 'N/A'; \n    \n    // Corrected formatting for integer values\n    if (['phneitr', 'window_smus'].includes(key) && Number.isInteger(value)) {\n         formattedValue = value.toString();\n    }\n    // Keep 3 decimal places for these specific savable vars\n    if (['phminkisl', 'phminamm', 'phkonstamm', 'phkonstkisl', 'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2', 'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst'].includes(key)){\n         formattedValue = (typeof value === 'number') ? value.toFixed(3) : 'N/A';\n    }    \n    if (key === 'ph') {\n        formattedValue = (typeof value === 'number') ? value.toFixed(3) : 'N/A';\n    }\n    uiMessages.push({ payload: formattedValue, topic: key });\n}\n\n\nlet hasUnsavedChanges = false;\n\nfor (const key of savableVars) {\n    \n    const savedNum = Number(savedState[key]);\n    const uiNum = Number(uiState[key]);\n    \n    // Use toFixed to compare values consistently with how they might be entered/displayed\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(3) : null;\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(3) : null;\n\n    if (savedStr !== uiStr) { \n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\nuiMessages.push({ payload: statusMessage });\n\n\nreturn uiMessages;",
        "outputs": 21,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "3cf9ddb88f52a4db"
            ],
            [
                "0c16fe9c1ccf176f"
            ],
            [
                "03b016125caef15d"
            ],
            [
                "b8e1dd83c924b572"
            ],
            [
                "24457e371ad5cbd8"
            ],
            [
                "79e020397682db31"
            ],
            [
                "1f8dcee9bc99f9bd"
            ],
            [
                "72665740a88f47b2"
            ],
            [
                "ea9b52b371ab7014"
            ],
            [
                "2c8425d289839fa8"
            ],
            [
                "270d95cfde7dc6b6"
            ],
            [
                "89a4769163b5d8ee"
            ],
            [
                "828d43f856faa90b"
            ],
            [
                "4a978da1da9b9f6d"
            ],
            [
                "e21d70b6f58ee2c8"
            ],
            [
                "e47ed5b87c2d5162"
            ],
            [
                "654fd17d6433a242"
            ],
            [
                "bfff6803f3e08951"
            ],
            [
                "56ef6f2cc0b40e35"
            ],
            [
                "e6ef148d0e04ce31"
            ],
            [
                "d9f499ff99a40c37"
            ]
        ]
    },
    {
        "id": "8d59e70408c17da5",
        "type": "function",
        "z": "0adabbe16538e192",
        "name": "Handle UI Input & Update Status (PH)",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\n\nlet uiState = global.get('uiState_ph') || {};\nconst savedState = global.get('savedState_ph') || {};\n\n// Все редактируемые в UI и сохраняемые переменные для PH\nconst savableVars = [\n    'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm',\n    'window_smus'\n];\n\n// Переменные, не имеющие прямого отношения к истории, но которые тоже можно обновлять глобально сразу\nconst otherSavableVars = [\n    'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm'\n];\n\n\nif (savableVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    let clampedValue = newValue;\n\n    // Применение ограничений и специфической логики\n    if (varName === 'window_smus') {\n        if (clampedValue < 1) clampedValue = 1;\n        if (clampedValue > 1000) clampedValue = 1000; // Примерный максимум\n        clampedValue = Math.round(clampedValue);\n\n        // >>> Немедленное обновление глобальной переменной и сброс истории концентраций <<<\n        if (global.get('window_smus') !== clampedValue) {\n            global.set('window_smus', clampedValue);\n            global.set('cammkisl_history', []); // <<< СБРОС ИСТОРИИ ДЛЯ КОНЦЕНТРАЦИЙ\n            node.log(`[UI_PH_INPUT] Global 'window_smus' обновлен на: ${clampedValue}. История cammkisl сброшена.`);\n        }\n    } else if (varName === 'phneitr') {\n        if (clampedValue < 0) clampedValue = 0;\n        if (clampedValue > 14) clampedValue = 14;\n        // Немедленное обновление\n        if (global.get(varName) !== clampedValue) {\n            global.set(varName, clampedValue);\n            node.log(`[UI_PH_INPUT] Global '${varName}' обновлен на: ${clampedValue.toFixed(3)}`);\n        }\n    } else if (otherSavableVars.includes(varName)) {\n        // Общие ограничения для остальных числовых параметров PH\n        if (clampedValue < -10000) clampedValue = -10000; // Примерный диапазон\n        if (clampedValue > 10000) clampedValue = 10000;\n        // Немедленное обновление\n        if (global.get(varName) !== clampedValue) {\n            global.set(varName, clampedValue);\n            node.log(`[UI_PH_INPUT] Global '${varName}' обновлен на: ${clampedValue.toFixed(3)}`);\n        }\n    }\n\n    uiState[varName] = clampedValue; // Обновляем значение в uiState\n    global.set('uiState_ph', uiState);\n\n} else {\n    node.warn(\"[UI_PH_INPUT] Получено некорректное сообщение от UI: \" + JSON.stringify(msg));\n    return null;\n}\n\n// Проверка несохраненных изменений для статуса\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    const savedValRaw = savedState.hasOwnProperty(key) ? savedState[key] : null;\n    const uiValRaw = uiState.hasOwnProperty(key) ? uiState[key] : null;\n\n    const savedNum = Number(savedValRaw);\n    const uiNum = Number(uiValRaw);\n\n    let precision = (key === 'window_smus' || key === 'phneitr') ? 0 : 3; // Целые для window, phneitr\n    if (['phminkisl', 'phminamm', 'phkonstamm', 'phkonstkisl', 'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2', 'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst'].includes(key)) {\n        precision = 3;\n    }\n\n\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(precision) : String(savedValRaw);\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(precision) : String(uiValRaw);\n\n    if (savedStr !== uiStr) {\n        hasUnsavedChanges = true;\n        node.log(`[UI_PH_INPUT] Unsaved change for ${key}: saved (${savedStr}), ui (${uiStr})`);\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\n\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 380,
        "wires": [
            [
                "d9f499ff99a40c37"
            ]
        ]
    },
    {
        "id": "15a7fda76c5d164b",
        "type": "link in",
        "z": "0adabbe16538e192",
        "name": "link in: update-ph-status-text",
        "links": [
            "aff8d037de8daed1"
        ],
        "x": 875,
        "y": 500,
        "wires": [
            [
                "d9f499ff99a40c37"
            ]
        ]
    },
    {
        "id": "01e08de03347925a",
        "type": "ui_button",
        "z": "0adabbe16538e192",
        "name": "Чтение PH из файла",
        "group": "748fbd9daf52d233",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение",
        "tooltip": "Прочитать значения переменных PH из файла, обновить поля и ГЛОБАЛЬНЫЕ переменные",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-download",
        "payload": "read_request",
        "payloadType": "str",
        "topic": "read_request",
        "topicType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "b0e196ae0e220823"
            ]
        ]
    },
    {
        "id": "b0e196ae0e220823",
        "type": "link out",
        "z": "0adabbe16538e192",
        "name": "link out: trigger-read-ph",
        "mode": "link",
        "links": [
            "0f58740bdde9faeb"
        ],
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "f286bd47f7fe32eb",
        "type": "ui_button",
        "z": "0adabbe16538e192",
        "name": "Запись PH в файл",
        "group": "748fbd9daf52d233",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись",
        "tooltip": "Применить изменения к ГЛОБАЛЬНЫМ переменным PH и сохранить текущие значения в файл",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-upload",
        "payload": "write_request",
        "payloadType": "str",
        "topic": "write_request",
        "topicType": "str",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "563e5988935d27fe"
            ]
        ]
    },
    {
        "id": "563e5988935d27fe",
        "type": "link out",
        "z": "0adabbe16538e192",
        "name": "link out: trigger-save-ph",
        "mode": "link",
        "links": [
            "4e6c11e8bc465a42"
        ],
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "3cf9ddb88f52a4db",
        "type": "ui_text",
        "z": "0adabbe16538e192",
        "group": "c49db3556cbd5bbe",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "ai2t1h1_display",
        "label": "ai2t1h1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 80,
        "wires": []
    },
    {
        "id": "0c16fe9c1ccf176f",
        "type": "ui_text",
        "z": "0adabbe16538e192",
        "group": "c49db3556cbd5bbe",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "ai2t2h2_display",
        "label": "ai2t2h2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 120,
        "wires": []
    },
    {
        "id": "03b016125caef15d",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "ai2t1h1koef1",
        "label": "ai2t1h1koef1:",
        "group": "c49db3556cbd5bbe",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t1h1koef1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 160,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "b8e1dd83c924b572",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "ai2t2h2koef2",
        "label": "ai2t2h2koef2:",
        "group": "c49db3556cbd5bbe",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t2h2koef2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 200,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "24457e371ad5cbd8",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "ai2t1h1konst1",
        "label": "ai2t1h1konst1:",
        "group": "c49db3556cbd5bbe",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t1h1konst1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 240,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "79e020397682db31",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "ai2t2h2konst2",
        "label": "ai2t2h2konst2:",
        "group": "c49db3556cbd5bbe",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t2h2konst2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 280,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "1f8dcee9bc99f9bd",
        "type": "ui_text",
        "z": "0adabbe16538e192",
        "group": "c49db3556cbd5bbe",
        "order": 7,
        "width": 6,
        "height": 1,
        "name": "ai2t1t2h1h2_display",
        "label": "ai2t1t2h1h2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 320,
        "wires": []
    },
    {
        "id": "72665740a88f47b2",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "ai2t1t2h1h2koef",
        "label": "ai2t1t2h1h2koef:",
        "group": "c49db3556cbd5bbe",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t1t2h1h2koef",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "ea9b52b371ab7014",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "ai2t1t2h1h2konst",
        "label": "ai2t1t2h1h2konst:",
        "group": "c49db3556cbd5bbe",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t1t2h1h2konst",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 400,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "2c8425d289839fa8",
        "type": "ui_text",
        "z": "0adabbe16538e192",
        "group": "59f514d740aa728e",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "camm_display",
        "label": "camm:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 440,
        "wires": []
    },
    {
        "id": "270d95cfde7dc6b6",
        "type": "ui_text",
        "z": "0adabbe16538e192",
        "group": "59f514d740aa728e",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "ckisl_display",
        "label": "ckisl:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 480,
        "wires": []
    },
    {
        "id": "89a4769163b5d8ee",
        "type": "ui_text",
        "z": "0adabbe16538e192",
        "group": "59f514d740aa728e",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "cammkisl_display",
        "label": "cammkisl:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 520,
        "wires": []
    },
    {
        "id": "828d43f856faa90b",
        "type": "ui_text",
        "z": "0adabbe16538e192",
        "group": "59f514d740aa728e",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "cammkisl_smus_display",
        "label": "cammkisl (сглаж.) (cammkisl_smus):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 560,
        "wires": []
    },
    {
        "id": "e6ef148d0e04ce31",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "window_smus",
        "label": "Окно сглаж. (window_smus):",
        "group": "59f514d740aa728e",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "window_smus",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 1,
        "max": 1000,
        "step": 1,
        "x": 610,
        "y": 600,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "4a978da1da9b9f6d",
        "type": "ui_text",
        "z": "0adabbe16538e192",
        "group": "59f514d740aa728e",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "ph_display",
        "label": "ph:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 640,
        "wires": []
    },
    {
        "id": "e21d70b6f58ee2c8",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "phkonstamm",
        "label": "phkonstamm:",
        "group": "5f7282cf711876bf",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "phkonstamm",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 680,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "e47ed5b87c2d5162",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "phkonstkisl",
        "label": "phkonstkisl:",
        "group": "5f7282cf711876bf",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "phkonstkisl",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 720,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "654fd17d6433a242",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "phneitr",
        "label": "phneitr:",
        "group": "5f7282cf711876bf",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "phneitr",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 14,
        "step": 0.001,
        "x": 610,
        "y": 760,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "bfff6803f3e08951",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "phminkisl",
        "label": "phminkisl:",
        "group": "5f7282cf711876bf",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "phminkisl",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 800,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "56ef6f2cc0b40e35",
        "type": "ui_numeric",
        "z": "0adabbe16538e192",
        "name": "phminamm",
        "label": "phminamm:",
        "group": "5f7282cf711876bf",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "phminamm",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 840,
        "wires": [
            [
                "8d59e70408c17da5"
            ]
        ]
    },
    {
        "id": "d9f499ff99a40c37",
        "type": "ui_text",
        "z": "0adabbe16538e192",
        "group": "748fbd9daf52d233",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус сохранения PH",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1110,
        "y": 450,
        "wires": []
    },
    {
        "id": "4c4a6fb249ca3945",
        "type": "ui_chart",
        "z": "0adabbe16538e192",
        "name": "График PH и Концентраций",
        "group": "a434ae3bb07dd675",
        "order": 1,
        "width": "12",
        "height": "8",
        "label": "Динамика PH / Концентрации",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#d62728",
            "#9467bd"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "x": 390,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "2c064929395c8586",
        "type": "ui_chart",
        "z": "0adabbe16538e192",
        "name": "График PH (0-10)",
        "group": "a434ae3bb07dd675",
        "order": 2,
        "width": "12",
        "height": "8",
        "label": "PH (Шкала 0-10)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "0",
        "ymax": "10",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 390,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "0ff73fe8805d3bba",
        "type": "ui_chart",
        "z": "0adabbe16538e192",
        "name": "График Входов (ai2h1, ai2h2)",
        "group": "a434ae3bb07dd675",
        "order": 3,
        "width": "12",
        "height": "8",
        "label": "Входы ai2t1h1 / ai2t2h2",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#aec7e8",
            "#ffbb78"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "x": 390,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "bc86d66dc03d9302",
        "type": "link in",
        "z": "0adabbe16538e192",
        "name": "link in: chart ph",
        "links": [
            "958bc223aa0cd7d2"
        ],
        "x": 195,
        "y": 560,
        "wires": [
            [
                "86fb5c7263aa7800"
            ]
        ]
    },
    {
        "id": "fe8cf1bde5438795",
        "type": "link in",
        "z": "0adabbe16538e192",
        "name": "link in: chart camm",
        "links": [
            "b0d38f886b113152"
        ],
        "x": 195,
        "y": 600,
        "wires": [
            [
                "03ada57096b36f77"
            ]
        ]
    },
    {
        "id": "fa3fae657028b113",
        "type": "link in",
        "z": "0adabbe16538e192",
        "name": "link in: chart ckisl",
        "links": [
            "4e4957b1386f6678"
        ],
        "x": 195,
        "y": 640,
        "wires": [
            [
                "94381b824cbce7d7"
            ]
        ]
    },
    {
        "id": "812ec1c56f909b29",
        "type": "link in",
        "z": "0adabbe16538e192",
        "name": "link in: chart cammkisl",
        "links": [
            "f31ab213e619884b"
        ],
        "x": 195,
        "y": 680,
        "wires": [
            [
                "5828b5f160b147f2"
            ]
        ]
    },
    {
        "id": "59549d260f91593d",
        "type": "link in",
        "z": "0adabbe16538e192",
        "name": "link in: chart cammkisl_smus",
        "links": [
            "9ea9abda07c5b078"
        ],
        "x": 195,
        "y": 720,
        "wires": [
            [
                "b503092b956644e1"
            ]
        ]
    },
    {
        "id": "1c1c3601fc7dbbf5",
        "type": "link in",
        "z": "0adabbe16538e192",
        "name": "link in: chart ai2t1h1",
        "links": [
            "c289f92c599f7e43"
        ],
        "x": 195,
        "y": 760,
        "wires": [
            [
                "3b6b3ed3c70f3328"
            ]
        ]
    },
    {
        "id": "b97f853b0b8923d6",
        "type": "link in",
        "z": "0adabbe16538e192",
        "name": "link in: chart ai2t2h2",
        "links": [
            "d55480099f87401b"
        ],
        "x": 195,
        "y": 800,
        "wires": [
            [
                "4a0da3fa4cc817ed"
            ]
        ]
    },
    {
        "id": "c87ae319ef0a56d6",
        "type": "inject",
        "z": "0adabbe16538e192",
        "d": true,
        "name": "При старте потока 12с",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "12",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "01e08de03347925a"
            ]
        ]
    },
    {
        "id": "86fb5c7263aa7800",
        "type": "rbe",
        "z": "0adabbe16538e192",
        "name": "Filter unchanged ph",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 560,
        "wires": [
            [
                "fb91e7615a2f4b45",
                "31d853f04ac547f3"
            ]
        ]
    },
    {
        "id": "03ada57096b36f77",
        "type": "rbe",
        "z": "0adabbe16538e192",
        "name": "Filter unchanged camm",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 600,
        "wires": [
            [
                "fb91e7615a2f4b45"
            ]
        ]
    },
    {
        "id": "94381b824cbce7d7",
        "type": "rbe",
        "z": "0adabbe16538e192",
        "name": "Filter unchanged ckisl",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 640,
        "wires": [
            [
                "fb91e7615a2f4b45"
            ]
        ]
    },
    {
        "id": "5828b5f160b147f2",
        "type": "rbe",
        "z": "0adabbe16538e192",
        "name": "Filter unchanged cammkisl",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 680,
        "wires": [
            [
                "fb91e7615a2f4b45"
            ]
        ]
    },
    {
        "id": "b503092b956644e1",
        "type": "rbe",
        "z": "0adabbe16538e192",
        "name": "Filter unchanged cammkisl_smus",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 720,
        "wires": [
            [
                "fb91e7615a2f4b45"
            ]
        ]
    },
    {
        "id": "3b6b3ed3c70f3328",
        "type": "rbe",
        "z": "0adabbe16538e192",
        "name": "Filter unchanged ai2t1h1",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 760,
        "wires": [
            [
                "71ddcd23b69440d7"
            ]
        ]
    },
    {
        "id": "4a0da3fa4cc817ed",
        "type": "rbe",
        "z": "0adabbe16538e192",
        "name": "Filter unchanged ai2t2h2",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 800,
        "wires": [
            [
                "71ddcd23b69440d7"
            ]
        ]
    },
    {
        "id": "c58c208da22438b3",
        "type": "inject",
        "z": "6c5a62355aa37281",
        "name": "Каждую секунду",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "calculate_ph",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "cb97cc3296574a09"
            ]
        ]
    },
    {
        "id": "3bbae529688a3e48",
        "type": "function",
        "z": "6c5a62355aa37281",
        "name": "Расчет camm/ckisl/ai2t1t2h1h2/ph + Входы",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\n// --- БЛОК 1: Получение данных (без изменений) ---\nconst ai2h1 = Number(g(\"ai2h1\") || 0);\nconst ai2h2 = Number(g(\"ai2h2\") || 0);\ns(\"ai2t1h1\", ai2h1);\ns(\"ai2t2h2\", ai2h2);\n\nconst koef1 = Number(g(\"ai2t1h1koef1\") || 0);\nconst konst1 = Number(g(\"ai2t1h1konst1\") || 0);\nconst koef2 = Number(g(\"ai2t2h2koef2\") || 0);\nconst konst2 = Number(g(\"ai2t2h2konst2\") || 0);\nconst koef_h1h2 = Number(g(\"ai2t1t2h1h2koef\") || 0);\nconst konst_h1h2 = Number(g(\"ai2t1t2h1h2konst\") || 0);\nconst phminamm = Number(g(\"phminamm\") || 0);\nconst phminkisl = Number(g(\"phminkisl\") || 0);\nconst phkonstamm = Number(g(\"phkonstamm\") || 0);\nconst phkonstkisl = Number(g(\"phkonstkisl\") || 0);\nconst phneitr = Number(g(\"phneitr\") || 7);\n\n// --- БЛОК 2: ИЗМЕНЕННАЯ ЛОГИКА ---\n// Получаем сглаженное значение. Теперь оно может быть null.\nconst cammkisl_smus_val = g('cammkisl_smus');\n\n// Расчитываем НЕсглаженное значение cammkisl в любом случае\nlet ai2t1t2h1h2_calc = (ai2h1 * koef1 + konst1) + (ai2h2 * koef2 + konst2);\nlet cammkisl_calc = ai2t1t2h1h2_calc * koef_h1h2 + konst_h1h2;\n\nlet new_camm = 0;\nlet new_ckisl = 0;\nlet new_ph = phneitr; // По умолчанию pH нейтральный\n\n// **КЛЮЧЕВАЯ ПРОВЕРКА!** Если сглаженное значение еще не рассчитано (равно null)\nif (cammkisl_smus_val === null) {\n    node.warn(\"Расчет PH пропущен, т.к. сглаженное значение cammkisl_smus еще не готово (null).\");\n    // Оставляем new_camm, new_ckisl нулями, а new_ph - нейтральным.\n} else {\n    // Если cammkisl_smus_val - число, выполняем расчеты как и раньше.\n    if (cammkisl_smus_val > 0) {\n        new_camm = cammkisl_smus_val;\n        new_ckisl = 0;\n    } else if (cammkisl_smus_val < 0) {\n        new_ckisl = Math.abs(cammkisl_smus_val);\n        new_camm = 0;\n    }\n\n    if (new_camm > phminamm) {\n        if (new_camm > 0) {\n            try {\n                new_ph = Math.log10(new_camm / 100) + phkonstamm;\n            } catch (e) {\n                node.error(\"Error calculating log10 for camm: \" + e.message);\n                new_ph = phneitr;\n            }\n        } else {\n            new_ph = phneitr;\n        }\n    } else if (new_ckisl > phminkisl) {\n        if (new_ckisl > 0) {\n            try {\n                new_ph = -Math.log10(new_ckisl / 10) + phkonstkisl;\n            } catch (e) {\n                node.error(\"Error calculating log10 for ckisl: \" + e.message);\n                new_ph = phneitr;\n            }\n        } else {\n            new_ph = phneitr;\n        }\n    }\n}\n\n// Ограничиваем PH\nif (new_ph < 0) new_ph = 0;\nif (new_ph > 14) new_ph = 14;\n\n// --- БЛОК 3: Обновление глобальных переменных и UI (без изменений) ---\ns(\"ai2t1t2h1h2\", ai2t1t2h1h2_calc);\ns(\"cammkisl\", cammkisl_calc);\ns(\"camm\", new_camm);\ns(\"ckisl\", new_ckisl);\ns(\"ph\", new_ph);\n\nlet uiState = g('uiState_ph') || {};\nuiState['ai2t1h1'] = ai2h1;\nuiState['ai2t2h2'] = ai2h2;\nuiState['ai2t1t2h1h2'] = ai2t1t2h1h2_calc;\nuiState['cammkisl'] = cammkisl_calc;\nuiState['camm'] = new_camm;\nuiState['ckisl'] = new_ckisl;\nuiState['ph'] = new_ph;\nuiState['cammkisl_smus'] = cammkisl_smus_val;\ns('uiState_ph', uiState);\n\nconst msg_ph = { topic: \"ph\", payload: new_ph };\nconst msg_camm = { topic: \"camm\", payload: new_camm };\nconst msg_ckisl = { topic: \"ckisl\", payload: new_ckisl };\nconst msg_cammkisl = { topic: \"cammkisl\", payload: cammkisl_calc };\nconst msg_ai2t1h1 = { topic: \"ai2t1h1\", payload: ai2h1 };\nconst msg_ai2t2h2 = { topic: \"ai2t2h2\", payload: ai2h2 };\nconst msg_trigger_ui_update = { payload: true };\n\nreturn [msg_trigger_ui_update, msg_ph, msg_camm, msg_ckisl, msg_cammkisl, msg_ai2t1h1, msg_ai2t2h2];",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "2167545833e4c604"
            ],
            [
                "958bc223aa0cd7d2"
            ],
            [
                "b0d38f886b113152"
            ],
            [
                "4e4957b1386f6678"
            ],
            [
                "f31ab213e619884b"
            ],
            [
                "c289f92c599f7e43"
            ],
            [
                "d55480099f87401b"
            ]
        ]
    },
    {
        "id": "2167545833e4c604",
        "type": "link out",
        "z": "6c5a62355aa37281",
        "name": "link out: trigger-ph-ui-update",
        "mode": "link",
        "links": [
            "75f06ba54fe094f1"
        ],
        "x": 630,
        "y": 40,
        "wires": []
    },
    {
        "id": "958bc223aa0cd7d2",
        "type": "link out",
        "z": "6c5a62355aa37281",
        "name": "link out: chart ph",
        "mode": "link",
        "links": [
            "bc86d66dc03d9302"
        ],
        "x": 630,
        "y": 80,
        "wires": []
    },
    {
        "id": "b0d38f886b113152",
        "type": "link out",
        "z": "6c5a62355aa37281",
        "name": "link out: chart camm",
        "mode": "link",
        "links": [
            "fe8cf1bde5438795"
        ],
        "x": 630,
        "y": 120,
        "wires": []
    },
    {
        "id": "4e4957b1386f6678",
        "type": "link out",
        "z": "6c5a62355aa37281",
        "name": "link out: chart ckisl",
        "mode": "link",
        "links": [
            "fa3fae657028b113"
        ],
        "x": 630,
        "y": 160,
        "wires": []
    },
    {
        "id": "f31ab213e619884b",
        "type": "link out",
        "z": "6c5a62355aa37281",
        "name": "link out: chart cammkisl",
        "mode": "link",
        "links": [
            "812ec1c56f909b29"
        ],
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "c289f92c599f7e43",
        "type": "link out",
        "z": "6c5a62355aa37281",
        "name": "link out: chart ai2t1h1",
        "mode": "link",
        "links": [
            "1c1c3601fc7dbbf5"
        ],
        "x": 630,
        "y": 240,
        "wires": []
    },
    {
        "id": "d55480099f87401b",
        "type": "link out",
        "z": "6c5a62355aa37281",
        "name": "link out: chart ai2t2h2",
        "mode": "link",
        "links": [
            "b97f853b0b8923d6"
        ],
        "x": 630,
        "y": 280,
        "wires": []
    },
    {
        "id": "b6181a6c9c6ee23d",
        "type": "link in",
        "z": "6c5a62355aa37281",
        "name": "link in: step_complete_for_smus",
        "links": [
            "d655c580310a7aac"
        ],
        "x": 175,
        "y": 340,
        "wires": [
            [
                "998797aba37941e5"
            ]
        ]
    },
    {
        "id": "998797aba37941e5",
        "type": "function",
        "z": "6c5a62355aa37281",
        "name": "Update Smoothing on Cycle End",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\n// Запускаемся только если завершился шаг 5\nif (msg.payload === 5) {\n\n    const last_cammkisl = g('cammkisl') || 0;\n    let history = g('cammkisl_history') || [];\n    const window_smus = Math.max(1, Math.round(Number(g(\"window_smus\") || 10)));\n\n    // --- НАЧАЛО ИЗМЕНЕНИЙ ---\n\n    // ФИЛЬТР: Добавляем значение в историю, только если оно не равно нулю.\n    // Это отсечет тот самый первый, некорректный ноль при старте системы.\n    if (last_cammkisl !== 0) {\n        history.push(last_cammkisl);\n        node.log(`PH Smoothing: Добавлено значение ${last_cammkisl.toFixed(3)} в историю.`);\n    } else {\n        node.warn(`PH Smoothing: Нулевое значение cammkisl проигнорировано и не добавлено в историю сглаживания.`);\n    }\n\n    // --- КОНЕЦ ИЗМЕНЕНИЙ ---\n\n    // Если массив стал длиннее окна, удаляем самый старый элемент (с начала)\n    if (history.length > window_smus) {\n        history.shift();\n    }\n    s('cammkisl_history', history); // Сохраняем обновленную историю\n\n    // Считаем сумму всех элементов в ТЕКУЩЕМ массиве\n    let sum = 0;\n    for (let val of history) {\n        sum += val;\n    }\n\n    // Делим сумму на РЕАЛЬНОЕ количество элементов в массиве.\n    let new_cammkisl_smus = (history.length > 0) ? (sum / history.length) : null; // Если история пуста, вернем null\n\n    // Обновляем глобальную переменную сглаженного значения\n    // Если new_cammkisl_smus равен null (история пуста), то и в global запишется null\n    s(\"cammkisl_smus\", new_cammkisl_smus);\n\n    // Обновляем значение в состоянии UI\n    let uiState = g('uiState_ph') || {};\n    uiState['cammkisl_smus'] = new_cammkisl_smus;\n    s('uiState_ph', uiState);\n\n    if (new_cammkisl_smus !== null) {\n        node.log(`PH Smoothing Updated: cammkisl_smus=${new_cammkisl_smus.toFixed(3)} based on ${history.length} values.`);\n    }\n\n    // Подготовка сообщения для графика\n    const msg_smus_chart = { topic: \"cammkisl_smus\", payload: new_cammkisl_smus };\n    // Сообщение для обновления UI\n    const msg_trigger_ui_update = { payload: true };\n\n    // Возвращаем: [0]=trigger UI, [1]=smus для графика\n    return [msg_trigger_ui_update, msg_smus_chart];\n\n} else {\n    // Если шаг не 5, ничего не делаем\n    return null;\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "2167545833e4c604"
            ],
            [
                "9ea9abda07c5b078"
            ]
        ]
    },
    {
        "id": "9ea9abda07c5b078",
        "type": "link out",
        "z": "6c5a62355aa37281",
        "name": "link out: chart cammkisl_smus",
        "mode": "link",
        "links": [
            "59549d260f91593d"
        ],
        "x": 630,
        "y": 340,
        "wires": []
    },
    {
        "id": "7550ecd18efd5423",
        "type": "inject",
        "z": "abdee1c6947fc850",
        "name": "При старте потока 2.5c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2.5",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "fe3b5f48ab7b8057"
            ]
        ]
    },
    {
        "id": "6eb2276b7da0788c",
        "type": "link in",
        "z": "abdee1c6947fc850",
        "name": "link in: trigger-read-redox",
        "links": [
            "1156f17b5b713cfc",
            "1774d9088d1aa3e6"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "fe3b5f48ab7b8057"
            ]
        ]
    },
    {
        "id": "fe3b5f48ab7b8057",
        "type": "file in",
        "z": "abdee1c6947fc850",
        "name": "Прочитать файл Redox",
        "filename": "/home/root/.node-red/save/redox_variables.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "34608b1901ab34e9"
            ]
        ]
    },
    {
        "id": "e9a14970cbfc0ad6",
        "type": "catch",
        "z": "abdee1c6947fc850",
        "name": "Ошибка чтения файла Redox",
        "scope": [
            "fe3b5f48ab7b8057"
        ],
        "uncaught": false,
        "x": 590,
        "y": 280,
        "wires": [
            [
                "b41d8e8ad244a922"
            ]
        ]
    },
    {
        "id": "34608b1901ab34e9",
        "type": "json",
        "z": "abdee1c6947fc850",
        "name": "Разобрать JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 140,
        "wires": [
            [
                "b41d8e8ad244a922"
            ]
        ]
    },
    {
        "id": "b41d8e8ad244a922",
        "type": "function",
        "z": "abdee1c6947fc850",
        "name": "Init/Read Redox Globals",
        "func": "const defaultVars = {\n    ai3ph5koef: 1.0,    // Коэффициент по умолчанию\n    ai3ph5konst: 0.0,   // Константа по умолчанию\n    window_smusp: 10,    // Окно сглаживания по умолчанию\n    ai3ph5: 0.0,       // Начальное расчетное значение\n    ai3ph5smus: null   // Начальное сглаженное значение\n};\n\nconst savableVars = [\n    'ai3ph5koef', \n    'ai3ph5konst',\n    'window_smusp'\n];\n\nconst nonSavableVars = [\n    'ai3ph5', \n    'ai3ph5smus'\n];\n\nlet currentGlobalState = {};\nlet source = msg.topic === 'init' ? '[INIT_REDOX]' : '[READ_BTN_REDOX]';\n\n// Проверяем только наличие сохраняемых переменных\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && savableVars.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    node.warn(source + \" Параметры Redox загружены из файла.\");\n    for (const key of savableVars) {\n        currentGlobalState[key] = msg.payload[key];\n    }\n    // Несохраняемые инициализируем по умолчанию\n    for (const key of nonSavableVars) {\n        currentGlobalState[key] = defaultVars[key];\n    }\n} else {\n    currentGlobalState = { ...defaultVars };\n    if (msg.error) {\n        node.warn(source + \" Ошибка чтения файла Redox: \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init') {\n         node.warn(source + \" Файл Redox не найден/поврежден/неполный. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл Redox не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key in defaultVars) {\n    let currentVal = currentGlobalState.hasOwnProperty(key) ? currentGlobalState[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n\n    if (isNaN(numValue)) {\n        node.warn(`[${source}] Invalid number format for ${key}: ${currentVal}. Using default: ${defaultVars[key]}`);\n        currentVal = defaultVars[key];\n        currentGlobalState[key] = currentVal;\n    } else {\n         currentVal = numValue;\n         // Ограничения\n         if (key === 'window_smusp') {\n             if (currentVal < 1) currentVal = 1;\n             if (currentVal > 1000) currentVal = 1000;\n             currentVal = Math.round(currentVal); \n         } else if (key === 'ai3ph5koef' || key === 'ai3ph5konst') {\n             if (currentVal < -100000) currentVal = -100000;\n             if (currentVal > 100000) currentVal = 100000;\n         }\n         currentGlobalState[key] = currentVal;\n    }\n\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\n// Инициализируем историю для сглаживания\nglobal.set('redox_history', []);\n\n// Устанавливаем состояния\nglobal.set('savedState_redox', { ...currentGlobalState }); \nglobal.set('uiState_redox', { ...currentGlobalState });\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные Redox установлены/обновлены.\");\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные Redox уже были установлены.\");\n}\n\nreturn { payload: true }; // Триггер для UI",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 140,
        "wires": [
            [
                "3685e7126eea13ae"
            ]
        ]
    },
    {
        "id": "3685e7126eea13ae",
        "type": "link out",
        "z": "abdee1c6947fc850",
        "name": "link out: trigger-redox-ui-update",
        "mode": "link",
        "links": [
            "36155efc8f65fdf0"
        ],
        "x": 1110,
        "y": 140,
        "wires": []
    },
    {
        "id": "36155efc8f65fdf0",
        "type": "link in",
        "z": "59dd9bd5d7fbfa1b",
        "name": "link in: trigger-redox-ui-update",
        "links": [
            "3685e7126eea13ae",
            "9009572193b697dc",
            "180b2071751e76ae"
        ],
        "x": 195,
        "y": 220,
        "wires": [
            [
                "061f61cc524b13b9"
            ]
        ]
    },
    {
        "id": "061f61cc524b13b9",
        "type": "function",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Update Redox UI Elements",
        "func": "const uiState = global.get('uiState_redox') || {};\nconst savedState = global.get('savedState_redox') || {};\nconst uiMessages = [];\n\n// Переменные для отображения/ввода\nconst vars_to_update = [\n    'ai3h5', // Входное значение (только чтение)\n    'ai3ph5koef',\n    'ai3ph5konst',\n    'window_smusp',\n    'ai3ph5', // Расчетное (только чтение)\n    'ai3ph5smus' // Сглаженное (только чтение)\n];\n\nconst savableVars = [\n    'ai3ph5koef', \n    'ai3ph5konst',\n    'window_smusp'\n];\n\n// Обновляем текстовые поля и поля ввода\nfor (const key of vars_to_update) {\n    let value;\n    // ai3h5 берем напрямую из global, т.к. оно может обновляться из другого потока\n    if (key === 'ai3h5') {\n        value = global.get(key) || 0;\n    } else {\n        value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : 0;\n    }\n    \n    let formattedValue = (typeof value === 'number') ? value.toFixed(3) : 'N/A';\n    if (key === 'window_smusp' && Number.isInteger(value)){\n        formattedValue = value.toString();\n    }\n    uiMessages.push({ payload: formattedValue, topic: key });\n}\n\n// Проверяем наличие несохраненных изменений\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    const savedNum = Number(savedState[key]);\n    const uiNum = Number(uiState[key]);\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(3) : null;\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(3) : null;\n    if (savedStr !== uiStr) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\nuiMessages.push({ payload: statusMessage });\n\nreturn uiMessages;",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "5a159071d1eeee11"
            ],
            [
                "2628efb63745ed56"
            ],
            [
                "1e98f8374498ddf5"
            ],
            [
                "940d01a118f0a154"
            ],
            [
                "5522f83506ab1e10"
            ],
            [
                "c5f5c85c4ad27191"
            ],
            [
                "63da0bcce223e89e"
            ]
        ]
    },
    {
        "id": "281c9db31bc61be1",
        "type": "function",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Handle Redox UI Input",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\n\nlet uiState = global.get('uiState_redox') || {};\nconst savedState = global.get('savedState_redox') || {};\n\n// Только те переменные, которые можно редактировать в UI и сохранять\nconst savableVars = [\n    'ai3ph5koef',\n    'ai3ph5konst',\n    'window_smusp'\n];\n\nif (savableVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    let clampedValue = newValue;\n\n    if (varName === 'window_smusp') {\n        if (clampedValue < 1) clampedValue = 1;\n        if (clampedValue > 1000) clampedValue = 1000; // Максимальное окно, например\n        clampedValue = Math.round(clampedValue); // Окно должно быть целым\n\n        // Немедленное обновление глобальной переменной и сброс истории\n        if (global.get('window_smusp') !== clampedValue) {\n            global.set('window_smusp', clampedValue);\n            global.set('redox_history', []); // <<< СБРОС ИСТОРИИ СГЛАЖИВАНИЯ\n            node.log(`[UI_REDOX_INPUT] Global 'window_smusp' обновлен на: ${clampedValue}. История Redox сброшена.`);\n        }\n    } else if (varName === 'ai3ph5koef' || varName === 'ai3ph5konst') {\n        // Ограничения для коэффициента и константы\n        if (clampedValue < -100000) clampedValue = -100000;\n        if (clampedValue > 100000) clampedValue = 100000;\n\n        // Немедленное обновление глобальных переменных для koef/konst\n        if (global.get(varName) !== clampedValue) {\n            global.set(varName, clampedValue);\n            node.log(`[UI_REDOX_INPUT] Global '${varName}' обновлен на: ${clampedValue.toFixed(3)}`);\n        }\n    }\n\n    uiState[varName] = clampedValue; // Обновляем значение в uiState\n    global.set('uiState_redox', uiState);\n\n} else {\n    node.warn(\"[UI_REDOX_INPUT] Получено некорректное сообщение от UI: \" + JSON.stringify(msg));\n    // Важно: если значение некорректно, не обновляем UI, чтобы пользователь видел ошибку ввода\n    // и не обновляем глобальную переменную. Статус тоже не меняем.\n    return null;\n}\n\n// Проверка несохраненных изменений для статуса\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    // Убедимся, что оба значения существуют перед сравнением\n    const savedValRaw = savedState.hasOwnProperty(key) ? savedState[key] : (key.includes('koef') ? 1.0 : (key.includes('konst') ? 0.0 : 10)); // Значения по умолчанию для сравнения\n    const uiValRaw = uiState.hasOwnProperty(key) ? uiState[key] : (key.includes('koef') ? 1.0 : (key.includes('konst') ? 0.0 : 10));\n\n    const savedNum = Number(savedValRaw);\n    const uiNum = Number(uiValRaw);\n\n    let precision = (key === 'window_smusp') ? 0 : 3;\n\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(precision) : String(savedValRaw);\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(precision) : String(uiValRaw);\n\n    if (savedStr !== uiStr) {\n        hasUnsavedChanges = true;\n        node.log(`[UI_REDOX_INPUT] Unsaved change detected for ${key}: saved (${savedStr}), ui (${uiStr})`);\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\n\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "63da0bcce223e89e"
            ]
        ]
    },
    {
        "id": "fa1bc93ee82e3386",
        "type": "link in",
        "z": "59dd9bd5d7fbfa1b",
        "name": "link in: update-redox-status",
        "links": [
            "b78ae871c7f2f7b4"
        ],
        "x": 875,
        "y": 340,
        "wires": [
            [
                "63da0bcce223e89e"
            ]
        ]
    },
    {
        "id": "5e9fc9e6e800184a",
        "type": "ui_button",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Чтение Redox из файла",
        "group": "da8e034452136c3f",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение Redox",
        "tooltip": "Прочитать параметры Redox из файла",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-download",
        "payload": "read_request",
        "payloadType": "str",
        "topic": "read_request",
        "topicType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "1156f17b5b713cfc"
            ]
        ]
    },
    {
        "id": "1156f17b5b713cfc",
        "type": "link out",
        "z": "59dd9bd5d7fbfa1b",
        "name": "link out: trigger-read-redox",
        "mode": "link",
        "links": [
            "6eb2276b7da0788c"
        ],
        "x": 390,
        "y": 60,
        "wires": []
    },
    {
        "id": "69cfe1cd3fd307be",
        "type": "ui_button",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Запись Redox в файл",
        "group": "da8e034452136c3f",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись Redox",
        "tooltip": "Применить и сохранить параметры Redox в файл",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-upload",
        "payload": "write_request",
        "payloadType": "str",
        "topic": "write_request",
        "topicType": "str",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "8ef01cd1f9966c5b"
            ]
        ]
    },
    {
        "id": "8ef01cd1f9966c5b",
        "type": "link out",
        "z": "59dd9bd5d7fbfa1b",
        "name": "link out: trigger-save-redox",
        "mode": "link",
        "links": [
            "dc99ecdcde066a9d"
        ],
        "x": 390,
        "y": 120,
        "wires": []
    },
    {
        "id": "63da0bcce223e89e",
        "type": "ui_text",
        "z": "59dd9bd5d7fbfa1b",
        "group": "da8e034452136c3f",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус Redox",
        "label": "Статус:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 760,
        "y": 480,
        "wires": []
    },
    {
        "id": "5a159071d1eeee11",
        "type": "ui_text",
        "z": "59dd9bd5d7fbfa1b",
        "group": "80211a0365e16957",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "ai3h5_display",
        "label": "Вход (ai3h5):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 100,
        "wires": []
    },
    {
        "id": "2628efb63745ed56",
        "type": "ui_numeric",
        "z": "59dd9bd5d7fbfa1b",
        "name": "ai3ph5koef",
        "label": "Коэфф. (ai3ph5koef):",
        "group": "80211a0365e16957",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai3ph5koef",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -100000,
        "max": 100000,
        "step": 0.001,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "281c9db31bc61be1"
            ]
        ]
    },
    {
        "id": "1e98f8374498ddf5",
        "type": "ui_numeric",
        "z": "59dd9bd5d7fbfa1b",
        "name": "ai3ph5konst",
        "label": "Конст. (ai3ph5konst):",
        "group": "80211a0365e16957",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai3ph5konst",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -100000,
        "max": 100000,
        "step": 0.001,
        "x": 640,
        "y": 200,
        "wires": [
            [
                "281c9db31bc61be1"
            ]
        ]
    },
    {
        "id": "940d01a118f0a154",
        "type": "ui_numeric",
        "z": "59dd9bd5d7fbfa1b",
        "name": "window_smusp",
        "label": "Окно сглаж. (window_smusp):",
        "group": "80211a0365e16957",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "window_smusp",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 1,
        "max": 1000,
        "step": 1,
        "x": 610,
        "y": 240,
        "wires": [
            [
                "281c9db31bc61be1"
            ]
        ]
    },
    {
        "id": "5522f83506ab1e10",
        "type": "ui_text",
        "z": "59dd9bd5d7fbfa1b",
        "group": "80211a0365e16957",
        "order": 5,
        "width": 6,
        "height": 1,
        "name": "ai3ph5_display",
        "label": "Redox (ai3ph5):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 630,
        "y": 280,
        "wires": []
    },
    {
        "id": "c5f5c85c4ad27191",
        "type": "ui_text",
        "z": "59dd9bd5d7fbfa1b",
        "group": "80211a0365e16957",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "ai3ph5smus_display",
        "label": "Redox (сглаж.) (ai3ph5smus):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 640,
        "y": 360,
        "wires": []
    },
    {
        "id": "2fa96424ab656aac",
        "type": "ui_chart",
        "z": "59dd9bd5d7fbfa1b",
        "name": "График Redox",
        "group": "d9e0afc7a4030d81",
        "order": 1,
        "width": "12",
        "height": "8",
        "label": "Redox Потенциал",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff7f0e",
            "#aec7e8"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "x": 390,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "09e3eaadaaf7b8ab",
        "type": "link in",
        "z": "59dd9bd5d7fbfa1b",
        "name": "link in: chart redox raw",
        "links": [
            "3f71570b31dfd69f"
        ],
        "x": 195,
        "y": 460,
        "wires": [
            [
                "99798cdb5f889389"
            ]
        ]
    },
    {
        "id": "375f831bb0b671fb",
        "type": "link in",
        "z": "59dd9bd5d7fbfa1b",
        "name": "link in: chart redox smus",
        "links": [
            "9d2c93131a22d1e3"
        ],
        "x": 195,
        "y": 500,
        "wires": [
            [
                "b5aae509e1ea96a2"
            ]
        ]
    },
    {
        "id": "99798cdb5f889389",
        "type": "rbe",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Filter unchanged redox_raw",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 460,
        "wires": [
            [
                "ea85da7c10d14b4b"
            ]
        ]
    },
    {
        "id": "b5aae509e1ea96a2",
        "type": "rbe",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Filter unchanged redox_smus",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 500,
        "wires": [
            [
                "ea85da7c10d14b4b"
            ]
        ]
    },
    {
        "id": "2a0309279ebedb44",
        "type": "link in",
        "z": "0ae21f32b9588b98",
        "name": "link in: step_complete (From Iteration)",
        "links": [
            "d655c580310a7aac"
        ],
        "x": 135,
        "y": 140,
        "wires": [
            [
                "7e8d4e5a60e0dfb8"
            ]
        ]
    },
    {
        "id": "7e8d4e5a60e0dfb8",
        "type": "function",
        "z": "0ae21f32b9588b98",
        "name": "Calculate Redox & Smoothing",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\n// Запускаемся только по завершению шага 5\nif (msg.payload !== 5) {\n    return null; \n}\n\nnode.log(\"[REDOX_CALC] Step 5 detected, calculating Redox...\");\n\n// Получаем входное значение и параметры\nconst ai3h5 = Number(g(\"ai3h5\") || 0); \nconst koef = Number(g(\"ai3ph5koef\") || 1);\nconst konst = Number(g(\"ai3ph5konst\") || 0);\nconst window_smusp = Math.max(1, Math.round(Number(g(\"window_smusp\") || 10)));\nlet history = g('redox_history') || [];\n\n// Рассчитываем \"сырое\" значение Redox\nconst new_ai3ph5 = ai3h5 * koef + konst;\ns(\"ai3ph5\", new_ai3ph5);\n\n// --- НАЧАЛО ИЗМЕНЕНИЙ ---\n// ФИЛЬТР ОТ НУЛЯ: Добавляем значение в историю, только если оно не равно нулю.\nif (new_ai3ph5 !== 0) {\n    history.push(new_ai3ph5);\n} else {\n    node.warn(`[REDOX_CALC] Нулевое значение new_ai3ph5 проигнорировано и не добавлено в историю.`);\n}\n// --- КОНЕЦ ИЗМЕНЕНИЙ ---\n\n// Обрезаем историю, если она превышает размер окна\nif (history.length > window_smusp) {\n    history.shift(); \n}\ns('redox_history', history); \n\n// Считаем сумму и среднее\nlet sum = 0;\nfor (let val of history) { sum += val; }\n\n// Если история пуста (например, на первом шаге пришел ноль), сглаженное значение будет null\nconst new_ai3ph5smus = (history.length > 0) ? (sum / history.length) : null;\ns(\"ai3ph5smus\", new_ai3ph5smus);\n\n// Обновляем состояние UI\nlet uiState = g('uiState_redox') || {};\nuiState['ai3h5'] = ai3h5;\nuiState['ai3ph5'] = new_ai3ph5;\nuiState['ai3ph5smus'] = new_ai3ph5smus;\ns('uiState_redox', uiState);\n\nif(new_ai3ph5smus !== null) {\n    node.log(`[REDOX_CALC] Calculated: ai3ph5=${new_ai3ph5.toFixed(3)}, ai3ph5smus=${new_ai3ph5smus.toFixed(3)} based on ${history.length} values.`);\n}\n\n// Готовим сообщения для выходов\nconst msg_trigger_ui_update = { payload: true };\nconst msg_chart_raw = { topic: \"ai3ph5\", payload: new_ai3ph5 };\nconst msg_chart_smus = { topic: \"ai3ph5smus\", payload: new_ai3ph5smus };\n\nreturn [msg_trigger_ui_update, msg_chart_raw, msg_chart_smus];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "9009572193b697dc"
            ],
            [
                "3f71570b31dfd69f"
            ],
            [
                "9d2c93131a22d1e3"
            ]
        ]
    },
    {
        "id": "9009572193b697dc",
        "type": "link out",
        "z": "0ae21f32b9588b98",
        "name": "link out: trigger redox ui",
        "mode": "link",
        "links": [
            "36155efc8f65fdf0"
        ],
        "x": 610,
        "y": 100,
        "wires": []
    },
    {
        "id": "3f71570b31dfd69f",
        "type": "link out",
        "z": "0ae21f32b9588b98",
        "name": "link out: chart redox raw",
        "mode": "link",
        "links": [
            "09e3eaadaaf7b8ab"
        ],
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "9d2c93131a22d1e3",
        "type": "link out",
        "z": "0ae21f32b9588b98",
        "name": "link out: chart redox smus",
        "mode": "link",
        "links": [
            "375f831bb0b671fb"
        ],
        "x": 610,
        "y": 180,
        "wires": []
    },
    {
        "id": "dc99ecdcde066a9d",
        "type": "link in",
        "z": "06037d2af0b832a5",
        "name": "link in: trigger-save-redox",
        "links": [
            "8ef01cd1f9966c5b",
            "076fdadf7bb4ae92"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "b7b0007dcd324a09"
            ]
        ]
    },
    {
        "id": "b7b0007dcd324a09",
        "type": "function",
        "z": "06037d2af0b832a5",
        "name": "Apply & Save Redox",
        "func": "const uiState = global.get('uiState_redox') || {};\nlet savedState = global.get('savedState_redox') || {};\n\nlet globalsChanged = false;\n\nconst savableVars = [\n    'ai3ph5koef', \n    'ai3ph5konst',\n    'window_smusp'\n];\n\nconst stateToSave = {}; // Только сохраняемые переменные для файла\n\nfor (const key of savableVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : null;\n    const numValue = Number(valueToSet);\n\n    if (valueToSet === null || isNaN(numValue)) {\n        node.warn(`[REDOX_SAVE] Invalid/missing UI value for ${key}: ${valueToSet}. Using last saved value or default.`);\n        const defaultValue = savedState.hasOwnProperty(key) ? savedState[key] : (key === 'window_smusp' ? 10 : (key === 'ai3ph5koef' ? 1 : 0) );\n        valueToSet = defaultValue;\n    } else {\n        valueToSet = numValue;\n        // Ограничения\n         if (key === 'window_smusp') {\n             if (valueToSet < 1) valueToSet = 1;\n             if (valueToSet > 1000) valueToSet = 1000;\n             valueToSet = Math.round(valueToSet);\n         } else {\n             if (valueToSet < -100000) valueToSet = -100000;\n             if (valueToSet > 100000) valueToSet = 100000;\n         }\n    }\n    \n    // Обновляем global, если нужно\n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChanged = true;\n    }\n    \n    stateToSave[key] = valueToSet;\n    uiState[key] = valueToSet; // Обновляем uiState на случай корректировки\n}\n\n// Обновляем savedState_redox (включая не сохраняемые в файл переменные)\nlet fullSavedState = { ...savedState }; // Копируем старое\nfor(const key of savableVars) {\n    fullSavedState[key] = stateToSave[key]; // Обновляем сохраняемые\n}\n// Несохраняемые берем из global (они должны быть актуальны)\nconst nonSavableVars = ['ai3ph5', 'ai3ph5smus'];\nfor(const key of nonSavableVars) {\n    fullSavedState[key] = global.get(key); // Берем актуальное из global\n}\nglobal.set('savedState_redox', fullSavedState);\n\n// Синхронизируем uiState с сохраненным состоянием\nglobal.set('uiState_redox', { ...uiState, ...fullSavedState }); \n\nif (globalsChanged) {\n    node.log(\"[WRITE_BTN_REDOX] Параметры Redox обновлены и сохранены.\");\n} else {\n    node.log(\"[WRITE_BTN_REDOX] Параметры Redox не требовали обновления.\");\n}\n\nconst filePayload = { payload: stateToSave }; \nconst statusMessage = { payload: \"<font color='green'>Параметры Redox сохранены</font>\" };\n\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "a41a5ba1ea25a6b9"
            ],
            [
                "b78ae871c7f2f7b4"
            ]
        ]
    },
    {
        "id": "a41a5ba1ea25a6b9",
        "type": "json",
        "z": "06037d2af0b832a5",
        "name": "Объект в JSON",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "40ad76fa66dd95cf"
            ]
        ]
    },
    {
        "id": "40ad76fa66dd95cf",
        "type": "file",
        "z": "06037d2af0b832a5",
        "name": "Сохранить файл Redox",
        "filename": "/home/root/.node-red/save/redox_variables.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 430,
        "y": 260,
        "wires": [
            [
                "fe3df30e2a9d09ab"
            ]
        ]
    },
    {
        "id": "fe3df30e2a9d09ab",
        "type": "ui_toast",
        "z": "06037d2af0b832a5",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение Redox",
        "name": "Уведомление Redox",
        "x": 440,
        "y": 340,
        "wires": []
    },
    {
        "id": "b78ae871c7f2f7b4",
        "type": "link out",
        "z": "06037d2af0b832a5",
        "name": "link out: update-redox-status",
        "mode": "link",
        "links": [
            "fa1bc93ee82e3386"
        ],
        "x": 690,
        "y": 100,
        "wires": []
    },
    {
        "id": "d88d390df097ab89",
        "type": "inject",
        "z": "da1a1a8bab77791d",
        "name": "При старте потока (AO LC) 1.3c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1.3",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "20e9c9a48d56973d"
            ]
        ]
    },
    {
        "id": "e36846a3ba56ba76",
        "type": "link in",
        "z": "da1a1a8bab77791d",
        "name": "link in: trigger-read-aolc",
        "links": [
            "20dab0edb6accd2c"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "20e9c9a48d56973d"
            ]
        ]
    },
    {
        "id": "20e9c9a48d56973d",
        "type": "file in",
        "z": "da1a1a8bab77791d",
        "name": "Прочитать файл AO LC Config",
        "filename": "/home/root/.node-red/save/ao_lc_config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "8a30b95173bba887"
            ]
        ]
    },
    {
        "id": "a199ee655f640898",
        "type": "catch",
        "z": "da1a1a8bab77791d",
        "name": "Ошибка чтения файла AO LC",
        "scope": [
            "20e9c9a48d56973d"
        ],
        "uncaught": false,
        "x": 520,
        "y": 220,
        "wires": [
            [
                "5e1ad7cbaed380da"
            ]
        ]
    },
    {
        "id": "8a30b95173bba887",
        "type": "json",
        "z": "da1a1a8bab77791d",
        "name": "Разобрать JSON (AO LC)",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 680,
        "y": 60,
        "wires": [
            [
                "5e1ad7cbaed380da"
            ]
        ]
    },
    {
        "id": "5e1ad7cbaed380da",
        "type": "function",
        "z": "da1a1a8bab77791d",
        "name": "Init/Read AO LC Globals",
        "func": "const defaultVars = {\n    ao_lc_key_ch2: 200, ao_lc_k_ch2: 1.0, ao_lc_c_ch2: 0.0,\n    ao_lc_key_ch3: 300, ao_lc_k_ch3: 1.0, ao_lc_c_ch3: 0.0,\n    ao_lc_key_ch4: 400, ao_lc_k_ch4: 1.0, ao_lc_c_ch4: 0.0\n};\n\nconst savableVars = Object.keys(defaultVars);\nlet currentGlobalState = {};\nlet source = msg.topic === 'init' ? '[INIT_AO_LC]' : '[READ_BTN_AO_LC]';\n\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && savableVars.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    node.warn(source + \" Конфигурация AO LC загружена из файла.\");\n    currentGlobalState = { ...msg.payload };\n} else {\n    currentGlobalState = { ...defaultVars };\n    if (msg.error) {\n        node.warn(source + \" Ошибка чтения файла AO LC: \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init'){\n         node.warn(source + \" Файл AO LC не найден/поврежден. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл AO LC не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key of savableVars) {\n    let currentVal = currentGlobalState.hasOwnProperty(key) ? currentGlobalState[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n\n    if (isNaN(numValue)) {\n        node.warn(`[${source}] Некорректный формат числа для ${key}: ${currentVal}. Используется значение по умолчанию: ${defaultVars[key]}`);\n        currentVal = defaultVars[key];\n        currentGlobalState[key] = currentVal;\n    } else {\n         currentVal = numValue;\n         if (key.startsWith('ao_lc_key_ch')) {\n            // Можно добавить валидацию для ключей, если необходимо\n         }\n         currentGlobalState[key] = currentVal;\n    }\n\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\nglobal.set('savedState_aolc', { ...currentGlobalState }); \nglobal.set('uiState_aolc', { ...currentGlobalState });\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные AO LC установлены/обновлены.\");\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные AO LC уже были установлены.\");\n}\n\nreturn { payload: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "c7c50ea7ce516a93"
            ]
        ]
    },
    {
        "id": "c7c50ea7ce516a93",
        "type": "link out",
        "z": "da1a1a8bab77791d",
        "name": "link out: trigger-aolc-ui-update",
        "mode": "link",
        "links": [
            "6eb05e5a39b8e49e"
        ],
        "x": 1150,
        "y": 140,
        "wires": []
    },
    {
        "id": "7d65ed319937fa14",
        "type": "link in",
        "z": "8883b7a3da4b5d71",
        "name": "link in: trigger-save-aolc",
        "links": [
            "fd829abdff0bb2de",
            "a1a09a9d086e9f40"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "eb83c45d31284787"
            ]
        ]
    },
    {
        "id": "eb83c45d31284787",
        "type": "function",
        "z": "8883b7a3da4b5d71",
        "name": "Apply & Save AO LC Globals",
        "func": "const uiState = global.get('uiState_aolc') || {};\nconst defaultVars = {\n    ao_lc_key_ch2: 200, ao_lc_k_ch2: 1.0, ao_lc_c_ch2: 0.0,\n    ao_lc_key_ch3: 300, ao_lc_k_ch3: 1.0, ao_lc_c_ch3: 0.0,\n    ao_lc_key_ch4: 400, ao_lc_k_ch4: 1.0, ao_lc_c_ch4: 0.0\n};\nconst savableVars = Object.keys(defaultVars);\nlet stateToSave = {};\nlet globalsChanged = false;\n\nfor (const key of savableVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : defaultVars[key];\n    const numValue = Number(valueToSet);\n    if (isNaN(numValue)) {\n        node.warn(`[SAVE_AO_LC] Некорректное значение для ${key} в uiState: ${valueToSet}. Используется значение по умолчанию.`);\n        valueToSet = defaultVars[key];\n    } else {\n        valueToSet = numValue;\n    }\n    stateToSave[key] = valueToSet;\n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChanged = true;\n    }\n}\n\nglobal.set('savedState_aolc', { ...stateToSave });\n\nif (globalsChanged) {\n    node.log(\"[SAVE_AO_LC] Глобальные переменные AO LC обновлены и сохранены в файл.\");\n} else {\n    node.log(\"[SAVE_AO_LC] Глобальные переменные AO LC не требовали обновления перед сохранением.\");\n}\n\nconst filePayload = { payload: stateToSave };\nconst statusUpdateMsg = { payload: \"<font color='green'>Все изменения сохранены</font>\" };\n\nreturn [filePayload, statusUpdateMsg];",
        "outputs": 2,
        "noerr": 0,
        "x": 450,
        "y": 100,
        "wires": [
            [
                "a01ab534440f1566"
            ],
            [
                "d0b65c1f6e206754"
            ]
        ]
    },
    {
        "id": "a01ab534440f1566",
        "type": "json",
        "z": "8883b7a3da4b5d71",
        "name": "Объект в JSON (AO LC)",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "ee374dd60f605682"
            ]
        ]
    },
    {
        "id": "ee374dd60f605682",
        "type": "file",
        "z": "8883b7a3da4b5d71",
        "name": "Сохранить файл AO LC Config",
        "filename": "/home/root/.node-red/save/ao_lc_config.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "e1a8742e1136a2c3"
            ]
        ]
    },
    {
        "id": "e1a8742e1136a2c3",
        "type": "ui_toast",
        "z": "8883b7a3da4b5d71",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение AO LC",
        "name": "Уведомление о сохранении AO LC",
        "x": 500,
        "y": 340,
        "wires": []
    },
    {
        "id": "d0b65c1f6e206754",
        "type": "link out",
        "z": "8883b7a3da4b5d71",
        "name": "link out: aolc-ui-status-after-save",
        "links": [
            "6eb05e5a39b8e49e"
        ],
        "x": 730,
        "y": 100,
        "wires": []
    },
    {
        "id": "6bae0fa8c3832080",
        "type": "inject",
        "z": "5828ca1bfd74414b",
        "name": "Каждые 16c 2c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "16",
        "topic": "periodic_update",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "013cdae4f5d126f0"
            ]
        ]
    },
    {
        "id": "013cdae4f5d126f0",
        "type": "function",
        "z": "5828ca1bfd74414b",
        "name": "Process Analog Outputs (4-20mA)",
        "func": "// --- НАЧАЛО: Секция для твоей таблицы переменных ---\n// Тебе нужно будет заполнить этот объект userVariableMap всеми парами \"Номер: ИмяПеременной\"\n// из твоей таблицы. Номер - это часть NN из ключа CNN.\n// Пример: если ключ 2482, и переменная с номером 482 называется global.x,\n// то запись будет: 482: \"x\"\nconst userVariableMap = {\n    // Пример записей из твоей таблицы (дополни или измени по необходимости):\n    400: \"ai1h1\", 402: \"ai1h2\", 404: \"ai1h3\", 406: \"ai1h4\", 408: \"ai1h5\",\n    410: \"ai2h1\", 412: \"ai2h2\", 414: \"ai2h3\", 416: \"ai2h4\", 418: \"ai2h5\",\n    420: \"ai3h1\", 422: \"ai3h2\", 424: \"ai3h3\", 426: \"ai3h4\", 428: \"ai3h5\",\n    430: \"ai4h1\", 432: \"ai4h2\", 434: \"ai4h3\", 436: \"ai4h4\", 438: \"ai4h5\",\n    440: \"ai5h1\", 442: \"ai5h2\", 444: \"ai5h3\", 446: \"ai5h4\", 448: \"ai5h5\",\n    450: \"ai6h1\", 452: \"ai6h2\", 454: \"ai6h3\", 456: \"ai6h4\", 458: \"ai6h5\",\n    460: \"ai7h1\", 462: \"ai7h2\", 464: \"ai7h3\", 466: \"ai7h4\", 468: \"ai7h5\",\n    470: \"ai8h1\", 472: \"ai8h2\", 474: \"ai8h3\", 476: \"ai8h4\", 478: \"ai8h5\",\n    480: \"nh\",\n    482: \"x\",\n    484: \"ai2t1h1\",\n    486: \"ai2t1t2h1h2\",\n    488: \"ai2t2h2\",\n    490: \"cammkisl\",\n    492: \"camm\",\n    494: \"ckisl\",\n    496: \"cammkisl_smus\",\n    498: \"ph\",\n    500: \"ai3ph5\",\n    502: \"ai3ph5smus\",\n   // 510: \"ai4h5\",       // Входное значение для Redox2\n    510:\"ai4p2h5\",      // Рассчитанный Redox2\n    512:\"ai4p2h5smus\",  // Сглаженный Redox2\n    514: \"pid_valve_command_final\" // Новая переменная от ПИД\n\n\n\n    // ... и так далее для ВСЕХ переменных, которые ты планируешь выводить\n};\n// --- КОНЕЦ: Секция для твоей таблицы переменных ---\n\nconst channelConfigs = {\n    '2': { // Логический канал 2\n        physicalAoIndex: 1, // Номер физического канала на ADAM (1 для AO1, 2 для AO2, и т.д.)\n        keyVar: \"ao_lc_key_ch2\",\n        kVar: \"ao_lc_k_ch2\",\n        cVar: \"ao_lc_c_ch2\",\n        globalCalculatedMaVar: \"ao_lc_calculated_mA_ch2\", // Глобальная переменная для рассчитанного тока\n        uiSourceTopic: \"AO_LC_SourceValue_Ch2_Display\", // Топик для ui_text (исходное значение)\n        uiCurrentTopic: \"AO_LC_Current_Ch2_Display\"  // Топик для ui_text (ток в мА)\n    },\n    '3': { // Логический канал 3\n        physicalAoIndex: 2,\n        keyVar: \"ao_lc_key_ch3\",\n        kVar: \"ao_lc_k_ch3\",\n        cVar: \"ao_lc_c_ch3\",\n        globalCalculatedMaVar: \"ao_lc_calculated_mA_ch3\",\n        uiSourceTopic: \"AO_LC_SourceValue_Ch3_Display\",\n        uiCurrentTopic: \"AO_LC_Current_Ch3_Display\"\n    },\n    '4': { // Логический канал 4\n        physicalAoIndex: 3,\n        keyVar: \"ao_lc_key_ch4\",\n        kVar: \"ao_lc_k_ch4\",\n        cVar: \"ao_lc_c_ch4\",\n        globalCalculatedMaVar: \"ao_lc_calculated_mA_ch4\",\n        uiSourceTopic: \"AO_LC_SourceValue_Ch4_Display\",\n        uiCurrentTopic: \"AO_LC_Current_Ch4_Display\"\n    }\n};\n\n// Инициализация массива выходов (3 для ADAM, 6 для UI)\n// Узел должен иметь 9 выходов\nlet outputs = new Array(9).fill(null);\n\nfor (const logicalChannelStr in channelConfigs) {\n    const config = channelConfigs[logicalChannelStr];\n    const logicalChannelNum = parseInt(logicalChannelStr);\n\n    let dacValue = 0; // Значение по умолчанию для ЦАП (0 соответствует 4 мА для диапазона 4-20мА на ADAM)\n    let sourceValForUI = \"N/A\";\n    let currentMaForUI = \"4.000\"; // Отображаемое значение по умолчанию\n    let calculatedCurrentForGlobal = 4.0; // Числовое значение тока для global переменной\n\n    const keyCNN = global.get(config.keyVar);\n    const K_coeff = global.get(config.kVar);\n    const C_offset = global.get(config.cVar);\n\n    // Проверка, что все конфигурационные параметры являются числами\n    if (typeof keyCNN === 'number' && typeof K_coeff === 'number' && typeof C_offset === 'number' &&\n        !isNaN(keyCNN) && !isNaN(K_coeff) && !isNaN(C_offset)) {\n\n        const cnnStr = String(Math.floor(keyCNN)); // Убираем дробную часть, если есть\n        let keyChannelPart = NaN;\n        let varNumNN = NaN;\n\n        if (cnnStr.length >= 2) { // Минимальная длина ключа CNN (например, C=2, NN=0 -> \"20\")\n            keyChannelPart = parseInt(cnnStr.substring(0, 1), 10);\n            varNumNN = parseInt(cnnStr.substring(1), 10);\n        } else {\n            // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Ключ ${keyCNN} слишком короткий для формата CNN.`);\n        }\n\n        if (keyChannelPart !== logicalChannelNum) {\n            // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Префикс ключа ${keyCNN} (=${keyChannelPart}) не соответствует ожидаемому ${logicalChannelNum}. Вывод будет 4мА.`);\n        } else if (isNaN(varNumNN)) {\n            // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Неверный номер переменной NN из ключа ${keyCNN}. Вывод будет 4мА.`);\n        } else {\n            const sourceGlobalVarName = userVariableMap[varNumNN];\n            if (!sourceGlobalVarName) {\n                // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Номер переменной ${varNumNN} (из ключа ${keyCNN}) не найден в userVariableMap. Вывод будет 4мА.`);\n            } else {\n                const sourceValue = global.get(sourceGlobalVarName);\n                if (typeof sourceValue === 'number' && !isNaN(sourceValue)) {\n                    sourceValForUI = sourceValue.toFixed(3);\n                    let currentValue_mA = sourceValue * K_coeff + C_offset;\n\n                    currentValue_mA = Math.max(4.0, Math.min(20.0, currentValue_mA)); // Ограничение 4-20 мА\n                    calculatedCurrentForGlobal = currentValue_mA;\n                    currentMaForUI = currentValue_mA.toFixed(3);\n\n                    dacValue = Math.round(((currentValue_mA - 4.0) / (20.0 - 4.0)) * 4095.0);\n                    dacValue = Math.max(0, Math.min(4095, dacValue));\n                } else {\n                    // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Значение global.${sourceGlobalVarName} (для NN=${varNumNN}) не число: ${sourceValue}. Вывод будет 4мА.`);\n                }\n            }\n        }\n    } else {\n        // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Неполная или нечисловая конфигурация (ключ: ${keyCNN}, K: ${K_coeff}, C: ${C_offset}). Вывод будет 4мА.`);\n    }\n\n    // Установка новой глобальной переменной для рассчитанного тока\n    global.set(config.globalCalculatedMaVar, calculatedCurrentForGlobal);\n\n    // Выход для модуля ADAM: Индекс 0 для AO1, 1 для AO2, 2 для AO3\n    // (config.physicalAoIndex у нас 1, 2, 3)\n    outputs[config.physicalAoIndex - 1] = { payload: dacValue };\n\n    // Выходы для обновления текстовых полей в UI\n    // Базовый индекс для UI выходов: Канал 2 (uiSourceTopic/uiCurrentTopic) -> выходы 3,4\n    // Канал 3 -> выходы 5,6\n    // Канал 4 -> выходы 7,8\n    let uiOutputBaseIndex = 3 + (logicalChannelNum - 2) * 2;\n    outputs[uiOutputBaseIndex] = { topic: config.uiSourceTopic, payload: sourceValForUI };\n    outputs[uiOutputBaseIndex + 1] = { topic: config.uiCurrentTopic, payload: currentMaForUI };\n}\n\nreturn outputs;",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "a707a35c743d03b2"
            ],
            [
                "e1763f56f97aabe8"
            ],
            [
                "4ec14ed6d57a7802"
            ],
            [
                "ad50a068baa16ad2"
            ],
            [
                "7fc9609dbc784376",
                "281dc55b28b3e355"
            ],
            [
                "78afc4eb6cde355f"
            ],
            [
                "5158a8f924aaa584"
            ],
            [
                "4b97119e33cb5f60"
            ],
            [
                "d95edf1846be4468"
            ]
        ]
    },
    {
        "id": "a707a35c743d03b2",
        "type": "ADAM-write",
        "z": "5828ca1bfd74414b",
        "name": "ADAM AO1 (Лог.Ch2)",
        "host": "192.168.2.2",
        "serialPortCfg": "",
        "unit_id": 1,
        "write_ch": 1,
        "write_ch_type": "write_ao_1",
        "reconnecttimeout": "",
        "Series": "mbtcp",
        "advDevTypeTCP": "ADAM-6224",
        "advDevType": "ADAM-6224",
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "e1763f56f97aabe8",
        "type": "ADAM-write",
        "z": "5828ca1bfd74414b",
        "name": "ADAM AO2 (Лог.Ch3)",
        "host": "192.168.2.2",
        "serialPortCfg": "",
        "unit_id": 1,
        "write_ch": 2,
        "write_ch_type": "write_ao_1",
        "reconnecttimeout": "",
        "Series": "mbtcp",
        "advDevTypeTCP": "ADAM-6224",
        "advDevType": "ADAM-6224",
        "x": 750,
        "y": 120,
        "wires": []
    },
    {
        "id": "4ec14ed6d57a7802",
        "type": "ADAM-write",
        "z": "5828ca1bfd74414b",
        "name": "ADAM AO3 (Лог.Ch4)",
        "host": "192.168.2.2",
        "serialPortCfg": "",
        "unit_id": 1,
        "write_ch": 3,
        "write_ch_type": "write_ao_1",
        "reconnecttimeout": "",
        "Series": "mbtcp",
        "advDevTypeTCP": "ADAM-6224",
        "advDevType": "ADAM-6224",
        "x": 750,
        "y": 180,
        "wires": []
    },
    {
        "id": "ad50a068baa16ad2",
        "type": "link out",
        "z": "5828ca1bfd74414b",
        "name": "To UI Src Ch2",
        "links": [
            "16f4f6685ae0b9c6"
        ],
        "x": 750,
        "y": 260,
        "wires": []
    },
    {
        "id": "7fc9609dbc784376",
        "type": "link out",
        "z": "5828ca1bfd74414b",
        "name": "To UI mA Ch2",
        "links": [
            "ea9fa1ddd87e1a5c"
        ],
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "78afc4eb6cde355f",
        "type": "link out",
        "z": "5828ca1bfd74414b",
        "name": "To UI Src Ch3",
        "links": [
            "22af68f01559c10f"
        ],
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "5158a8f924aaa584",
        "type": "link out",
        "z": "5828ca1bfd74414b",
        "name": "To UI mA Ch3",
        "links": [
            "efa50af7ddd6f7e7"
        ],
        "x": 750,
        "y": 380,
        "wires": []
    },
    {
        "id": "4b97119e33cb5f60",
        "type": "link out",
        "z": "5828ca1bfd74414b",
        "name": "To UI Src Ch4",
        "mode": "link",
        "links": [
            "b44d90118bc716d7"
        ],
        "x": 750,
        "y": 420,
        "wires": []
    },
    {
        "id": "d95edf1846be4468",
        "type": "link out",
        "z": "5828ca1bfd74414b",
        "name": "To UI mA Ch4",
        "links": [
            "8c482dd068c46b49"
        ],
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "281dc55b28b3e355",
        "type": "change",
        "z": "5828ca1bfd74414b",
        "name": "Set Topic for AO LC Ch2 mA",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "PID_Valve_mA_Ch2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 520,
        "wires": [
            [
                "1ac90cc83b2e221f"
            ]
        ]
    },
    {
        "id": "1ac90cc83b2e221f",
        "type": "link out",
        "z": "5828ca1bfd74414b",
        "name": "link out: AO LC Ch2 mA for Chart",
        "mode": "link",
        "links": [
            "f7c919a95fad3274"
        ],
        "x": 860,
        "y": 520,
        "wires": []
    },
    {
        "id": "15c409ad2769fc3b",
        "type": "inject",
        "z": "5ffb7f66ab5e8db1",
        "name": "При старте потока (Redox2) 2.2c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2.2",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "9f641f375736f0da"
            ]
        ]
    },
    {
        "id": "beb56e8d53aea483",
        "type": "link in",
        "z": "5ffb7f66ab5e8db1",
        "name": "link in: trigger-read-redox2",
        "links": [
            "f8b99fa0d916c2b5",
            "4dec1ed11d5393b6"
        ],
        "x": 195,
        "y": 180,
        "wires": [
            [
                "9f641f375736f0da"
            ]
        ]
    },
    {
        "id": "9f641f375736f0da",
        "type": "file in",
        "z": "5ffb7f66ab5e8db1",
        "name": "Прочитать файл Redox2",
        "filename": "/home/root/.node-red/save/redox_variables2.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 510,
        "y": 160,
        "wires": [
            [
                "7f0da779523f952b"
            ]
        ]
    },
    {
        "id": "1e0130861ee61b16",
        "type": "catch",
        "z": "5ffb7f66ab5e8db1",
        "name": "Ошибка чтения файла Redox2",
        "scope": [
            "9f641f375736f0da"
        ],
        "uncaught": false,
        "x": 610,
        "y": 220,
        "wires": [
            [
                "edd41d1a58fd1074"
            ]
        ]
    },
    {
        "id": "7f0da779523f952b",
        "type": "json",
        "z": "5ffb7f66ab5e8db1",
        "name": "Разобрать JSON (Redox2)",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 660,
        "y": 60,
        "wires": [
            [
                "edd41d1a58fd1074"
            ]
        ]
    },
    {
        "id": "edd41d1a58fd1074",
        "type": "function",
        "z": "5ffb7f66ab5e8db1",
        "name": "Init/Read Redox2 Globals",
        "func": "const defaultVars = {\n    ai4p2h5koef: 1.0,\n    ai4p2h5konst: 0.0,\n    window_smusp2: 10,\n    ai4h5: 0.0, // Начальное значение для \"входной\" переменной\n    ai4p2h5: 0.0, // Начальное расчетное значение\n    ai4p2h5smus: null // Начальное сглаженное значение\n};\n\nconst savableVars = [\n    'ai4p2h5koef',\n    'ai4p2h5konst',\n    'window_smusp2'\n];\n\nconst nonSavableVars = [\n    'ai4h5',\n    'ai4p2h5',\n    'ai4p2h5smus'\n];\n\nlet currentGlobalState = {};\nlet source = msg.topic === 'init' ? '[INIT_REDOX2]' : '[READ_BTN_REDOX2]';\n\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && savableVars.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    node.warn(source + \" Параметры Redox2 загружены из файла.\");\n    for (const key of savableVars) {\n        currentGlobalState[key] = msg.payload[key];\n    }\n    for (const key of nonSavableVars) {\n        currentGlobalState[key] = defaultVars[key]; // Несохраняемые инициализируем по умолчанию\n    }\n} else {\n    currentGlobalState = { ...defaultVars };\n    if (msg.error) {\n        node.warn(source + \" Ошибка чтения файла Redox2: \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init'){\n         node.warn(source + \" Файл Redox2 не найден/поврежден/неполный. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл Redox2 не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key in defaultVars) {\n    let currentVal = currentGlobalState.hasOwnProperty(key) ? currentGlobalState[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n\n    if (isNaN(numValue)) {\n        node.warn(`[${source}] Invalid number format for ${key}: ${currentVal}. Using default: ${defaultVars[key]}`);\n        currentVal = defaultVars[key];\n        currentGlobalState[key] = currentVal;\n    } else {\n         currentVal = numValue;\n         if (key === 'window_smusp2') {\n             if (currentVal < 1) currentVal = 1;\n             if (currentVal > 1000) currentVal = 1000;\n             currentVal = Math.round(currentVal); \n         } else if (key === 'ai4p2h5koef' || key === 'ai4p2h5konst') {\n             if (currentVal < -100000) currentVal = -100000;\n             if (currentVal > 100000) currentVal = 100000;\n         }\n         currentGlobalState[key] = currentVal;\n    }\n\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\nglobal.set('redox2_history', []); // Инициализация истории для Redox2\n\nglobal.set('savedState_redox2', { ...currentGlobalState }); \nglobal.set('uiState_redox2', { ...currentGlobalState });\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные Redox2 установлены/обновлены.\");\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные Redox2 уже были установлены.\");\n}\n\nreturn { payload: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 80,
        "wires": [
            [
                "0748f7bf92e300a3"
            ]
        ]
    },
    {
        "id": "0748f7bf92e300a3",
        "type": "link out",
        "z": "5ffb7f66ab5e8db1",
        "name": "link out: trigger-redox2-ui-update",
        "mode": "link",
        "links": [
            "0fe03d9c2bfa6eaf"
        ],
        "x": 1130,
        "y": 140,
        "wires": []
    },
    {
        "id": "0fe03d9c2bfa6eaf",
        "type": "link in",
        "z": "aba43ca783b076c8",
        "name": "link in: trigger-redox2-ui-update",
        "links": [
            "0748f7bf92e300a3",
            "7bc5a3c92d8f0fca",
            "b027ba1c83b149c0",
            "9c5025a984e792f2"
        ],
        "x": 195,
        "y": 220,
        "wires": [
            [
                "5c9fd909e72d8c50"
            ]
        ]
    },
    {
        "id": "5c9fd909e72d8c50",
        "type": "function",
        "z": "aba43ca783b076c8",
        "name": "Update Redox2 UI Elements",
        "func": "const uiState = global.get('uiState_redox2') || {};\nconst savedState = global.get('savedState_redox2') || {};\nconst uiMessages = [];\n\nconst vars_to_update = [\n    'ai4h5', // Входное значение (только чтение)\n    'ai4p2h5koef',\n    'ai4p2h5konst',\n    'window_smusp2',\n    'ai4p2h5', // Расчетное (только чтение)\n    'ai4p2h5smus' // Сглаженное (только чтение)\n];\n\nconst savableVars = [\n    'ai4p2h5koef',\n    'ai4p2h5konst',\n    'window_smusp2'\n];\n\nfor (const key of vars_to_update) {\n    let value;\n    if (key === 'ai4h5') {\n        value = global.get(key) || 0; // ai4h5 берем напрямую из global\n    } else {\n        value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : 0;\n    }\n    let formattedValue = (typeof value === 'number') ? value.toFixed(3) : 'N/A';\n    if (key === 'window_smusp2' && Number.isInteger(value)){\n        formattedValue = value.toString();\n    }\n    uiMessages.push({ payload: formattedValue, topic: key });\n}\n\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    const savedNum = Number(savedState[key]);\n    const uiNum = Number(uiState[key]);\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(3) : null;\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(3) : null;\n    if (savedStr !== uiStr) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\";\nuiMessages.push({ payload: statusMessage });\n\nreturn uiMessages;",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "76bb56ae9d181e04"
            ],
            [
                "12788c440c4350b2"
            ],
            [
                "688cce46697679bd"
            ],
            [
                "6bdd3089c066ce3f"
            ],
            [
                "b1f2a50d45a36202"
            ],
            [
                "d4c0e71e1988229b"
            ],
            [
                "65b1f35f908fc9f2"
            ]
        ]
    },
    {
        "id": "588728108d956473",
        "type": "function",
        "z": "aba43ca783b076c8",
        "name": "Handle Redox2 UI Input",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\nlet uiState = global.get('uiState_redox2') || {};\nconst savedState = global.get('savedState_redox2') || {};\n\nconst savableVars = ['ai4p2h5koef', 'ai4p2h5konst', 'window_smusp2'];\n\nif (savableVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    let clampedValue = newValue;\n    if (varName === 'window_smusp2') {\n        if (clampedValue < 1) clampedValue = 1;\n        if (clampedValue > 1000) clampedValue = 1000;\n        clampedValue = Math.round(clampedValue);\n        if (global.get('window_smusp2') !== clampedValue) {\n            global.set('window_smusp2', clampedValue);\n            global.set('redox2_history', []); \n            node.log(`[UI_REDOX2_INPUT] Global 'window_smusp2' обновлен на: ${clampedValue}. История Redox2 сброшена.`);\n        }\n    } else if (varName === 'ai4p2h5koef' || varName === 'ai4p2h5konst') {\n        if (clampedValue < -100000) clampedValue = -100000;\n        if (clampedValue > 100000) clampedValue = 100000;\n        if (global.get(varName) !== clampedValue) {\n            global.set(varName, clampedValue);\n            node.log(`[UI_REDOX2_INPUT] Global '${varName}' обновлен на: ${clampedValue.toFixed(3)}`);\n        }\n    }\n    uiState[varName] = clampedValue;\n    global.set('uiState_redox2', uiState);\n} else {\n    node.warn(\"[UI_REDOX2_INPUT] Получено некорректное сообщение от UI: \" + JSON.stringify(msg));\n    return null;\n}\n\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    const savedValRaw = savedState.hasOwnProperty(key) ? savedState[key] : (key.includes('koef') ? 1.0 : (key.includes('konst') ? 0.0 : 10));\n    const uiValRaw = uiState.hasOwnProperty(key) ? uiState[key] : (key.includes('koef') ? 1.0 : (key.includes('konst') ? 0.0 : 10));\n    const savedNum = Number(savedValRaw);\n    const uiNum = Number(uiValRaw);\n    let precision = (key === 'window_smusp2') ? 0 : 3;\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(precision) : String(savedValRaw);\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(precision) : String(uiValRaw);\n    if (savedStr !== uiStr) {\n        hasUnsavedChanges = true; break;\n    }\n}\n\nlet statusMessage = hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\";\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "65b1f35f908fc9f2"
            ]
        ]
    },
    {
        "id": "80560c7b19198c44",
        "type": "link in",
        "z": "aba43ca783b076c8",
        "name": "link in: update-redox2-status",
        "links": [
            "b027ba1c83b149c0"
        ],
        "x": 1015,
        "y": 360,
        "wires": [
            [
                "65b1f35f908fc9f2"
            ]
        ]
    },
    {
        "id": "a898dc86123535c5",
        "type": "ui_button",
        "z": "aba43ca783b076c8",
        "name": "Чтение Redox2 из файла",
        "group": "24e8a091d7c97818",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение Redox2",
        "tooltip": "Прочитать параметры Redox2 из файла",
        "icon": "fa-download",
        "payload": "read_request",
        "payloadType": "str",
        "topic": "read_request_redox2",
        "topicType": "str",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "f8b99fa0d916c2b5"
            ]
        ]
    },
    {
        "id": "f8b99fa0d916c2b5",
        "type": "link out",
        "z": "aba43ca783b076c8",
        "name": "link out: trigger-read-redox2",
        "links": [
            "beb56e8d53aea483"
        ],
        "x": 410,
        "y": 60,
        "wires": []
    },
    {
        "id": "d594bd63758b2402",
        "type": "ui_button",
        "z": "aba43ca783b076c8",
        "name": "Запись Redox2 в файл",
        "group": "24e8a091d7c97818",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись Redox2",
        "tooltip": "Применить и сохранить параметры Redox2 в файл",
        "icon": "fa-upload",
        "payload": "write_request",
        "payloadType": "str",
        "topic": "write_request_redox2",
        "topicType": "str",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "7af2d97617fa3bd4"
            ]
        ]
    },
    {
        "id": "7af2d97617fa3bd4",
        "type": "link out",
        "z": "aba43ca783b076c8",
        "name": "link out: trigger-save-redox2",
        "links": [
            "55e7e08f39caf5a7"
        ],
        "x": 410,
        "y": 120,
        "wires": []
    },
    {
        "id": "65b1f35f908fc9f2",
        "type": "ui_text",
        "z": "aba43ca783b076c8",
        "group": "24e8a091d7c97818",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус Redox2",
        "label": "Статус:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 780,
        "y": 480,
        "wires": []
    },
    {
        "id": "76bb56ae9d181e04",
        "type": "ui_text",
        "z": "aba43ca783b076c8",
        "group": "9a3e7a9985889fef",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "ai4h5_display",
        "label": "Вход (ai4h5):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 630,
        "y": 100,
        "wires": []
    },
    {
        "id": "12788c440c4350b2",
        "type": "ui_numeric",
        "z": "aba43ca783b076c8",
        "name": "ai4p2h5koef",
        "label": "Коэфф. (ai4p2h5koef):",
        "group": "9a3e7a9985889fef",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai4p2h5koef",
        "format": "{{msg.payload}}",
        "min": -100000,
        "max": 100000,
        "step": 0.001,
        "x": 660,
        "y": 160,
        "wires": [
            [
                "588728108d956473"
            ]
        ]
    },
    {
        "id": "688cce46697679bd",
        "type": "ui_numeric",
        "z": "aba43ca783b076c8",
        "name": "ai4p2h5konst",
        "label": "Конст. (ai4p2h5konst):",
        "group": "9a3e7a9985889fef",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai4p2h5konst",
        "format": "{{msg.payload}}",
        "min": -100000,
        "max": 100000,
        "step": 0.001,
        "x": 660,
        "y": 200,
        "wires": [
            [
                "588728108d956473"
            ]
        ]
    },
    {
        "id": "6bdd3089c066ce3f",
        "type": "ui_numeric",
        "z": "aba43ca783b076c8",
        "name": "window_smusp2",
        "label": "Окно сглаж. (Redox2) (window_smusp2):",
        "tooltip": "",
        "group": "9a3e7a9985889fef",
        "order": 4,
        "width": 6,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "window_smusp2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 1,
        "max": 1000,
        "step": 1,
        "className": "",
        "x": 690,
        "y": 260,
        "wires": [
            [
                "588728108d956473"
            ]
        ]
    },
    {
        "id": "b1f2a50d45a36202",
        "type": "ui_text",
        "z": "aba43ca783b076c8",
        "group": "9a3e7a9985889fef",
        "order": 5,
        "width": 6,
        "height": 1,
        "name": "ai4p2h5_display",
        "label": "Redox2 (ai4p2h5):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "d4c0e71e1988229b",
        "type": "ui_text",
        "z": "aba43ca783b076c8",
        "group": "9a3e7a9985889fef",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "ai4p2h5smus_display",
        "label": "Redox2 (сглаж.) (ai4p2h5smus):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 700,
        "y": 360,
        "wires": []
    },
    {
        "id": "cf39952949299925",
        "type": "ui_chart",
        "z": "aba43ca783b076c8",
        "name": "График Redox2",
        "group": "ebf6560acee59f7c",
        "order": 1,
        "width": "12",
        "height": "8",
        "label": "Redox Потенциал 2",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff9896",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "x": 410,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "a3a330d2147528d0",
        "type": "link in",
        "z": "aba43ca783b076c8",
        "name": "link in: chart redox2 raw",
        "links": [
            "db189dcbf21b7d37"
        ],
        "x": 215,
        "y": 460,
        "wires": [
            [
                "c7847aee33bfa585"
            ]
        ]
    },
    {
        "id": "39dcc9a4c2cd96cb",
        "type": "link in",
        "z": "aba43ca783b076c8",
        "name": "link in: chart redox2 smus",
        "links": [
            "b97aeed206b29f83"
        ],
        "x": 215,
        "y": 500,
        "wires": [
            [
                "58eede2c1a4156bf"
            ]
        ]
    },
    {
        "id": "c7847aee33bfa585",
        "type": "rbe",
        "z": "aba43ca783b076c8",
        "name": "Filter unchanged redox2_raw",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 375,
        "y": 460,
        "wires": [
            [
                "a056b6235b334d12"
            ]
        ]
    },
    {
        "id": "58eede2c1a4156bf",
        "type": "rbe",
        "z": "aba43ca783b076c8",
        "name": "Filter unchanged redox2_smus",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 375,
        "y": 500,
        "wires": [
            [
                "a056b6235b334d12"
            ]
        ]
    },
    {
        "id": "860ffc0e071f2112",
        "type": "link in",
        "z": "95cb96cbe4bfe7a2",
        "name": "link in: step_complete (From Iteration)",
        "links": [
            "d655c580310a7aac"
        ],
        "x": 155,
        "y": 140,
        "wires": [
            [
                "8103830a63bfad84"
            ]
        ]
    },
    {
        "id": "8103830a63bfad84",
        "type": "function",
        "z": "95cb96cbe4bfe7a2",
        "name": "Calculate Redox2 & Smoothing",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\nif (msg.payload !== 5) { return null; }\nnode.log(\"[REDOX2_CALC] Step 5 detected, calculating Redox2...\");\n\n// Получаем входное значение и параметры\nconst ai4h5 = Number(g(\"ai4h5\") || 0);\nconst koef = Number(g(\"ai4p2h5koef\") || 1);\nconst konst = Number(g(\"ai4p2h5konst\") || 0);\nconst window_smusp2 = Math.max(1, Math.round(Number(g(\"window_smusp2\") || 10)));\nlet history = g('redox2_history') || [];\n\n// Рассчитываем \"сырое\" значение Redox2\nconst new_ai4p2h5 = ai4h5 * koef + konst;\ns(\"ai4p2h5\", new_ai4p2h5);\n\n// --- НАЧАЛО ИЗМЕНЕНИЙ ---\n// ФИЛЬТР ОТ НУЛЯ: Добавляем значение в историю, только если оно не равно нулю.\nif (new_ai4p2h5 !== 0) {\n    history.push(new_ai4p2h5);\n} else {\n    node.warn(`[REDOX2_CALC] Нулевое значение new_ai4p2h5 проигнорировано и не добавлено в историю.`);\n}\n// --- КОНЕЦ ИЗМЕНЕНИЙ ---\n\n// Обрезаем историю\nif (history.length > window_smusp2) { history.shift(); }\ns('redox2_history', history);\n\n// Считаем сумму и среднее\nlet sum = 0;\nfor (let val of history) { sum += val; }\n\n// Если история пуста, сглаженное значение будет null\nconst new_ai4p2h5smus = (history.length > 0) ? (sum / history.length) : null;\ns(\"ai4p2h5smus\", new_ai4p2h5smus);\n\n// Обновляем состояние UI\nlet uiState = g('uiState_redox2') || {};\nuiState['ai4h5'] = ai4h5;\nuiState['ai4p2h5'] = new_ai4p2h5;\nuiState['ai4p2h5smus'] = new_ai4p2h5smus;\ns('uiState_redox2', uiState);\n\nif (new_ai4p2h5smus !== null) {\n    node.log(`[REDOX2_CALC] Calculated: ai4p2h5=${new_ai4p2h5.toFixed(3)}, ai4p2h5smus=${new_ai4p2h5smus.toFixed(3)} based on ${history.length} values.`);\n}\n\n// Готовим сообщения для выходов\nconst msg_trigger_ui_update = { payload: true };\nconst msg_chart_raw = { topic: \"ai4p2h5\", payload: new_ai4p2h5 };\nconst msg_chart_smus = { topic: \"ai4p2h5smus\", payload: new_ai4p2h5smus };\n\nreturn [msg_trigger_ui_update, msg_chart_raw, msg_chart_smus];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "7bc5a3c92d8f0fca"
            ],
            [
                "db189dcbf21b7d37"
            ],
            [
                "b97aeed206b29f83"
            ]
        ]
    },
    {
        "id": "7bc5a3c92d8f0fca",
        "type": "link out",
        "z": "95cb96cbe4bfe7a2",
        "name": "link out: trigger redox2 ui",
        "links": [
            "0fe03d9c2bfa6eaf"
        ],
        "x": 630,
        "y": 100,
        "wires": []
    },
    {
        "id": "db189dcbf21b7d37",
        "type": "link out",
        "z": "95cb96cbe4bfe7a2",
        "name": "link out: chart redox2 raw",
        "links": [
            "a3a330d2147528d0"
        ],
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "b97aeed206b29f83",
        "type": "link out",
        "z": "95cb96cbe4bfe7a2",
        "name": "link out: chart redox2 smus",
        "links": [
            "39dcc9a4c2cd96cb"
        ],
        "x": 630,
        "y": 180,
        "wires": []
    },
    {
        "id": "55e7e08f39caf5a7",
        "type": "link in",
        "z": "6c25c64f47ba7aa8",
        "name": "link in: trigger-save-redox2",
        "links": [
            "7af2d97617fa3bd4",
            "267d7838652fde3e"
        ],
        "x": 195,
        "y": 100,
        "wires": [
            [
                "9eca1508f3e45f1e"
            ]
        ]
    },
    {
        "id": "9eca1508f3e45f1e",
        "type": "function",
        "z": "6c25c64f47ba7aa8",
        "name": "Apply & Save Redox2",
        "func": "const uiState = global.get('uiState_redox2') || {};\nconst defaultVars = { ai4p2h5koef: 1.0, ai4p2h5konst: 0.0, window_smusp2: 10 };\nconst savableVars = ['ai4p2h5koef', 'ai4p2h5konst', 'window_smusp2'];\nlet stateToSave = {};\nlet globalsChanged = false;\n\nfor (const key of savableVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : defaultVars[key];\n    const numValue = Number(valueToSet);\n    if (isNaN(numValue)) {\n        node.warn(`[REDOX2_SAVE] Invalid UI value for ${key}: ${valueToSet}. Using default.`);\n        valueToSet = defaultVars[key];\n    } else {\n        valueToSet = numValue;\n        if (key === 'window_smusp2') {\n             if (valueToSet < 1) valueToSet = 1; if (valueToSet > 1000) valueToSet = 1000; valueToSet = Math.round(valueToSet);\n        } else {\n             if (valueToSet < -100000) valueToSet = -100000; if (valueToSet > 100000) valueToSet = 100000;\n        }\n    }\n    stateToSave[key] = valueToSet;\n    if (global.get(key) !== valueToSet) { global.set(key, valueToSet); globalsChanged = true; }\n    uiState[key] = valueToSet; // Update uiState with validated/clamped value\n}\n\nlet fullSavedState = { ...(global.get('savedState_redox2') || {}), ...stateToSave };\nconst nonSavableVars = ['ai4h5', 'ai4p2h5', 'ai4p2h5smus'];\nfor(const key of nonSavableVars) { fullSavedState[key] = global.get(key) || defaultVars[key]; }\nglobal.set('savedState_redox2', fullSavedState);\nglobal.set('uiState_redox2', { ...uiState, ...fullSavedState});\n\nif (globalsChanged) { node.log(\"[WRITE_BTN_REDOX2] Параметры Redox2 обновлены и сохранены.\"); }\nelse { node.log(\"[WRITE_BTN_REDOX2] Параметры Redox2 не требовали обновления.\"); }\n\nconst filePayload = { payload: stateToSave };\nconst statusMessage = { payload: \"<font color='green'>Параметры Redox2 сохранены</font>\" };\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "95bb3c79b8c7da90"
            ],
            [
                "b027ba1c83b149c0"
            ]
        ]
    },
    {
        "id": "95bb3c79b8c7da90",
        "type": "json",
        "z": "6c25c64f47ba7aa8",
        "name": "Объект в JSON (Redox2)",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "e65ad4bc7701451b"
            ]
        ]
    },
    {
        "id": "e65ad4bc7701451b",
        "type": "file",
        "z": "6c25c64f47ba7aa8",
        "name": "Сохранить файл Redox2",
        "filename": "/home/root/.node-red/save/redox_variables2.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "10efe5f86a130d48"
            ]
        ]
    },
    {
        "id": "10efe5f86a130d48",
        "type": "ui_toast",
        "z": "6c25c64f47ba7aa8",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение Redox2",
        "name": "Уведомление Redox2",
        "x": 460,
        "y": 340,
        "wires": []
    },
    {
        "id": "b027ba1c83b149c0",
        "type": "link out",
        "z": "6c25c64f47ba7aa8",
        "name": "link out: update-redox2-status",
        "links": [
            "80560c7b19198c44"
        ],
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "6ec2a98235dc545a",
        "type": "modbus-server",
        "z": "23e887414e2dc8e7",
        "name": "ModbusTCPServerForWeintek",
        "logEnabled": true,
        "hostname": "192.168.0.214",
        "serverPort": "502",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": "0",
        "holdingBufferSize": "1200",
        "inputBufferSize": "0",
        "discreteBufferSize": "0",
        "showErrors": true,
        "x": 570,
        "y": 80,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "5e3a19652b8b6fc4",
        "type": "inject",
        "z": "23e887414e2dc8e7",
        "name": "Инициализация HR Буфера 1c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "97ff9bbee0ca1205"
            ]
        ]
    },
    {
        "id": "97ff9bbee0ca1205",
        "type": "function",
        "z": "23e887414e2dc8e7",
        "name": "Создание и инициализация HR 1200",
        "func": "const hrContextVar = 'holdingregisters';\nconst numHoldingRegisters = 1200; // Увеличено для покрытия адресов до 710+ \n\nlet hrBuffer = flow.get(hrContextVar) || Buffer.alloc(numHoldingRegisters * 2);\n\nflow.set(hrContextVar, hrBuffer);\nnode.status({text: `Initialized ${numHoldingRegisters} holding registers`});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "35e05f59dd733da2",
        "type": "inject",
        "z": "23e887414e2dc8e7",
        "name": "Цикл обновления Global->Modbus (10c 2сек)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "4dfd28aef8fc45a8"
            ]
        ]
    },
    {
        "id": "5d793d6eda157a6c",
        "type": "function",
        "z": "23e887414e2dc8e7",
        "name": "Обновление Global в Modbus HR (Основные адреса)",
        "func": "// Карта переменных для чтения HMI (основные адреса)\n\n// Карта переменных для чтения HMI (основные адреса)\nconst variableMap = [ // Расчетные koef0-7, konst0-7\n    { globalName: \"koef0\", modbusAddress: 0 }, { globalName: \"koef1\", modbusAddress: 2 },\n    { globalName: \"koef2\", modbusAddress: 4 }, { globalName: \"koef3\", modbusAddress: 6 },\n    { globalName: \"koef4\", modbusAddress: 8 }, { globalName: \"koef5\", modbusAddress: 10 },\n    { globalName: \"koef6\", modbusAddress: 12 }, { globalName: \"koef7\", modbusAddress: 14 },\n    { globalName: \"konst0\", modbusAddress: 16 }, { globalName: \"konst1\", modbusAddress: 18 },\n    { globalName: \"konst2\", modbusAddress: 20 }, { globalName: \"konst3\", modbusAddress: 22 },\n    { globalName: \"konst4\", modbusAddress: 24 }, { globalName: \"konst5\", modbusAddress: 26 },\n    { globalName: \"konst6\", modbusAddress: 28 }, { globalName: \"konst7\", modbusAddress: 30 },\n    // Параметры итераций n1-pk5\n    { globalName: \"n1\", modbusAddress: 32 }, { globalName: \"k1\", modbusAddress: 42 },\n    { globalName: \"h1\", modbusAddress: 52 }, { globalName: \"p1\", modbusAddress: 62 },\n    { globalName: \"pk1\", modbusAddress: 72 }, { globalName: \"n2\", modbusAddress: 34 },\n    { globalName: \"k2\", modbusAddress: 44 }, { globalName: \"h2\", modbusAddress: 54 },\n    { globalName: \"p2\", modbusAddress: 64 }, { globalName: \"pk2\", modbusAddress: 74 },\n    { globalName: \"n3\", modbusAddress: 36 }, { globalName: \"k3\", modbusAddress: 46 },\n    { globalName: \"h3\", modbusAddress: 56 }, { globalName: \"p3\", modbusAddress: 66 },\n    { globalName: \"pk3\", modbusAddress: 76 }, { globalName: \"n4\", modbusAddress: 38 },\n    { globalName: \"k4\", modbusAddress: 48 }, { globalName: \"h4\", modbusAddress: 58 },\n    { globalName: \"p4\", modbusAddress: 68 }, { globalName: \"pk4\", modbusAddress: 78 },\n    { globalName: \"n5\", modbusAddress: 40 }, { globalName: \"k5\", modbusAddress: 50 },\n    { globalName: \"h5\", modbusAddress: 60 }, { globalName: \"p5\", modbusAddress: 70 },\n    { globalName: \"pk5\", modbusAddress: 80 },\n    // Параметры PH\n    { globalName: \"ai2t1h1koef1\", modbusAddress: 82 }, { globalName: \"ai2t1h1konst1\", modbusAddress: 84 },\n    { globalName: \"ai2t1t2h1h2koef\", modbusAddress: 86 }, { globalName: \"ai2t1t2h1h2konst\", modbusAddress: 88 },\n    { globalName: \"ai2t2h2koef2\", modbusAddress: 90 }, { globalName: \"ai2t2h2konst2\", modbusAddress: 92 },\n    { globalName: \"phkonstamm\", modbusAddress: 94 }, { globalName: \"phkonstkisl\", modbusAddress: 96 },\n    { globalName: \"phminamm\", modbusAddress: 98 }, { globalName: \"phminkisl\", modbusAddress: 100 },\n    { globalName: \"phneitr\", modbusAddress: 102 },\n    // Параметры Redox\n    { globalName: \"ai3ph5koef\", modbusAddress: 104 }, { globalName: \"ai3ph5konst\", modbusAddress: 106 },\n    // Окна сглаживания\n    { globalName: \"window_smus\", modbusAddress: 108 }, // для PH/концентраций\n    { globalName: \"window_smusp\", modbusAddress: 110 }, // для Redox (с 'p')\n    // Уставки AO LC Config\n    { globalName: \"ao_lc_key_ch2\", modbusAddress: 112 },\n    { globalName: \"ao_lc_k_ch2\", modbusAddress: 114 },\n    { globalName: \"ao_lc_c_ch2\", modbusAddress: 116 },\n    { globalName: \"ao_lc_key_ch3\", modbusAddress: 118 },\n    { globalName: \"ao_lc_k_ch3\", modbusAddress: 120 },\n    { globalName: \"ao_lc_c_ch3\", modbusAddress: 122 },\n    { globalName: \"ao_lc_key_ch4\", modbusAddress: 124 },\n    { globalName: \"ao_lc_k_ch4\", modbusAddress: 126 },\n    { globalName: \"ao_lc_c_ch4\", modbusAddress: 128 },\n    // Уставки Redox2\n    { globalName: \"ai4p2h5koef\", modbusAddress: 130 },\n    { globalName: \"ai4p2h5konst\", modbusAddress: 132 },\n    { globalName: \"window_smusp2\", modbusAddress: 134 },\n    // --- ДОБАВЛЕНО: Уставки и параметры ПИД-регулятора ---\n    { globalName: \"pid_setpoint\", modbusAddress: 136 },\n    { globalName: \"pid_prop_band\", modbusAddress: 138 },\n    { globalName: \"pid_t_integral\", modbusAddress: 140 },\n    { globalName: \"pid_t_derivative\", modbusAddress: 142 },\n    { globalName: \"pid_max_interval\", modbusAddress: 144 },\n    { globalName: \"pid_smooth_factor\", modbusAddress: 146 },\n    { globalName: \"pid_enable\", modbusAddress: 148 },          // 0 или 1\n    { globalName: \"pid_disabled_op\", modbusAddress: 150 },\n    { globalName: \"pid_pv_select_key\", modbusAddress: 152 },  // Код выбранной PV\n    { globalName: \"pid_valve_is_NC\", modbusAddress: 154 },    // 0-NO, 1-NC\n    // Версия проекта (float DDMMYYYYHHmm)\n    { globalName: \"VER\", modbusAddress: 156 },\n\n    // --- Измеренные/Расчетные значения (Начинаются с адреса 400) ---\n    // Измеренные значения aiXhY\n    { globalName: \"ai1h1\", modbusAddress: 400 }, { globalName: \"ai1h2\", modbusAddress: 402 },\n    { globalName: \"ai1h3\", modbusAddress: 404 }, { globalName: \"ai1h4\", modbusAddress: 406 },\n    { globalName: \"ai1h5\", modbusAddress: 408 },\n    { globalName: \"ai2h1\", modbusAddress: 410 }, { globalName: \"ai2h2\", modbusAddress: 412 },\n    { globalName: \"ai2h3\", modbusAddress: 414 }, { globalName: \"ai2h4\", modbusAddress: 416 },\n    { globalName: \"ai2h5\", modbusAddress: 418 },\n    { globalName: \"ai3h1\", modbusAddress: 420 }, { globalName: \"ai3h2\", modbusAddress: 422 },\n    { globalName: \"ai3h3\", modbusAddress: 424 }, { globalName: \"ai3h4\", modbusAddress: 426 },\n    { globalName: \"ai3h5\", modbusAddress: 428 }, // Вход для Redox 1\n    { globalName: \"ai4h1\", modbusAddress: 430 }, { globalName: \"ai4h2\", modbusAddress: 432 },\n    { globalName: \"ai4h3\", modbusAddress: 434 }, { globalName: \"ai4h4\", modbusAddress: 436 },\n    { globalName: \"ai4h5\", modbusAddress: 438 }, // Вход для Redox 2\n    { globalName: \"ai5h1\", modbusAddress: 440 }, { globalName: \"ai5h2\", modbusAddress: 442 },\n    { globalName: \"ai5h3\", modbusAddress: 444 }, { globalName: \"ai5h4\", modbusAddress: 446 },\n    { globalName: \"ai5h5\", modbusAddress: 448 },\n    { globalName: \"ai6h1\", modbusAddress: 450 }, { globalName: \"ai6h2\", modbusAddress: 452 },\n    { globalName: \"ai6h3\", modbusAddress: 454 }, { globalName: \"ai6h4\", modbusAddress: 456 },\n    { globalName: \"ai6h5\", modbusAddress: 458 },\n    { globalName: \"ai7h1\", modbusAddress: 460 }, { globalName: \"ai7h2\", modbusAddress: 462 },\n    { globalName: \"ai7h3\", modbusAddress: 464 }, { globalName: \"ai7h4\", modbusAddress: 466 },\n    { globalName: \"ai7h5\", modbusAddress: 468 },\n    { globalName: \"ai8h1\", modbusAddress: 470 }, { globalName: \"ai8h2\", modbusAddress: 472 },\n    { globalName: \"ai8h3\", modbusAddress: 474 }, { globalName: \"ai8h4\", modbusAddress: 476 },\n    { globalName: \"ai8h5\", modbusAddress: 478 },\n    // Другие переменные итерации\n    { globalName: \"nh\", modbusAddress: 480 },\n    { globalName: \"x\", modbusAddress: 482 },\n\n    { globalName: \"ai2t1h1\", modbusAddress: 484 },\n    { globalName: \"ai2t1t2h1h2\", modbusAddress: 486 },\n    { globalName: \"ai2t2h2\", modbusAddress: 488 },\n    \n    // Рассчитанные значения PH и концентраций\n    { globalName: \"cammkisl\", modbusAddress: 490 },\n    { globalName: \"camm\", modbusAddress: 492 },\n    { globalName: \"ckisl\", modbusAddress: 494 },\n    { globalName: \"cammkisl_smus\", modbusAddress: 496 },\n    { globalName: \"ph\", modbusAddress: 498 },\n    // Рассчитанные Redox\n    { globalName: \"ai3ph5\", modbusAddress: 500 },\n    { globalName: \"ai3ph5smus\", modbusAddress: 502 },\n    // Рассчитанные токи AO LC\n    { globalName: \"ao_lc_calculated_mA_ch2\", modbusAddress: 504 },\n    { globalName: \"ao_lc_calculated_mA_ch3\", modbusAddress: 506 },\n    { globalName: \"ao_lc_calculated_mA_ch4\", modbusAddress: 508 },\n    // Рассчитанные Redox2\n    { globalName: \"ai4p2h5\", modbusAddress: 510 },\n    { globalName: \"ai4p2h5smus\", modbusAddress: 512 },\n    // --- ДОБАВЛЕНО: Измеряемые/расчетные значения ПИД ---\n    { globalName: \"pid_current_pv_value\", modbusAddress: 514 },\n    { globalName: \"pid_output_actual\", modbusAddress: 516 },\n    { globalName: \"pid_valve_command_final\", modbusAddress: 518 },\n     { globalName: \"pid_integral_persist\", modbusAddress: 520}// Сохраненный интеграл\n];\n\n\n\nlet updatesMade = 0;\nlet errorsCount = 0;\n\nvariableMap.forEach(item => {\n    const floatValue = global.get(item.globalName);\n    let msgForServer = {}; \n\n    if (typeof floatValue === 'number' && !isNaN(floatValue)) {\n        const byteBuffer = Buffer.alloc(4);\n        byteBuffer.writeFloatBE(floatValue, 0); \n        const word_AB = byteBuffer.readUInt16BE(0);\n        const word_CD = byteBuffer.readUInt16BE(2);\n        byteBuffer.writeUInt16BE(word_CD, 0);\n        byteBuffer.writeUInt16BE(word_AB, 2);\n        const valueAsByteArray_CDAB = Array.from(byteBuffer);\n\n        msgForServer.payload = {\n            'value': valueAsByteArray_CDAB,\n            'register': 'holding',\n            'address': item.modbusAddress,\n            'disableMsgOutput': 1\n        };\n        node.send(msgForServer);\n        updatesMade++;\n    } else {\n        node.warn(`Не удалось получить числовое значение для global.${item.globalName}. Получено: ${JSON.stringify(floatValue)}`);\n        errorsCount++;\n    }\n});\n\nif (errorsCount > 0) {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Обновлено ${updatesMade} из ${variableMap.length} (основные). Ошибок чтения global: ${errorsCount}` });\n} else {\n    node.status({ fill: \"green\", shape: \"dot\", text: `Обновлено ${updatesMade} переменных в Modbus (основные)` });\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 240,
        "wires": [
            [
                "6ec2a98235dc545a"
            ]
        ]
    },
    {
        "id": "544220689a5df86f",
        "type": "split",
        "z": "23e887414e2dc8e7",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "x": 830,
        "y": 60,
        "wires": [
            [
                "6286e1b7a2141501"
            ]
        ]
    },
    {
        "id": "6286e1b7a2141501",
        "type": "modbus-flex-write",
        "z": "23e887414e2dc8e7",
        "name": "Acknowledge New Setpoint",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "eb35cce35ef3368f",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1060,
        "y": 60,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "73cbc430fc56f2ec",
        "type": "function",
        "z": "23e887414e2dc8e7",
        "name": "Process New Setpoints & Ack",
        "func": "// Карта переменных-уставок, которые можно изменять с HMI\nconst setpointsToManage = [\n    { globalName: \"koef0\", readAddr: 0, newWriteAddr: 1000 },\n    { globalName: \"koef1\", readAddr: 2, newWriteAddr: 1002 },\n    { globalName: \"koef2\", readAddr: 4, newWriteAddr: 1004 },\n    { globalName: \"koef3\", readAddr: 6, newWriteAddr: 1006 },\n    { globalName: \"koef4\", readAddr: 8, newWriteAddr: 1008 },\n    { globalName: \"koef5\", readAddr: 10, newWriteAddr: 1010 },\n    { globalName: \"koef6\", readAddr: 12, newWriteAddr: 1012 },\n    { globalName: \"koef7\", readAddr: 14, newWriteAddr: 1014 },\n    { globalName: \"konst0\", readAddr: 16, newWriteAddr: 1016 },\n    { globalName: \"konst1\", readAddr: 18, newWriteAddr: 1018 },\n    { globalName: \"konst2\", readAddr: 20, newWriteAddr: 1020 },\n    { globalName: \"konst3\", readAddr: 22, newWriteAddr: 1022 },\n    { globalName: \"konst4\", readAddr: 24, newWriteAddr: 1024 },\n    { globalName: \"konst5\", readAddr: 26, newWriteAddr: 1026 },\n    { globalName: \"konst6\", readAddr: 28, newWriteAddr: 1028 },\n    { globalName: \"konst7\", readAddr: 30, newWriteAddr: 1030 },\n    { globalName: \"n1\", readAddr: 32, newWriteAddr: 1032 },\n    { globalName: \"n2\", readAddr: 34, newWriteAddr: 1034 },\n    { globalName: \"n3\", readAddr: 36, newWriteAddr: 1036 },\n    { globalName: \"n4\", readAddr: 38, newWriteAddr: 1038 },\n    { globalName: \"n5\", readAddr: 40, newWriteAddr: 1040 },\n    { globalName: \"k1\", readAddr: 42, newWriteAddr: 1042 },\n    { globalName: \"k2\", readAddr: 44, newWriteAddr: 1044 },\n    { globalName: \"k3\", readAddr: 46, newWriteAddr: 1046 },\n    { globalName: \"k4\", readAddr: 48, newWriteAddr: 1048 },\n    { globalName: \"k5\", readAddr: 50, newWriteAddr: 1050 },\n    { globalName: \"h1\", readAddr: 52, newWriteAddr: 1052 },\n    { globalName: \"h2\", readAddr: 54, newWriteAddr: 1054 },\n    { globalName: \"h3\", readAddr: 56, newWriteAddr: 1056 },\n    { globalName: \"h4\", readAddr: 58, newWriteAddr: 1058 },\n    { globalName: \"h5\", readAddr: 60, newWriteAddr: 1060 },\n    { globalName: \"p1\", readAddr: 62, newWriteAddr: 1062 },\n    { globalName: \"p2\", readAddr: 64, newWriteAddr: 1064 },\n    { globalName: \"p3\", readAddr: 66, newWriteAddr: 1066 },\n    { globalName: \"p4\", readAddr: 68, newWriteAddr: 1068 },\n    { globalName: \"p5\", readAddr: 70, newWriteAddr: 1070 },\n    { globalName: \"pk1\", readAddr: 72, newWriteAddr: 1072 },\n    { globalName: \"pk2\", readAddr: 74, newWriteAddr: 1074 },\n    { globalName: \"pk3\", readAddr: 76, newWriteAddr: 1076 },\n    { globalName: \"pk4\", readAddr: 78, newWriteAddr: 1078 },\n    { globalName: \"pk5\", readAddr: 80, newWriteAddr: 1080 },\n    { globalName: \"ai2t1h1koef1\", readAddr: 82, newWriteAddr: 1082 },\n    { globalName: \"ai2t1h1konst1\", readAddr: 84, newWriteAddr: 1084 },\n    { globalName: \"ai2t1t2h1h2koef\", readAddr: 86, newWriteAddr: 1086 },\n    { globalName: \"ai2t1t2h1h2konst\", readAddr: 88, newWriteAddr: 1088 },\n    { globalName: \"ai2t2h2koef2\", readAddr: 90, newWriteAddr: 1090 },\n    { globalName: \"ai2t2h2konst2\", readAddr: 92, newWriteAddr: 1092 },\n    { globalName: \"phkonstamm\", readAddr: 94, newWriteAddr: 1094 },\n    { globalName: \"phkonstkisl\", readAddr: 96, newWriteAddr: 1096 },\n    { globalName: \"phminamm\", readAddr: 98, newWriteAddr: 1098 },\n    { globalName: \"phminkisl\", readAddr: 100, newWriteAddr: 1100 },\n    { globalName: \"phneitr\", readAddr: 102, newWriteAddr: 1102 },\n    { globalName: \"ai3ph5koef\", readAddr: 104, newWriteAddr: 1104 },\n    { globalName: \"ai3ph5konst\", readAddr: 106, newWriteAddr: 1106 },\n    { globalName: \"window_smus\", readAddr: 108, newWriteAddr: 1108 },\n    { globalName: \"window_smusp\", readAddr: 110, newWriteAddr: 1110 },\n    { globalName: \"ao_lc_key_ch2\", readAddr: 112, newWriteAddr: 1112 },\n    { globalName: \"ao_lc_k_ch2\", readAddr: 114, newWriteAddr: 1114 },\n    { globalName: \"ao_lc_c_ch2\", readAddr: 116, newWriteAddr: 1116 },\n    { globalName: \"ao_lc_key_ch3\", readAddr: 118, newWriteAddr: 1118 },\n    { globalName: \"ao_lc_k_ch3\", readAddr: 120, newWriteAddr: 1120 },\n    { globalName: \"ao_lc_c_ch3\", readAddr: 122, newWriteAddr: 1122 },\n    { globalName: \"ao_lc_key_ch4\", readAddr: 124, newWriteAddr: 1124 },\n    { globalName: \"ao_lc_k_ch4\", readAddr: 126, newWriteAddr: 1126 },\n    { globalName: \"ao_lc_c_ch4\", readAddr: 128, newWriteAddr: 1128 },\n    { globalName: \"ai4p2h5koef\", readAddr: 130, newWriteAddr: 1130 },\n    { globalName: \"ai4p2h5konst\", readAddr: 132, newWriteAddr: 1132 },\n    { globalName: \"window_smusp2\", readAddr: 134, newWriteAddr: 1134 },\n    { globalName: \"pid_setpoint\", readAddr: 136, newWriteAddr: 1136 },\n    { globalName: \"pid_prop_band\", readAddr: 138, newWriteAddr: 1138 },\n    { globalName: \"pid_t_integral\", readAddr: 140, newWriteAddr: 1140 },\n    { globalName: \"pid_t_derivative\", readAddr: 142, newWriteAddr: 1142 },\n    { globalName: \"pid_max_interval\", readAddr: 144, newWriteAddr: 1144 },\n    { globalName: \"pid_smooth_factor\", readAddr: 146, newWriteAddr: 1146 },\n    { globalName: \"pid_enable\", readAddr: 148, newWriteAddr: 1148 },\n    { globalName: \"pid_disabled_op\", readAddr: 150, newWriteAddr: 1150 },\n    { globalName: \"pid_pv_select_key\", readAddr: 152, newWriteAddr: 1152 },\n    { globalName: \"pid_valve_is_NC\", readAddr: 154, newWriteAddr: 1154 }\n];\n\nconst polledRegisters = msg.payload;\nlet messagesToModbusServer = [];\nlet changesMadeCount = 0;\n\nlet triggerAllVarsUI = false; let triggerCalcVarsUI = false; let triggerPhVarsUI = false;\nlet triggerRedoxVarsUI = false; let triggerAOLCVarsUI = false; let triggerRedox2VarsUI = false;\nlet triggerPidConfigUI = false;\n\nlet triggerAllVarsSave = false; let triggerCalcVarsSave = false; let triggerPhVarsSave = false;\nlet triggerRedoxVarsSave = false; let triggerAOLCVarsSave = false; let triggerRedox2VarsSave = false;\nlet triggerPidConfigSave = false;\n\nif (!Array.isArray(polledRegisters) || polledRegisters.length < 156) {\n    node.warn(`Опрос \\\"Новых уставок\\\": получено недостаточно регистров. Ожидается >= 156, получено ${polledRegisters.length}.`);\n    return null;\n}\n\nfor (let i = 0; i < setpointsToManage.length; i++) {\n    const sp = setpointsToManage[i];\n    const contextKeyLastPolled = `last_polled_val_at_${sp.newWriteAddr}`;\n    const baseIndexInPolledData = sp.newWriteAddr - 1000; // Используем базовый адрес 1000 для уставок\n\n    if (baseIndexInPolledData < 0 || (baseIndexInPolledData + 1) >= polledRegisters.length) {\n        node.warn(`Ошибка индексации для ${sp.globalName} (newWriteAddr: ${sp.newWriteAddr}, baseIndex: ${baseIndexInPolledData}). Длина polledRegisters: ${polledRegisters.length}`);\n        continue;\n    }\n\n    const word_CD_fromPoll = polledRegisters[baseIndexInPolledData];\n    const word_AB_fromPoll = polledRegisters[baseIndexInPolledData + 1];\n\n    const receivedBufferCDAB = Buffer.alloc(4);\n    receivedBufferCDAB.writeUInt16BE(word_CD_fromPoll, 0);\n    receivedBufferCDAB.writeUInt16BE(word_AB_fromPoll, 2);\n\n    const reorderedBufferABCD = Buffer.alloc(4);\n    reorderedBufferABCD.writeUInt16BE(word_AB_fromPoll, 0);\n    reorderedBufferABCD.writeUInt16BE(word_CD_fromPoll, 2);\n    const newDesiredValueFloat = reorderedBufferABCD.readFloatBE(0);\n\n    let currentGlobalValue = global.get(sp.globalName);\n    if (typeof currentGlobalValue !== 'number' || isNaN(currentGlobalValue)) {\n        if (['pid_enable', 'pid_valve_is_NC', 'pid_pv_select_key'].includes(sp.globalName)) {\n            currentGlobalValue = 0;\n        } else {\n            currentGlobalValue = 0.0;\n        }\n    }\n\n    let lastPolledValueFloat = flow.get(contextKeyLastPolled);\n    if (typeof lastPolledValueFloat !== 'number' || isNaN(lastPolledValueFloat)) {\n        lastPolledValueFloat = newDesiredValueFloat;\n        flow.set(contextKeyLastPolled, lastPolledValueFloat);\n    }\n\n    if (Math.abs(newDesiredValueFloat - lastPolledValueFloat) > 0.00001) {\n        node.log(`Обнаружено новое значение ${newDesiredValueFloat.toFixed(3)} для ${sp.globalName} (адрес ${sp.newWriteAddr}). Предыдущее опрошенное: ${lastPolledValueFloat.toFixed(3)}`);\n\n        let valueToSetGlobal = newDesiredValueFloat;\n        if (['pid_enable', 'pid_valve_is_NC'].includes(sp.globalName)) {\n            valueToSetGlobal = Math.round(newDesiredValueFloat) === 1 ? 1 : 0;\n        } else if (['pid_t_integral', 'pid_t_derivative', 'pid_max_interval', 'pid_pv_select_key', 'window_smus', 'window_smusp', 'window_smusp2'].includes(sp.globalName) || sp.globalName.startsWith('ao_lc_key_ch')) {\n            valueToSetGlobal = Math.round(newDesiredValueFloat);\n        }\n\n        if (Math.abs(valueToSetGlobal - currentGlobalValue) > 0.00001 || currentGlobalValue !== valueToSetGlobal) {\n            global.set(sp.globalName, valueToSetGlobal);\n            node.log(`Глобальная переменная ${sp.globalName} обновлена на: ${valueToSetGlobal}`);\n            changesMadeCount++;\n\n            // --- ДОБАВЛЕНО: Логика сброса истории при изменении окна сглаживания с HMI ---\n            if (sp.globalName === 'window_smusp') {\n                global.set('redox_history', []);\n                node.log(`[HMI_INPUT] История Redox (redox_history) сброшена.`);\n            } else if (sp.globalName === 'window_smusp2') {\n                global.set('redox2_history', []);\n                node.log(`[HMI_INPUT] История Redox2 (redox2_history) сброшена.`);\n            } else if (sp.globalName === 'window_smus') {\n                global.set('cammkisl_history', []);\n                node.log(`[HMI_INPUT] История PH/концентраций (cammkisl_history) сброшена.`);\n            }\n            // --- КОНЕЦ ДОБАВЛЕННОГО БЛОКА ---\n\n            let uiStateAll = global.get('uiStateAll') || {};\n            let uiStateCalc = global.get('uiStateCalc') || {};\n            let uiStatePh = global.get('uiState_ph') || {};\n            let uiStateRedox = global.get('uiState_redox') || {};\n            let uiStateAOLC = global.get('uiState_aolc') || {};\n            let uiStateRedox2 = global.get('uiState_redox2') || {};\n            let uiStatePidConfig = global.get('uiState_pidconfig') || {};\n\n            if (['n1', 'k1', 'h1', 'p1', 'pk1', 'n2', 'k2', 'h2', 'p2', 'pk2', 'n3', 'k3', 'h3', 'p3', 'pk3', 'n4', 'k4', 'h4', 'p4', 'pk4', 'n5', 'k5', 'h5', 'p5', 'pk5'].includes(sp.globalName)) {\n                triggerAllVarsUI = true; uiStateAll[sp.globalName] = valueToSetGlobal; global.set('uiStateAll', uiStateAll); triggerAllVarsSave = true;\n            } else if (['koef0', 'koef1', 'koef2', 'koef3', 'koef4', 'koef5', 'koef6', 'koef7', 'konst0', 'konst1', 'konst2', 'konst3', 'konst4', 'konst5', 'konst6', 'konst7'].includes(sp.globalName)) {\n                triggerCalcVarsUI = true; uiStateCalc[sp.globalName] = valueToSetGlobal; global.set('uiStateCalc', uiStateCalc); triggerCalcVarsSave = true;\n            } else if (['ai2t1h1koef1', 'ai2t1h1konst1', 'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst', 'ai2t2h2koef2', 'ai2t2h2konst2', 'phkonstamm', 'phkonstkisl', 'phminamm', 'phminkisl', 'phneitr', 'window_smus'].includes(sp.globalName)) {\n                triggerPhVarsUI = true; uiStatePh[sp.globalName] = valueToSetGlobal; global.set('uiState_ph', uiStatePh); triggerPhVarsSave = true;\n            } else if (['ai3ph5koef', 'ai3ph5konst', 'window_smusp'].includes(sp.globalName)) {\n                triggerRedoxVarsUI = true; uiStateRedox[sp.globalName] = valueToSetGlobal; global.set('uiState_redox', uiStateRedox); triggerRedoxVarsSave = true;\n            } else if (['ao_lc_key_ch2', 'ao_lc_k_ch2', 'ao_lc_c_ch2', 'ao_lc_key_ch3', 'ao_lc_k_ch3', 'ao_lc_c_ch3', 'ao_lc_key_ch4', 'ao_lc_k_ch4', 'ao_lc_c_ch4'].includes(sp.globalName)) {\n                triggerAOLCVarsUI = true; uiStateAOLC[sp.globalName] = valueToSetGlobal; global.set('uiState_aolc', uiStateAOLC); triggerAOLCVarsSave = true;\n            } else if (['ai4p2h5koef', 'ai4p2h5konst', 'window_smusp2'].includes(sp.globalName)) {\n                triggerRedox2VarsUI = true; uiStateRedox2[sp.globalName] = valueToSetGlobal; global.set('uiState_redox2', uiStateRedox2); triggerRedox2VarsSave = true;\n            } else if (['pid_setpoint', 'pid_prop_band', 'pid_t_integral', 'pid_t_derivative', 'pid_max_interval', 'pid_smooth_factor', 'pid_enable', 'pid_disabled_op', 'pid_pv_select_key', 'pid_valve_is_NC'].includes(sp.globalName)) {\n                triggerPidConfigUI = true; uiStatePidConfig[sp.globalName] = valueToSetGlobal; global.set('uiState_pidconfig', uiStatePidConfig); triggerPidConfigSave = true;\n            }\n        }\n        messagesToModbusServer.push({\n            payload: { value: [word_CD_fromPoll, word_AB_fromPoll], fc: 16, unitid: 1, address: sp.newWriteAddr, quantity: 2 }\n        });\n        flow.set(contextKeyLastPolled, newDesiredValueFloat);\n    }\n}\n\nlet modbusAcks = (messagesToModbusServer.length > 0) ? messagesToModbusServer : null;\nlet msgAllUI = null, msgCalcUI = null, msgPhUI = null, msgRedoxUI = null, msgAOLCUI = null, msgRedox2UI = null, msgPidConfigUI = null;\nlet msgAllSave = null, msgCalcSave = null, msgPhSave = null, msgRedoxSave = null, msgAOLCSave = null, msgRedox2Save = null, msgPidConfigSave = null;\n\nif (changesMadeCount > 0) {\n    const uiTriggerMsg = { payload: `hmi_vars_changed_${Date.now()}`, topic: \"ui_update_trigger_from_server\" };\n    if (triggerAllVarsUI) msgAllUI = { ...uiTriggerMsg };\n    if (triggerCalcVarsUI) msgCalcUI = { ...uiTriggerMsg };\n    if (triggerPhVarsUI) msgPhUI = { ...uiTriggerMsg };\n    if (triggerRedoxVarsUI) msgRedoxUI = { ...uiTriggerMsg };\n    if (triggerAOLCVarsUI) msgAOLCUI = { ...uiTriggerMsg };\n    if (triggerRedox2VarsUI) msgRedox2UI = { ...uiTriggerMsg };\n    if (triggerPidConfigUI) msgPidConfigUI = { ...uiTriggerMsg };\n\n    const saveTriggerMsg = { payload: \"write_request\", topic: \"hmi_initiated_save\" };\n    if (triggerAllVarsSave) msgAllSave = { ...saveTriggerMsg };\n    if (triggerCalcVarsSave) msgCalcSave = { ...saveTriggerMsg };\n    if (triggerPhVarsSave) msgPhSave = { ...saveTriggerMsg };\n    if (triggerRedoxVarsSave) msgRedoxSave = { ...saveTriggerMsg };\n    if (triggerAOLCVarsSave) msgAOLCSave = { ...saveTriggerMsg };\n    if (triggerRedox2VarsSave) msgRedox2Save = { ...saveTriggerMsg };\n    if (triggerPidConfigSave) msgPidConfigSave = { ...saveTriggerMsg };\n\n    node.log(`Изменено ${changesMadeCount} уставок с HMI. Инициирую обновление UI и СОХРАНЕНИЕ ФАЙЛОВ.`);\n    node.status({ fill: \"green\", shape: \"dot\", text: `Обновлено ${changesMadeCount}. UI триггер. Сохранение.` });\n} else {\n    node.status({ fill: \"grey\", shape: \"ring\", text: `Опрос уставок HMI: нет изменений` });\n}\n\nreturn [\n    modbusAcks,\n    msgAllUI, msgCalcUI, msgPhUI, msgRedoxUI, msgAOLCUI, msgRedox2UI, msgPidConfigUI,\n    msgAllSave, msgCalcSave, msgPhSave, msgRedoxSave, msgAOLCSave, msgRedox2Save, msgPidConfigSave\n];",
        "outputs": 15,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 240,
        "wires": [
            [
                "544220689a5df86f"
            ],
            [
                "392a0b22a309701c"
            ],
            [
                "3166a153e733534a"
            ],
            [
                "fd210f8aaa4c1bf4"
            ],
            [
                "6e5bdf3cb403d853"
            ],
            [
                "a00566c684a58aa3"
            ],
            [
                "9c5025a984e792f2"
            ],
            [
                "5bdcd60ad85bb748"
            ],
            [
                "4be7fd27115709bc"
            ],
            [
                "1562093a54497e29"
            ],
            [
                "e48a8fe8e05fec86"
            ],
            [
                "a1a09a9d086e9f40"
            ],
            [
                "c694a308a1c55d86"
            ],
            [
                "267d7838652fde3e"
            ],
            [
                "e41ea71b90821435"
            ]
        ]
    },
    {
        "id": "392a0b22a309701c",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger All Vars UI Update",
        "mode": "link",
        "links": [
            "256345716d3ef92c",
            "15c4871884471ec6"
        ],
        "x": 1235,
        "y": 80,
        "wires": []
    },
    {
        "id": "3166a153e733534a",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger Calc UI Update",
        "mode": "link",
        "links": [
            "8ef1a4072670ce1b"
        ],
        "x": 1235,
        "y": 120,
        "wires": []
    },
    {
        "id": "fd210f8aaa4c1bf4",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger PH UI Update",
        "mode": "link",
        "links": [
            "75f06ba54fe094f1"
        ],
        "x": 1235,
        "y": 160,
        "wires": []
    },
    {
        "id": "180b2071751e76ae",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger Redox UI Update",
        "mode": "link",
        "links": [
            "36155efc8f65fdf0"
        ],
        "x": 1235,
        "y": 200,
        "wires": []
    },
    {
        "id": "4be7fd27115709bc",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger All Vars Save from HMI",
        "mode": "link",
        "links": [
            "57238d4db0d9ca16"
        ],
        "x": 1175,
        "y": 340,
        "wires": []
    },
    {
        "id": "1562093a54497e29",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger Calc Save from HMI",
        "mode": "link",
        "links": [
            "f85b948170d968d8"
        ],
        "x": 1175,
        "y": 380,
        "wires": []
    },
    {
        "id": "e48a8fe8e05fec86",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger PH Save from HMI",
        "mode": "link",
        "links": [
            "4e6c11e8bc465a42"
        ],
        "x": 1175,
        "y": 420,
        "wires": []
    },
    {
        "id": "076fdadf7bb4ae92",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger Redox Save from HMI",
        "mode": "link",
        "links": [
            "dc99ecdcde066a9d"
        ],
        "x": 1175,
        "y": 460,
        "wires": []
    },
    {
        "id": "177f4e07eed0e148",
        "type": "inject",
        "z": "23e887414e2dc8e7",
        "name": "Сброс flow.lastPolledValues",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 380,
        "wires": [
            [
                "4d2fc4289da9f697"
            ]
        ]
    },
    {
        "id": "4d2fc4289da9f697",
        "type": "function",
        "z": "23e887414e2dc8e7",
        "name": "Очистить lastPolledValues",
        "func": "// Массив setpointsToManage должен быть таким же, как в \"Process New Setpoints & Ack\"\nconst setpointsToManage = [\n    // !!! СКОПИРУЙТЕ СЮДА ВАШ ПОЛНЫЙ МАССИВ setpointsToManage ИЗ УЗЛА b45055e60a3a85b0 !!!\n    { globalName: \"koef0\", readAddr: 0, newWriteAddr: 1000 },\n    { globalName: \"koef1\", readAddr: 2, newWriteAddr: 1002 },\n    { globalName: \"koef2\", readAddr: 4, newWriteAddr: 1004 },\n    { globalName: \"koef3\", readAddr: 6, newWriteAddr: 1006 },\n    { globalName: \"koef4\", readAddr: 8, newWriteAddr: 1008 },\n    { globalName: \"koef5\", readAddr: 10, newWriteAddr: 1010 },\n    { globalName: \"koef6\", readAddr: 12, newWriteAddr: 1012 },\n    { globalName: \"koef7\", readAddr: 14, newWriteAddr: 1014 },\n    { globalName: \"konst0\", readAddr: 16, newWriteAddr: 1016 },\n    { globalName: \"konst1\", readAddr: 18, newWriteAddr: 1018 },\n    { globalName: \"konst2\", readAddr: 20, newWriteAddr: 1020 },\n    { globalName: \"konst3\", readAddr: 22, newWriteAddr: 1022 },\n    { globalName: \"konst4\", readAddr: 24, newWriteAddr: 1024 },\n    { globalName: \"konst5\", readAddr: 26, newWriteAddr: 1026 },\n    { globalName: \"konst6\", readAddr: 28, newWriteAddr: 1028 },\n    { globalName: \"konst7\", readAddr: 30, newWriteAddr: 1030 },\n    { globalName: \"n1\", readAddr: 32, newWriteAddr: 1032 },\n    { globalName: \"n2\", readAddr: 34, newWriteAddr: 1034 },\n    { globalName: \"n3\", readAddr: 36, newWriteAddr: 1036 },\n    { globalName: \"n4\", readAddr: 38, newWriteAddr: 1038 },\n    { globalName: \"n5\", readAddr: 40, newWriteAddr: 1040 },\n    { globalName: \"k1\", readAddr: 42, newWriteAddr: 1042 },\n    { globalName: \"k2\", readAddr: 44, newWriteAddr: 1044 },\n    { globalName: \"k3\", readAddr: 46, newWriteAddr: 1046 },\n    { globalName: \"k4\", readAddr: 48, newWriteAddr: 1048 },\n    { globalName: \"k5\", readAddr: 50, newWriteAddr: 1050 },\n    { globalName: \"h1\", readAddr: 52, newWriteAddr: 1052 },\n    { globalName: \"h2\", readAddr: 54, newWriteAddr: 1054 },\n    { globalName: \"h3\", readAddr: 56, newWriteAddr: 1056 },\n    { globalName: \"h4\", readAddr: 58, newWriteAddr: 1058 },\n    { globalName: \"h5\", readAddr: 60, newWriteAddr: 1060 },\n    { globalName: \"p1\", readAddr: 62, newWriteAddr: 1062 },\n    { globalName: \"p2\", readAddr: 64, newWriteAddr: 1064 },\n    { globalName: \"p3\", readAddr: 66, newWriteAddr: 1066 },\n    { globalName: \"p4\", readAddr: 68, newWriteAddr: 1068 },\n    { globalName: \"p5\", readAddr: 70, newWriteAddr: 1070 },\n    { globalName: \"pk1\", readAddr: 72, newWriteAddr: 1072 },\n    { globalName: \"pk2\", readAddr: 74, newWriteAddr: 1074 },\n    { globalName: \"pk3\", readAddr: 76, newWriteAddr: 1076 },\n    { globalName: \"pk4\", readAddr: 78, newWriteAddr: 1078 },\n    { globalName: \"pk5\", readAddr: 80, newWriteAddr: 1080 },\n    { globalName: \"ai2t1h1koef1\", readAddr: 82, newWriteAddr: 1082 },\n    { globalName: \"ai2t1h1konst1\", readAddr: 84, newWriteAddr: 1084 },\n    { globalName: \"ai2t1t2h1h2koef\", readAddr: 86, newWriteAddr: 1086 },\n    { globalName: \"ai2t1t2h1h2konst\", readAddr: 88, newWriteAddr: 1088 },\n    { globalName: \"ai2t2h2koef2\", readAddr: 90, newWriteAddr: 1090 },\n    { globalName: \"ai2t2h2konst2\", readAddr: 92, newWriteAddr: 1092 },\n    { globalName: \"phkonstamm\", readAddr: 94, newWriteAddr: 1094 },\n    { globalName: \"phkonstkisl\", readAddr: 96, newWriteAddr: 1096 },\n    { globalName: \"phminamm\", readAddr: 98, newWriteAddr: 1098 },\n    { globalName: \"phminkisl\", readAddr: 100, newWriteAddr: 1100 },\n    { globalName: \"phneitr\", readAddr: 102, newWriteAddr: 1102 },\n    { globalName: \"ai3ph5koef\", readAddr: 104, newWriteAddr: 1104 },\n    { globalName: \"ai3ph5konst\", readAddr: 106, newWriteAddr: 1106 },\n    { globalName: \"window_smus\", readAddr: 108, newWriteAddr: 1108 },\n    { globalName: \"window_smusp\", readAddr: 110, newWriteAddr: 1110 },\n{ globalName: \"ao_lc_key_ch2\", readAddr: 112, newWriteAddr: 1112 },\n{ globalName: \"ao_lc_k_ch2\", readAddr: 114, newWriteAddr: 1114 },\n{ globalName: \"ao_lc_c_ch2\", readAddr: 116, newWriteAddr: 1116 },\n{ globalName: \"ao_lc_key_ch3\", readAddr: 118, newWriteAddr: 1118 },\n{ globalName: \"ao_lc_k_ch3\", readAddr: 120, newWriteAddr: 1120 },\n{ globalName: \"ao_lc_c_ch3\", readAddr: 122, newWriteAddr: 1122 },\n{ globalName: \"ao_lc_key_ch4\", readAddr: 124, newWriteAddr: 1124 },\n{ globalName: \"ao_lc_k_ch4\", readAddr: 126, newWriteAddr: 1126 },\n{ globalName: \"ao_lc_c_ch4\", readAddr: 128, newWriteAddr:1128 },\n    // <--- ДОБАВЛЕНО: Новые уставки для Redox2 --->\n    { globalName: \"ai4p2h5koef\", readAddr: 130, newWriteAddr: 1130 },\n    { globalName: \"ai4p2h5konst\", readAddr: 132, newWriteAddr: 1132 },\n    { globalName: \"window_smusp2\", readAddr: 134, newWriteAddr: 1134 },\n\n// <--- ДОБАВЛЕНО: Новые уставки ПИД --->\n    { globalName: \"pid_setpoint\", readAddr: 136, newWriteAddr:1136 },\n    { globalName: \"pid_prop_band\", readAddr: 138, newWriteAddr: 1138 },\n    { globalName: \"pid_t_integral\", readAddr: 140, newWriteAddr: 1140 },\n    { globalName: \"pid_t_derivative\", readAddr: 142, newWriteAddr: 1142 },\n    { globalName: \"pid_max_interval\", readAddr: 144, newWriteAddr: 1144 },\n    { globalName: \"pid_smooth_factor\", readAddr: 146, newWriteAddr: 1146 },\n    { globalName: \"pid_enable\", readAddr: 148, newWriteAddr: 1148 },\n    { globalName: \"pid_disabled_op\", readAddr: 150, newWriteAddr: 1150 },\n    { globalName: \"pid_pv_select_key\", readAddr: 152, newWriteAddr: 1152 },\n    { globalName: \"pid_valve_is_NC\", readAddr: 154, newWriteAddr: 1154 }\n\n];\n\nlet clearedCount = 0;\nnode.log(\"[Flow Reset] Сброс переменных flow.last_polled_val_at_...\");\n\nfor (const sp of setpointsToManage) {\n    const contextKeyLastPolled = `last_polled_val_at_${sp.newWriteAddr}`;\n    if (flow.get(contextKeyLastPolled) !== undefined) {\n        flow.set(contextKeyLastPolled, undefined); // Устанавливаем в undefined\n        clearedCount++;\n    }\n}\n\nnode.log(`[Flow Reset] Сброшено ${clearedCount} переменных flow.last_polled_val_at_...`);\nnode.status({ text: `Сброшено ${clearedCount} lastPolled flow vars` });\n\nreturn null; // Ничего не отправляем дальше",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 380,
        "wires": []
    },
    {
        "id": "a00566c684a58aa3",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger Redox UI Update",
        "mode": "link",
        "links": [
            "36155efc8f65fdf0"
        ],
        "x": 1235,
        "y": 240,
        "wires": []
    },
    {
        "id": "c694a308a1c55d86",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger Redox Save from HMI",
        "mode": "link",
        "links": [
            "7d65ed319937fa14"
        ],
        "x": 1175,
        "y": 500,
        "wires": []
    },
    {
        "id": "8f07e3f7446721f1",
        "type": "modbus-flex-getter",
        "z": "23e887414e2dc8e7",
        "name": "Read Part 1 0-123",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "eb35cce35ef3368f",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 500,
        "wires": [
            [
                "916cfeae8085c83b"
            ],
            []
        ]
    },
    {
        "id": "f180aaef0a1d5de1",
        "type": "inject",
        "z": "23e887414e2dc8e7",
        "name": "Опрос 'Новых Уставок'  (10c 1.5 сек)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.5",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 230,
        "y": 560,
        "wires": [
            [
                "12f4b1eb97fa8c89"
            ]
        ]
    },
    {
        "id": "12f4b1eb97fa8c89",
        "type": "function",
        "z": "23e887414e2dc8e7",
        "name": "Prepare Request Part 1 0-123",
        "func": "msg.payload = {\n    'fc': 3,\n    'unitid': 1, // Твой Unit ID\n    'address': 1000,\n    'quantity': 123\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "8f07e3f7446721f1"
            ]
        ]
    },
    {
        "id": "916cfeae8085c83b",
        "type": "function",
        "z": "23e887414e2dc8e7",
        "name": "Store Part 1 & Prepare/Trigger Part 2 0-123 + 123-",
        "func": "// Вход: msg от Modbus-Flex-Getter \"Read Part 1\"\nlet part1DataArray;\n\n// Извлеки массив данных (адаптируй путь, если нужно, после проверки Debug)\nif (msg.payload && Array.isArray(msg.payload.data)) {\n    part1DataArray = msg.payload.data;\n} else if (msg.payload && Array.isArray(msg.payload)) {\n    part1DataArray = msg.payload;\n} else {\n    node.error(\"Часть 1: Массив данных не найден в ответе Modbus-Flex-Getter!\", msg);\n    return null; // Остановить поток\n}\n\nif (!part1DataArray || part1DataArray.length !== 123) {\n    node.error(`Часть 1: Ожидалось 123 регистра, получено ${part1DataArray ? part1DataArray.length : 'нет'}. Остановка.`, msg);\n    return null;\n}\n\nflow.set(\"modbus_part1_data\", part1DataArray); // Сохраняем в контекст потока\nnode.log(\"Часть 1 (123 регистра) прочитана и сохранена.\");\n\n// Это сообщение запустит подготовку запроса для Части 2\nreturn { payload: \"trigger_read_part_2\" };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 440,
        "wires": [
            [
                "0d248d56bff13164"
            ]
        ]
    },
    {
        "id": "0d248d56bff13164",
        "type": "function",
        "z": "23e887414e2dc8e7",
        "name": "Prepare Request Part 2 (Total 156 regs",
        "func": "// Вход: msg от \"Store Part 1 & Prepare/Trigger Part 2\"\n// Этот узел просто формирует запрос для второй части\nmsg.payload = {\n    'fc': 3,\n    'unitid': 1, // Твой Unit ID\n    'address': 1123, // Начальный адрес для второй части (600 + 123)\n    'quantity': 33   // Количество оставшихся регистров \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 440,
        "wires": [
            [
                "01848fc88d7781f3"
            ]
        ]
    },
    {
        "id": "01848fc88d7781f3",
        "type": "modbus-flex-getter",
        "z": "23e887414e2dc8e7",
        "name": "Read Part 2 (Remaining 33 regs)",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "eb35cce35ef3368f",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 200,
        "y": 380,
        "wires": [
            [
                "30cfa4ec36d0ce37"
            ],
            []
        ]
    },
    {
        "id": "30cfa4ec36d0ce37",
        "type": "function",
        "z": "23e887414e2dc8e7",
        "name": "Combine Parts (123 + 33 = 156 regs)",
        "func": "// Вход: msg от Modbus-Flex-Getter \"Read Part 2\"\nlet part2DataArray;\n\n// Извлеки массив данных для Части 2 (адаптируй путь, если нужно)\nif (msg.payload && Array.isArray(msg.payload.data)) {\n    part2DataArray = msg.payload.data;\n} else if (msg.payload && Array.isArray(msg.payload)) {\n    part2DataArray = msg.payload;\n} else {\n    node.error(\"Часть 2: Массив данных не найден в ответе Modbus-Flex-Getter!\", msg);\n    return null; // Остановить поток\n}\n\nif (!part2DataArray || part2DataArray.length !== 33) {\n    node.error(`Часть 2: Ожидалось 33 регистров, получено ${part2DataArray ? part2DataArray.length : 'нет'}. Остановка.`, msg);\n    return null;\n}\n\nconst part1DataArray = flow.get(\"modbus_part1_data\");\n\nif (!part1DataArray) {\n    node.error(\"Данные Части 1 не найдены в контексте потока! Невозможно объединить.\", msg);\n    return null;\n}\n\n// Объединяем массивы\nconst combinedPolledRegisters = part1DataArray.concat(part2DataArray);\n\n// Очищаем сохраненные данные Части 1 для следующего цикла опроса\nflow.set(\"modbus_part1_data\", undefined);\n\nif (combinedPolledRegisters.length === 156) {\n    node.log(`Успешно объединены данные Modbus: ${combinedPolledRegisters.length} регистров.`);\n    msg.payload = combinedPolledRegisters; // Это и есть твой полный массив polledRegisters\n    return msg;\n} else {\n    node.error(`Ошибка объединения: итоговая длина ${combinedPolledRegisters.length}, ожидалось 156.`, msg);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 320,
        "wires": [
            [
                "73cbc430fc56f2ec"
            ]
        ]
    },
    {
        "id": "9e0f0c1b10691b1f",
        "type": "debug",
        "z": "23e887414e2dc8e7",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1530,
        "y": 140,
        "wires": []
    },
    {
        "id": "e64bc1c2ef976fc9",
        "type": "debug",
        "z": "23e887414e2dc8e7",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1530,
        "y": 80,
        "wires": []
    },
    {
        "id": "9c5025a984e792f2",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger Redox2 UI Update from HMI",
        "mode": "link",
        "links": [
            "0fe03d9c2bfa6eaf"
        ],
        "x": 1235,
        "y": 280,
        "wires": []
    },
    {
        "id": "267d7838652fde3e",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger Redox2 Save from HMI",
        "mode": "link",
        "links": [
            "55e7e08f39caf5a7"
        ],
        "x": 1185,
        "y": 540,
        "wires": []
    },
    {
        "id": "5bdcd60ad85bb748",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger PID Config UI from HMI",
        "mode": "link",
        "links": [
            "8daefb51a51d24bd"
        ],
        "x": 1235,
        "y": 320,
        "wires": []
    },
    {
        "id": "e41ea71b90821435",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger PID Config Save from HMI",
        "mode": "link",
        "links": [
            "7a8bf9a7db063c35"
        ],
        "x": 1185,
        "y": 580,
        "wires": []
    },
    {
        "id": "6e5bdf3cb403d853",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger AO LC UI Update",
        "mode": "link",
        "links": [
            "6eb05e5a39b8e49e"
        ],
        "x": 1235,
        "y": 280,
        "wires": []
    },
    {
        "id": "a1a09a9d086e9f40",
        "type": "link out",
        "z": "23e887414e2dc8e7",
        "name": "Trigger AO LC Save from HMI",
        "mode": "link",
        "links": [
            "7d65ed319937fa14"
        ],
        "x": 1235,
        "y": 480,
        "wires": []
    },
    {
        "id": "e99aedd29a780b2e",
        "type": "ui_button",
        "z": "22da98f038da3ad9",
        "name": "Чтение AO LC",
        "group": "1614da6767ff2948",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение из файла",
        "tooltip": "Прочитать сохраненную конфигурацию АО LC из файла",
        "icon": "fa-download",
        "payload": "read",
        "payloadType": "str",
        "topic": "read_aolc",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "20dab0edb6accd2c"
            ]
        ]
    },
    {
        "id": "20dab0edb6accd2c",
        "type": "link out",
        "z": "22da98f038da3ad9",
        "name": "link out: aolc read",
        "links": [
            "e36846a3ba56ba76"
        ],
        "x": 390,
        "y": 60,
        "wires": []
    },
    {
        "id": "4386ca6b6050ba09",
        "type": "ui_text",
        "z": "22da98f038da3ad9",
        "group": "1614da6767ff2948",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус AO LC",
        "label": "Статус:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 930,
        "y": 180,
        "wires": []
    },
    {
        "id": "b154d2812a06434b",
        "type": "ui_button",
        "z": "22da98f038da3ad9",
        "name": "Запись AO LC",
        "group": "1614da6767ff2948",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись в файл",
        "tooltip": "Сохранить текущую конфигурацию АО LC в файл",
        "icon": "fa-upload",
        "payload": "save",
        "payloadType": "str",
        "topic": "save_aolc",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "fd829abdff0bb2de"
            ]
        ]
    },
    {
        "id": "fd829abdff0bb2de",
        "type": "link out",
        "z": "22da98f038da3ad9",
        "name": "link out: aolc save",
        "links": [
            "7d65ed319937fa14"
        ],
        "x": 390,
        "y": 120,
        "wires": []
    },
    {
        "id": "5bc4439c3a332f86",
        "type": "ui_numeric",
        "z": "22da98f038da3ad9",
        "name": "Ключ Ch2 (2NN)",
        "label": "Ключ 2NN (ao_lc_key_ch2):",
        "group": "c0b003c67ca6ac14",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_key_ch2",
        "format": "{{value}}",
        "min": 200,
        "max": 2999,
        "step": 1,
        "x": 630,
        "y": 120,
        "wires": [
            [
                "9b88a90045f4685d"
            ]
        ]
    },
    {
        "id": "5174a0668d61d4e1",
        "type": "ui_numeric",
        "z": "22da98f038da3ad9",
        "name": "K Ch2",
        "label": "K (ao_lc_k_ch2):",
        "group": "c0b003c67ca6ac14",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_k_ch2",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "9b88a90045f4685d"
            ]
        ]
    },
    {
        "id": "beb6981394f53df8",
        "type": "ui_numeric",
        "z": "22da98f038da3ad9",
        "name": "C Ch2",
        "label": "C (ao_lc_c_ch2):",
        "group": "c0b003c67ca6ac14",
        "order": 3,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_c_ch2",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 590,
        "y": 240,
        "wires": [
            [
                "9b88a90045f4685d"
            ]
        ]
    },
    {
        "id": "a8632c4ca79896a9",
        "type": "ui_text",
        "z": "22da98f038da3ad9",
        "group": "c0b003c67ca6ac14",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Переменная:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 380,
        "wires": []
    },
    {
        "id": "f0b65aa1dc89942b",
        "type": "ui_text",
        "z": "22da98f038da3ad9",
        "group": "c0b003c67ca6ac14",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Ток (мА) (ao_lc_calculated_mA_ch2):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 700,
        "y": 420,
        "wires": []
    },
    {
        "id": "5cfe958df683ad91",
        "type": "ui_numeric",
        "z": "22da98f038da3ad9",
        "name": "Ключ Ch3 (3NN)",
        "label": "Ключ 3NN (ao_lc_key_ch3):",
        "group": "aae5e2a2b9a42817",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_key_ch3",
        "format": "{{value}}",
        "min": 300,
        "max": 3999,
        "step": 1,
        "x": 670,
        "y": 480,
        "wires": [
            [
                "9b88a90045f4685d"
            ]
        ]
    },
    {
        "id": "d8fb6ba5c9ba3245",
        "type": "ui_numeric",
        "z": "22da98f038da3ad9",
        "name": "K Ch3",
        "label": "K (ao_lc_k_ch3):",
        "group": "aae5e2a2b9a42817",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_k_ch3",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 670,
        "y": 520,
        "wires": [
            [
                "9b88a90045f4685d"
            ]
        ]
    },
    {
        "id": "bb2fbb6942dff924",
        "type": "ui_numeric",
        "z": "22da98f038da3ad9",
        "name": "C Ch3",
        "label": "C (ao_lc_c_ch3):",
        "group": "aae5e2a2b9a42817",
        "order": 3,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_c_ch3",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 670,
        "y": 560,
        "wires": [
            [
                "9b88a90045f4685d"
            ]
        ]
    },
    {
        "id": "b396d4c6f8cc10e8",
        "type": "ui_text",
        "z": "22da98f038da3ad9",
        "group": "aae5e2a2b9a42817",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Переменная:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 600,
        "wires": []
    },
    {
        "id": "9c8c0524e5f956b1",
        "type": "ui_text",
        "z": "22da98f038da3ad9",
        "group": "aae5e2a2b9a42817",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Ток (мА) (ao_lc_calculated_mA_ch3):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 640,
        "wires": []
    },
    {
        "id": "fe15faef3fe64c92",
        "type": "ui_numeric",
        "z": "22da98f038da3ad9",
        "name": "Ключ Ch4 (4NN)",
        "label": "Ключ 4NN (ao_lc_key_ch4):",
        "group": "d09e28e2748d0284",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_key_ch4",
        "format": "{{value}}",
        "min": 400,
        "max": 4999,
        "step": 1,
        "x": 670,
        "y": 700,
        "wires": [
            [
                "9b88a90045f4685d"
            ]
        ]
    },
    {
        "id": "41dccfeb7ee49d58",
        "type": "ui_numeric",
        "z": "22da98f038da3ad9",
        "name": "K Ch4",
        "label": "K (ao_lc_k_ch4):",
        "group": "d09e28e2748d0284",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_k_ch4",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 670,
        "y": 740,
        "wires": [
            [
                "9b88a90045f4685d"
            ]
        ]
    },
    {
        "id": "cfb13a3596e639fc",
        "type": "ui_numeric",
        "z": "22da98f038da3ad9",
        "name": "C Ch4",
        "label": "C (ao_lc_c_ch4):",
        "group": "d09e28e2748d0284",
        "order": 3,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_c_ch4",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 670,
        "y": 780,
        "wires": [
            [
                "9b88a90045f4685d"
            ]
        ]
    },
    {
        "id": "2c223dd6f34e2bf2",
        "type": "ui_text",
        "z": "22da98f038da3ad9",
        "group": "d09e28e2748d0284",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Переменная:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 820,
        "wires": []
    },
    {
        "id": "da26bff1a4036806",
        "type": "ui_text",
        "z": "22da98f038da3ad9",
        "group": "d09e28e2748d0284",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Ток (мА) (ao_lc_calculated_mA_ch4):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 860,
        "wires": []
    },
    {
        "id": "6eb05e5a39b8e49e",
        "type": "link in",
        "z": "22da98f038da3ad9",
        "name": "link in: trigger-aolc-ui-update",
        "links": [
            "c7c50ea7ce516a93",
            "d0b65c1f6e206754",
            "13c34223c503fbd5",
            "6e5bdf3cb403d853"
        ],
        "x": 255,
        "y": 520,
        "wires": [
            [
                "8756d59b05830b10"
            ]
        ]
    },
    {
        "id": "8756d59b05830b10",
        "type": "function",
        "z": "22da98f038da3ad9",
        "name": "Update AO LC UI Elements",
        "func": "const uiState = global.get('uiState_aolc') || {};\nconst savedState = global.get('savedState_aolc') || {};\nconst outputs = new Array(10).fill(null);\n\nconst configVars = [\n    'ao_lc_key_ch2', 'ao_lc_k_ch2', 'ao_lc_c_ch2',\n    'ao_lc_key_ch3', 'ao_lc_k_ch3', 'ao_lc_c_ch3',\n    'ao_lc_key_ch4', 'ao_lc_k_ch4', 'ao_lc_c_ch4'\n];\n\nconfigVars.forEach((key, index) => {\n    const value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : (key.includes('k_') ? 1.0 : 0.0) ;\n    outputs[index] = {payload: value, topic: key};\n});\n\nlet hasUnsavedChanges = false;\nfor (const key of configVars) {\n    const savedNum = savedState.hasOwnProperty(key) ? Number(savedState[key]) : (key.includes('k_') ? 1.0 : 0.0);\n    const uiNum = uiState.hasOwnProperty(key) ? Number(uiState[key]) : (key.includes('k_') ? 1.0 : 0.0);\n    if (Math.abs(savedNum - uiNum) > 0.00001 && !(isNaN(savedNum) && isNaN(uiNum))) { \n        hasUnsavedChanges = true; break;\n    }\n}\n\noutputs[9] = {payload: (hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\")};\n\nreturn outputs;",
        "outputs": 10,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "5bc4439c3a332f86"
            ],
            [
                "5174a0668d61d4e1"
            ],
            [
                "beb6981394f53df8"
            ],
            [
                "5cfe958df683ad91"
            ],
            [
                "d8fb6ba5c9ba3245"
            ],
            [
                "bb2fbb6942dff924"
            ],
            [
                "fe15faef3fe64c92"
            ],
            [
                "41dccfeb7ee49d58"
            ],
            [
                "cfb13a3596e639fc"
            ],
            [
                "4386ca6b6050ba09"
            ]
        ]
    },
    {
        "id": "9b88a90045f4685d",
        "type": "function",
        "z": "22da98f038da3ad9",
        "name": "Handle AO LC UI Input",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\nlet uiState = global.get('uiState_aolc') || {};\nconst savedState = global.get('savedState_aolc') || {};\n\nconst savableVars = [\n    'ao_lc_key_ch2', 'ao_lc_k_ch2', 'ao_lc_c_ch2',\n    'ao_lc_key_ch3', 'ao_lc_k_ch3', 'ao_lc_c_ch3',\n    'ao_lc_key_ch4', 'ao_lc_k_ch4', 'ao_lc_c_ch4'\n];\n\nif (savableVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    uiState[varName] = newValue;\n    global.set('uiState_aolc', uiState);\n} else {\n    node.warn(\"[UI_AOLC_INPUT] Некорректный ввод: \" + JSON.stringify(msg));\n    return null;\n}\n\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    const savedVal = savedState.hasOwnProperty(key) ? Number(savedState[key]) : (key.includes('k_') ? 1.0 : 0.0);\n    const uiVal = uiState.hasOwnProperty(key) ? Number(uiState[key]) : (key.includes('k_') ? 1.0 : 0.0);\n    if (Math.abs(savedVal - uiVal) > 0.00001 && !(isNaN(savedVal) && isNaN(uiVal))) { \n        hasUnsavedChanges = true; break;\n    }\n}\nconst statusMsg = hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\";\nreturn { payload: statusMsg };",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 300,
        "wires": [
            [
                "4386ca6b6050ba09",
                "13c34223c503fbd5"
            ]
        ]
    },
    {
        "id": "13c34223c503fbd5",
        "type": "link out",
        "z": "22da98f038da3ad9",
        "name": "refresh status on input",
        "links": [
            "6eb05e5a39b8e49e"
        ],
        "x": 1130,
        "y": 300,
        "wires": []
    },
    {
        "id": "ea9fa1ddd87e1a5c",
        "type": "link in",
        "z": "22da98f038da3ad9",
        "name": "link in: Update mA Val Ch2",
        "links": [
            "7fc9609dbc784376"
        ],
        "x": 430,
        "y": 420,
        "wires": [
            [
                "f0b65aa1dc89942b",
                "93ccdf6c924da729"
            ]
        ]
    },
    {
        "id": "efa50af7ddd6f7e7",
        "type": "link in",
        "z": "22da98f038da3ad9",
        "name": "link in: Update mA Val Ch3",
        "links": [
            "5158a8f924aaa584"
        ],
        "x": 430,
        "y": 640,
        "wires": [
            [
                "9c8c0524e5f956b1",
                "7512dd2c5988f74b"
            ]
        ]
    },
    {
        "id": "8c482dd068c46b49",
        "type": "link in",
        "z": "22da98f038da3ad9",
        "name": "link in: Update mA Val Ch4",
        "links": [
            "d95edf1846be4468"
        ],
        "x": 430,
        "y": 860,
        "wires": [
            [
                "da26bff1a4036806",
                "20643140a37a098c"
            ]
        ]
    },
    {
        "id": "16f4f6685ae0b9c6",
        "type": "link in",
        "z": "22da98f038da3ad9",
        "name": "link in: Update Src Val Ch2",
        "links": [
            "ad50a068baa16ad2"
        ],
        "x": 430,
        "y": 380,
        "wires": [
            [
                "a8632c4ca79896a9"
            ]
        ]
    },
    {
        "id": "22af68f01559c10f",
        "type": "link in",
        "z": "22da98f038da3ad9",
        "name": "link in: Update Src Val Ch3",
        "links": [
            "78afc4eb6cde355f"
        ],
        "x": 430,
        "y": 600,
        "wires": [
            [
                "b396d4c6f8cc10e8"
            ]
        ]
    },
    {
        "id": "b44d90118bc716d7",
        "type": "link in",
        "z": "22da98f038da3ad9",
        "name": "link in: Update Src Val Ch4",
        "links": [
            "4b97119e33cb5f60"
        ],
        "x": 430,
        "y": 820,
        "wires": [
            [
                "2c223dd6f34e2bf2"
            ]
        ]
    },
    {
        "id": "234714f673430506",
        "type": "ui_chart",
        "z": "22da98f038da3ad9",
        "name": "График Токов АО LC",
        "group": "8ffa84d5c6b622d8",
        "order": 1,
        "width": 12,
        "height": 8,
        "label": "Выходные токи (4-20 мА)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "4",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "className": "",
        "x": 1260,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "167229183e834cc8",
        "type": "change",
        "z": "22da98f038da3ad9",
        "name": "Set Topic AO_LC_Ch2_mA",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AO_LC_Ch2_mA",
                "tot": "str"
            }
        ],
        "x": 1080,
        "y": 480,
        "wires": [
            [
                "849ef216d2dc46bb"
            ]
        ]
    },
    {
        "id": "b705c3333425ba89",
        "type": "change",
        "z": "22da98f038da3ad9",
        "name": "Set Topic AO_LC_Ch3_mA",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AO_LC_Ch3_mA",
                "tot": "str"
            }
        ],
        "x": 1020,
        "y": 600,
        "wires": [
            [
                "849ef216d2dc46bb"
            ]
        ]
    },
    {
        "id": "8fa7cf899c31e35a",
        "type": "change",
        "z": "22da98f038da3ad9",
        "name": "Set Topic AO_LC_Ch4_mA",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AO_LC_Ch4_mA",
                "tot": "str"
            }
        ],
        "x": 1000,
        "y": 740,
        "wires": [
            [
                "849ef216d2dc46bb"
            ]
        ]
    },
    {
        "id": "93ccdf6c924da729",
        "type": "rbe",
        "z": "22da98f038da3ad9",
        "name": "Filter unchanged mA Ch2",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "x": 760,
        "y": 420,
        "wires": [
            [
                "167229183e834cc8"
            ]
        ]
    },
    {
        "id": "7512dd2c5988f74b",
        "type": "rbe",
        "z": "22da98f038da3ad9",
        "name": "Filter unchanged mA Ch3",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "x": 760,
        "y": 640,
        "wires": [
            [
                "b705c3333425ba89"
            ]
        ]
    },
    {
        "id": "20643140a37a098c",
        "type": "rbe",
        "z": "22da98f038da3ad9",
        "name": "Filter unchanged mA Ch4",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "x": 760,
        "y": 860,
        "wires": [
            [
                "8fa7cf899c31e35a"
            ]
        ]
    },
    {
        "id": "dbe10c179aee8446",
        "type": "inject",
        "z": "18ecd8ee6e51a55f",
        "name": "При старте (PID Config) 0.5с",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "init_pid_config",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 60,
        "wires": [
            [
                "32c5a9b8d1d27ff8"
            ]
        ]
    },
    {
        "id": "f34ec6b8c2cba982",
        "type": "link in",
        "z": "18ecd8ee6e51a55f",
        "name": "link in: trigger-read-pid-config",
        "links": [
            "363a07845bc66207"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "32c5a9b8d1d27ff8"
            ]
        ]
    },
    {
        "id": "32c5a9b8d1d27ff8",
        "type": "file in",
        "z": "18ecd8ee6e51a55f",
        "name": "Прочитать pid_config.json",
        "filename": "/home/root/.node-red/save/pid_config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 420,
        "y": 140,
        "wires": [
            [
                "88ea468c52539534"
            ]
        ]
    },
    {
        "id": "e644eec94dfb2d01",
        "type": "catch",
        "z": "18ecd8ee6e51a55f",
        "name": "Ошибка чтения pid_config.json",
        "scope": [
            "32c5a9b8d1d27ff8"
        ],
        "uncaught": false,
        "x": 500,
        "y": 220,
        "wires": [
            [
                "c86fe86e222d136b"
            ]
        ]
    },
    {
        "id": "88ea468c52539534",
        "type": "json",
        "z": "18ecd8ee6e51a55f",
        "name": "Разобрать JSON (PID Config)",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 680,
        "y": 140,
        "wires": [
            [
                "c86fe86e222d136b"
            ]
        ]
    },
    {
        "id": "c86fe86e222d136b",
        "type": "function",
        "z": "18ecd8ee6e51a55f",
        "name": "Init/Read PID Globals & State",
        "func": "const defaultPidConfig = {\n    pid_setpoint: 7.0,       // Уставка (например, для pH)\n    pid_prop_band: 100.0,    // Пропорциональный диапазон\n    pid_t_integral: 3600,  // Время интегрирования (сек)\n    pid_t_derivative: 0,   // Время дифференцирования (сек)\n    pid_max_interval: 60,    // Макс. интервал выборки (сек)\n    pid_smooth_factor: 0,    // Коэф. сглаживания производной\n    pid_enable: 0,           // ПИД выключен по умолчанию (0 - выкл, 1 - вкл)\n    pid_disabled_op: 0.0,    // Выход ПИД при отключении (0-1)\n    pid_pv_select_key: 498,  // Ключ выбранной PV (например, 498 для pH)\n    pid_valve_is_NC: 1,      // Тип клапана (1 - NC Норм.Закр., 0 - NO Норм.Откр.)\n    pid_integral_persist: 0.0 // Сохраненное значение интеграла\n};\n\nconst savableKeys = Object.keys(defaultPidConfig);\nlet loadedConfig = {};\nlet source = msg.topic === 'init_pid_config' ? '[INIT_PID_CONFIG]' : '[READ_BTN_PID_CONFIG]';\n\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && savableKeys.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    loadedConfig = msg.payload;\n    node.warn(source + \" Конфигурация ПИД загружена из файла pid_config.json.\");\n} else {\n    loadedConfig = { ...defaultPidConfig };\n    if (msg.error) {\n         node.warn(source + \" Ошибка чтения файла pid_config.json: \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init_pid_config'){\n         node.warn(source + \" Файл pid_config.json не найден/поврежден. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл pid_config.json не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChangedCount = 0;\nfor (const key of savableKeys) {\n    let valueToSet = loadedConfig.hasOwnProperty(key) ? loadedConfig[key] : defaultPidConfig[key];\n    const numValue = Number(valueToSet);\n\n    if (isNaN(numValue) && typeof defaultPidConfig[key] === 'number') { // Проверяем, если должно быть числом\n        node.warn(`[${source}] Некорректный формат числа для ${key}: ${valueToSet}. Используется значение по умолчанию: ${defaultPidConfig[key]}`);\n        valueToSet = defaultPidConfig[key];\n    }\n    // Для булевых (0/1) проверяем отдельно, если нужно\n    if (key === 'pid_enable' || key === 'pid_valve_is_NC') {\n        valueToSet = (valueToSet === 1 || valueToSet === true) ? 1 : 0;\n    }\n\n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChangedCount++;\n    }\n    loadedConfig[key] = valueToSet; // Сохраняем проверенное значение в loadedConfig\n}\n\n// Эти переменные не сохраняются в pid_config.json, но инициализируются\nglobal.set('pid_current_pv_value', 0);\nglobal.set('pid_output_actual', 0);\nglobal.set('pid_valve_command_final', 0);\n\nglobal.set('savedState_pidconfig', { ...loadedConfig }); \nglobal.set('uiState_pidconfig', { ...loadedConfig });\n\nif (globalsChangedCount > 0) {\n    node.log(source + ` Глобальные переменные конфигурации ПИД (${globalsChangedCount} шт.) установлены/обновлены.`);\n} else if (msg.topic === 'init_pid_config') {\n    node.log(source + \" Глобальные переменные конфигурации ПИД уже были установлены.\");\n}\n\nreturn { payload: true }; // Триггер для UI",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "a4600c01b987e3d3"
            ]
        ]
    },
    {
        "id": "a4600c01b987e3d3",
        "type": "link out",
        "z": "18ecd8ee6e51a55f",
        "name": "link out: trigger-pid-config-ui-update",
        "mode": "link",
        "links": [
            "8daefb51a51d24bd"
        ],
        "x": 905,
        "y": 240,
        "wires": []
    },
    {
        "id": "7a8bf9a7db063c35",
        "type": "link in",
        "z": "629daadfb0018491",
        "name": "link in: trigger-save-pid-config",
        "links": [
            "7c4b2db39f4bb95c",
            "e41ea71b90821435"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "ed2bf7ba4ecb99c2"
            ]
        ]
    },
    {
        "id": "ed2bf7ba4ecb99c2",
        "type": "function",
        "z": "629daadfb0018491",
        "name": "Apply Globals, Save State & File (PID)",
        "func": "const uiState = global.get('uiState_pidconfig') || {};\nconst defaultPidConfig = { /* ... ваши defaultPidConfig ... */ }; // Повторите defaultPidConfig для полноты или считайте из global\nconst savableKeys = [\n    'pid_setpoint', 'pid_prop_band', 'pid_t_integral', 'pid_t_derivative', \n    'pid_max_interval', 'pid_smooth_factor', 'pid_enable', 'pid_disabled_op', \n    'pid_pv_select_key', 'pid_valve_is_NC', 'pid_integral_persist'\n];\n\nlet stateToSave = {};\nlet globalsChangedCount = 0;\n\nfor (const key of savableKeys) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : (defaultPidConfig[key] !== undefined ? defaultPidConfig[key] : null);\n    // Валидация и приведение типов, если необходимо (по аналогии с Init/Read)\n    if (key === 'pid_enable' || key === 'pid_valve_is_NC') {\n        valueToSet = (valueToSet === 1 || valueToSet === true) ? 1 : 0;\n    } else {\n        const numValue = Number(valueToSet);\n        if (isNaN(numValue) && typeof defaultPidConfig[key] === 'number') {\n            node.warn(`[SAVE_PID_CONFIG] Некорректное значение для ${key}: ${valueToSet}. Будет использовано значение по умолчанию.`);\n            valueToSet = defaultPidConfig[key];\n        } else if (!isNaN(numValue)){\n            valueToSet = numValue;\n        }\n    }\n    \n    stateToSave[key] = valueToSet;\n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChangedCount++;\n    }\n}\n\nglobal.set('savedState_pidconfig', { ...stateToSave });\nglobal.set('uiState_pidconfig', { ...stateToSave }); // Синхронизируем uiState с сохраненным\n\nif (globalsChangedCount > 0) {\n    node.log(\"[WRITE_BTN_PID_CONFIG] Глобальные переменные ПИД обновлены и готовы к сохранению.\");\n} else {\n    node.log(\"[WRITE_BTN_PID_CONFIG] Глобальные переменные ПИД не требовали обновления.\");\n}\n\nconst filePayload = { payload: { ...stateToSave } };\nconst statusMessage = { payload: \"<font color='green'>Конфигурация ПИД сохранена</font>\" };\n\n// Важно: pid_integral_persist обновляется из другого потока (PID Control Logic)\n// Здесь мы его только читаем из uiState (которое должно было обновиться) и сохраняем.\n\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "9477078b0af0b0e3"
            ],
            [
                "f6de6ffc72a919c3"
            ]
        ]
    },
    {
        "id": "9477078b0af0b0e3",
        "type": "json",
        "z": "629daadfb0018491",
        "name": "Объект в JSON (PID)",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "273c485e01f4f4d9"
            ]
        ]
    },
    {
        "id": "273c485e01f4f4d9",
        "type": "file",
        "z": "629daadfb0018491",
        "name": "Сохранить pid_config.json",
        "filename": "/home/root/.node-red/save/pid_config.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "b94d79bc24a201f6"
            ]
        ]
    },
    {
        "id": "b94d79bc24a201f6",
        "type": "ui_toast",
        "z": "629daadfb0018491",
        "position": "top right",
        "displayTime": "3",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение ПИД",
        "name": "Уведомление о сохранении ПИД",
        "x": 480,
        "y": 340,
        "wires": []
    },
    {
        "id": "f6de6ffc72a919c3",
        "type": "link out",
        "z": "629daadfb0018491",
        "name": "link out: update-pid-config-status-text",
        "links": [
            "8daefb51a51d24bd"
        ],
        "x": 770,
        "y": 100,
        "wires": []
    },
    {
        "id": "8daefb51a51d24bd",
        "type": "link in",
        "z": "d769e22348317e1e",
        "name": "link in: trigger-pid-config-ui-update",
        "links": [
            "a4600c01b987e3d3",
            "f6de6ffc72a919c3",
            "5bdcd60ad85bb748"
        ],
        "x": 175,
        "y": 440,
        "wires": [
            [
                "af54df2b5c7c5c16"
            ]
        ]
    },
    {
        "id": "af54df2b5c7c5c16",
        "type": "function",
        "z": "d769e22348317e1e",
        "name": "Update PID Config UI",
        "func": "const uiState = global.get('uiState_pidconfig') || {};\nconst savedState = global.get('savedState_pidconfig') || {};\nconst messages = [];\n\nconst paramOrder = [\n    'pid_pv_select_key', 'pid_setpoint', 'pid_enable', 'pid_valve_is_NC', 'pid_disabled_op', // Group 1\n    'pid_prop_band', 'pid_t_integral', 'pid_t_derivative', // Group 2\n    'pid_max_interval', 'pid_smooth_factor', 'pid_integral_persist' // Group 3\n];\n\nparamOrder.forEach(key => {\n    messages.push({ topic: key, payload: uiState[key] });\n});\n\nlet hasUnsavedChanges = false;\nfor (const key in savedState) {\n    if (uiState.hasOwnProperty(key)) {\n        const sVal = Number(savedState[key]);\n        const uVal = Number(uiState[key]);\n        if (!isNaN(sVal) && !isNaN(uVal)) {\n            if (Math.abs(sVal - uVal) > 0.00001) { \n                hasUnsavedChanges = true; break;\n            }\n        } else if (String(savedState[key]) !== String(uiState[key])) {\n            hasUnsavedChanges = true; break;\n        }\n    }\n}\n\nconst statusMsg = hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\";\nmessages.push({ payload: statusMsg }); // Status message\n\nreturn messages;",
        "outputs": 12,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "27b6d41e9cf2a403"
            ],
            [
                "50878a2ac1a2f0f5"
            ],
            [
                "b66a1b8dbc795905"
            ],
            [
                "0acbafba45d101a9"
            ],
            [
                "3c5515aac7f85ca4"
            ],
            [
                "83373f5d7231b301"
            ],
            [
                "c3ab72d03cccb6cd"
            ],
            [
                "9c0343f143f8999e"
            ],
            [
                "ea0366501e55158a"
            ],
            [
                "d52252959544fbaa"
            ],
            [
                "8a9c2336496fe555"
            ],
            [
                "a2ac8a2291125cc9"
            ]
        ]
    },
    {
        "id": "dca7923f75847730",
        "type": "function",
        "z": "d769e22348317e1e",
        "name": "Handle PID Config UI Input",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\nlet uiState = global.get('uiState_pidconfig') || {};\nconst savedState = global.get('savedState_pidconfig') || {};\n\nconst numericKeys = ['pid_setpoint', 'pid_prop_band', 'pid_t_integral', 'pid_t_derivative', 'pid_max_interval', 'pid_smooth_factor', 'pid_disabled_op', 'pid_pv_select_key', 'pid_integral_persist'];\n//const numericKeys = ['pid_setpoint', 'pid_prop_band', 'pid_t_integral', 'pid_t_derivative', 'pid_max_interval', 'pid_smooth_factor', 'pid_disabled_op', 'pid_pv_select_key'];\nconst booleanKeys = ['pid_enable', 'pid_valve_is_NC'];\n\nif (numericKeys.includes(varName)) {\n    if (typeof newValue === 'number' && !isNaN(newValue)) {\n        uiState[varName] = newValue;\n    } else {\n        node.warn(`[UI_PID_CONFIG] Ожидалось число для ${varName}, получено: ${newValue}`);\n        return null; \n    }\n} else if (booleanKeys.includes(varName)) {\n    uiState[varName] = (newValue === true || newValue === 1) ? 1 : 0;\n} else {\n    node.warn(`[UI_PID_CONFIG] Неизвестный topic от UI: ${varName}`);\n    return null;\n}\nglobal.set('uiState_pidconfig', uiState);\n\nlet hasUnsavedChanges = false;\nfor (const key in savedState) {\n    if (uiState.hasOwnProperty(key)) {\n        const sVal = Number(savedState[key]);\n        const uVal = Number(uiState[key]);\n        if (!isNaN(sVal) && !isNaN(uVal)) {\n            if (Math.abs(sVal - uVal) > 0.00001) { hasUnsavedChanges = true; break; }\n        } else if (String(savedState[key]) !== String(uiState[key])) {\n            hasUnsavedChanges = true; break;\n        }\n    }\n}\nconst statusMessage = hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\";\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 380,
        "wires": [
            [
                "a2ac8a2291125cc9"
            ]
        ]
    },
    {
        "id": "7ce78f07591da608",
        "type": "ui_button",
        "z": "d769e22348317e1e",
        "name": "Чтение PID Config",
        "group": "2d25a3947cc3202c",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение PID",
        "tooltip": "Прочитать конфигурацию ПИД из файла",
        "icon": "fa-download",
        "payload": "read_pid_config",
        "payloadType": "str",
        "topic": "read_pid_config",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "363a07845bc66207"
            ]
        ]
    },
    {
        "id": "363a07845bc66207",
        "type": "link out",
        "z": "d769e22348317e1e",
        "name": "link out: trigger-read-pid-config",
        "links": [
            "f34ec6b8c2cba982"
        ],
        "x": 430,
        "y": 60,
        "wires": []
    },
    {
        "id": "a2ac8a2291125cc9",
        "type": "ui_text",
        "z": "d769e22348317e1e",
        "group": "2d25a3947cc3202c",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус PID Config",
        "label": "Статус:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 950,
        "y": 500,
        "wires": []
    },
    {
        "id": "b79b897c42096b9d",
        "type": "ui_button",
        "z": "d769e22348317e1e",
        "name": "Запись PID Config",
        "group": "2d25a3947cc3202c",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись PID",
        "tooltip": "Сохранить конфигурацию ПИД в файл",
        "icon": "fa-upload",
        "payload": "save_pid_config",
        "payloadType": "str",
        "topic": "save_pid_config",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "7c4b2db39f4bb95c"
            ]
        ]
    },
    {
        "id": "7c4b2db39f4bb95c",
        "type": "link out",
        "z": "d769e22348317e1e",
        "name": "link out: trigger-save-pid-config",
        "links": [
            "7a8bf9a7db063c35"
        ],
        "x": 430,
        "y": 120,
        "wires": []
    },
    {
        "id": "27b6d41e9cf2a403",
        "type": "ui_dropdown",
        "z": "d769e22348317e1e",
        "name": "Выбор PV для ПИД",
        "label": "Контролируемая переменная (PV) (pid_pv_select_key):",
        "tooltip": "Выберите переменную для ПИД-регулирования",
        "group": "2852bc2315c1b1d0",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Кислотность (ckisl - 494)",
                "value": 494,
                "type": "num"
            },
            {
                "label": "Аммиак (camm - 492)",
                "value": 492,
                "type": "num"
            },
            {
                "label": "pH (ph - 498)",
                "value": 498,
                "type": "num"
            },
            {
                "label": "Redox (ai3ph5smus - 502)",
                "value": 502,
                "type": "num"
            },
            {
                "label": "Redox 2 (ai4p2h5smus - 514)",
                "value": 514,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "pid_pv_select_key",
        "topicType": "str",
        "className": "",
        "x": 680,
        "y": 60,
        "wires": [
            [
                "dca7923f75847730"
            ]
        ]
    },
    {
        "id": "50878a2ac1a2f0f5",
        "type": "ui_numeric",
        "z": "d769e22348317e1e",
        "name": "Уставка ПИД",
        "label": "Уставка (Setpoint) (pid_setpoint):",
        "group": "2852bc2315c1b1d0",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_setpoint",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.01,
        "x": 680,
        "y": 100,
        "wires": [
            [
                "dca7923f75847730"
            ]
        ]
    },
    {
        "id": "b66a1b8dbc795905",
        "type": "ui_switch",
        "z": "d769e22348317e1e",
        "name": "Включить ПИД",
        "label": "ПИД Включен (pid_enable):",
        "group": "2852bc2315c1b1d0",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "topic": "pid_enable",
        "onvalue": "1",
        "onvalueType": "num",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "offcolor": "",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "dca7923f75847730"
            ]
        ]
    },
    {
        "id": "0acbafba45d101a9",
        "type": "ui_switch",
        "z": "d769e22348317e1e",
        "name": "Тип клапана",
        "label": "Клапан Нормально Закрытый (NC) (pid_valve_is_NC):",
        "tooltip": "ВКЛ если клапан НЗ, ВЫКЛ если клапан НО",
        "group": "2852bc2315c1b1d0",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_valve_is_NC",
        "onvalue": "1",
        "onvalueType": "num",
        "offvalue": "0",
        "offvalueType": "num",
        "x": 950,
        "y": 140,
        "wires": [
            [
                "dca7923f75847730"
            ]
        ]
    },
    {
        "id": "3c5515aac7f85ca4",
        "type": "ui_numeric",
        "z": "d769e22348317e1e",
        "name": "Выход при отключении",
        "label": "Выход при откл. (0-1) (pid_disabled_op):",
        "group": "2852bc2315c1b1d0",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_disabled_op",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": 1,
        "step": 0.01,
        "x": 970,
        "y": 200,
        "wires": [
            [
                "dca7923f75847730"
            ]
        ]
    },
    {
        "id": "83373f5d7231b301",
        "type": "ui_numeric",
        "z": "d769e22348317e1e",
        "name": "Пропорциональный диапазон",
        "label": "Пропорц. диапазон (pid_prop_band):",
        "group": "b0d59d8cd8ab1e42",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_prop_band",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": 10000,
        "step": 0.1,
        "x": 680,
        "y": 260,
        "wires": [
            [
                "dca7923f75847730"
            ]
        ]
    },
    {
        "id": "c3ab72d03cccb6cd",
        "type": "ui_numeric",
        "z": "d769e22348317e1e",
        "name": "Время интегрирования",
        "label": "Время интегрир. (сек) (pid_t_integral):",
        "group": "b0d59d8cd8ab1e42",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_t_integral",
        "format": "{{value}}",
        "min": 0,
        "max": 72000,
        "step": 1,
        "x": 680,
        "y": 300,
        "wires": [
            [
                "dca7923f75847730"
            ]
        ]
    },
    {
        "id": "9c0343f143f8999e",
        "type": "ui_numeric",
        "z": "d769e22348317e1e",
        "name": "Время дифференцирования",
        "label": "Время дифф. (сек) (pid_t_derivative):",
        "group": "b0d59d8cd8ab1e42",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_t_derivative",
        "format": "{{value}}",
        "min": 0,
        "max": 72000,
        "step": 1,
        "x": 680,
        "y": 340,
        "wires": [
            [
                "dca7923f75847730"
            ]
        ]
    },
    {
        "id": "ea0366501e55158a",
        "type": "ui_numeric",
        "z": "d769e22348317e1e",
        "name": "Макс. интервал выборки",
        "label": "Макс. интервал (сек) (pid_max_interval):",
        "group": "0409730677eef917",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_max_interval",
        "format": "{{value}}",
        "min": 1,
        "max": 3600,
        "step": 1,
        "x": 680,
        "y": 460,
        "wires": [
            [
                "dca7923f75847730"
            ]
        ]
    },
    {
        "id": "d52252959544fbaa",
        "type": "ui_numeric",
        "z": "d769e22348317e1e",
        "name": "Коэф. сглаживания произв.",
        "label": "Коэф. сглаж. произв. (pid_smooth_factor):",
        "group": "0409730677eef917",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_smooth_factor",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": 10,
        "step": 0.1,
        "x": 680,
        "y": 500,
        "wires": [
            [
                "dca7923f75847730"
            ]
        ]
    },
    {
        "id": "8a9c2336496fe555",
        "type": "ui_text",
        "z": "d769e22348317e1e",
        "group": "0409730677eef917",
        "order": 3,
        "width": 12,
        "height": 1,
        "name": "Сохраненный интеграл",
        "label": "Сохраненный Интеграл (для pid_integral_default):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 680,
        "y": 540,
        "wires": []
    },
    {
        "id": "8d9eaec6c6ae7039",
        "type": "link in",
        "z": "d769e22348317e1e",
        "name": "link in: integral live update",
        "links": [
            "54037bd396205d3e"
        ],
        "x": 195,
        "y": 600,
        "wires": [
            [
                "f59fefd8ac961480"
            ]
        ]
    },
    {
        "id": "f59fefd8ac961480",
        "type": "function",
        "z": "d769e22348317e1e",
        "name": "Update uiState with Live Integral",
        "func": "const uiState = global.get('uiState_pidconfig') || {};\n\n// Обновляем значение интеграла в состоянии UI\n// Это важно, чтобы при сохранении записалось актуальное значение\nuiState.pid_integral_persist = msg.payload;\nglobal.set('uiState_pidconfig', uiState);\n\n// Просто передаем значение дальше для отображения\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 600,
        "wires": [
            [
                "714bfc6fd7f498e9"
            ]
        ]
    },
    {
        "id": "714bfc6fd7f498e9",
        "type": "change",
        "z": "d769e22348317e1e",
        "name": "Format to 3 decimal places",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$round(payload, 3)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 620,
        "wires": [
            [
                "8a9c2336496fe555"
            ]
        ]
    },
    {
        "id": "0d870807289fdcf1",
        "type": "link in",
        "z": "d769e22348317e1e",
        "name": "link in: PV/SP for PID Chart",
        "links": [
            "db7da3e22f117dbc"
        ],
        "x": 1025,
        "y": 700,
        "wires": [
            [
                "80792cebb899b7ff"
            ]
        ]
    },
    {
        "id": "0bf6e4764fdbc300",
        "type": "ui_chart",
        "z": "d769e22348317e1e",
        "name": "PV и Уставка (SP)",
        "group": "bffa24bb5659d45b",
        "order": 1,
        "width": 12,
        "height": 6,
        "label": "Процесс (PV) vs Уставка (SP)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#d62728",
            "#9467bd",
            "#8c564b",
            "#e377c2",
            "#7f7f7f",
            "#bcbd22"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "x": 1245,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "5d5c52b09e23dd45",
        "type": "link in",
        "z": "d769e22348317e1e",
        "name": "link in: MV (0-1) for PID Chart",
        "links": [
            "ed26877fd873eed1"
        ],
        "x": 1025,
        "y": 760,
        "wires": [
            [
                "748483001e508d5f"
            ]
        ]
    },
    {
        "id": "13c4d4b182099029",
        "type": "ui_chart",
        "z": "d769e22348317e1e",
        "name": "Выход ПИД (0-1)",
        "group": "bffa24bb5659d45b",
        "order": 2,
        "width": 12,
        "height": 6,
        "label": "Управляющее воздействие (0-1)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "5",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#2ca02c"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1245,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "f7c919a95fad3274",
        "type": "link in",
        "z": "d769e22348317e1e",
        "name": "link in: MV (4-20mA) for PID Chart",
        "links": [
            "1ac90cc83b2e221f"
        ],
        "x": 1025,
        "y": 820,
        "wires": [
            [
                "54c13972a7b560a9"
            ]
        ]
    },
    {
        "id": "dbc522466d52d3ec",
        "type": "ui_chart",
        "z": "d769e22348317e1e",
        "name": "Сигнал на клапан (4-20 мА)",
        "group": "bffa24bb5659d45b",
        "order": 3,
        "width": 12,
        "height": 6,
        "label": "Ток на клапане (4-20 мА)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "4",
        "ymax": "20",
        "removeOlder": "5",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#d62728"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1245,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "80792cebb899b7ff",
        "type": "rbe",
        "z": "d769e22348317e1e",
        "name": "Filter unchanged PV_SP",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 1185,
        "y": 700,
        "wires": [
            [
                "1127eae7f97840c8"
            ]
        ]
    },
    {
        "id": "748483001e508d5f",
        "type": "rbe",
        "z": "d769e22348317e1e",
        "name": "Filter unchanged MV_01",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 1185,
        "y": 760,
        "wires": [
            [
                "7161d41cc6344a2c"
            ]
        ]
    },
    {
        "id": "54c13972a7b560a9",
        "type": "rbe",
        "z": "d769e22348317e1e",
        "name": "Filter unchanged MV_4_20",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 1185,
        "y": 820,
        "wires": [
            [
                "9773dffd1a9b46de"
            ]
        ]
    },
    {
        "id": "246940f0fe7df7b7",
        "type": "inject",
        "z": "fab7173f60094a7c",
        "name": "Запуск ПИД 17c (каждые 5 сек)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "17",
        "topic": "calculate_pid",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 100,
        "wires": [
            [
                "e5f60558b3134e4c"
            ]
        ]
    },
    {
        "id": "e5f60558b3134e4c",
        "type": "function",
        "z": "fab7173f60094a7c",
        "name": "Prepare PID Input & Parameters",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\nconst pvKeyMap = {\n    494: \"ckisl\",\n    492: \"camm\",\n    498: \"ph\",\n    502: \"ai3ph5smus\",\n    514: \"ai4p2h5smus\"\n};\n\nconst selectedPvKeyCode = g('pid_pv_select_key') || 498;\nconst pvGlobalVarName = pvKeyMap[selectedPvKeyCode];\n\nif (!pvGlobalVarName) {\n    node.error(`Неизвестный ключ PV для ПИД: ${selectedPvKeyCode}`);\n    return null;\n}\n\nconst processValue = Number(g(pvGlobalVarName));\nif (isNaN(processValue)) {\n    node.error(`Значение для PV '${pvGlobalVarName}' не является числом: ${g(pvGlobalVarName)}`);\n    s('pid_current_pv_value', null);\n    return null;\n}\n\ns('pid_current_pv_value', processValue);\n\n// Выход 0: Сообщение для ПИД-узла\nlet pidMsg = { payload: processValue };\npidMsg.setpoint = Number(g('pid_setpoint') || 0);\nconst propBand = Number(g('pid_prop_band') || 100);\npidMsg.prop_band = propBand;\npidMsg.t_integral = Number(g('pid_t_integral') || 3600);\npidMsg.t_derivative = Number(g('pid_t_derivative') || 0);\npidMsg.max_interval = Number(g('pid_max_interval') || 60);\npidMsg.smooth_factor = Number(g('pid_smooth_factor') || 0);\npidMsg.enable = (g('pid_enable') === 1 || g('pid_enable') === true) ? 1 : 0;\npidMsg.disabled_op = Number(g('pid_disabled_op') || 0);\n\nconst integralPersist = Number(g('pid_integral_persist') || 0);\nif (propBand !== 0) {\n    pidMsg.integral_default = 0.5 - (integralPersist / propBand);\n} else {\n    pidMsg.integral_default = 0.5;\n}\n\nnode.status({ text: `PV (${pvGlobalVarName}): ${processValue.toFixed(3)}, SP: ${pidMsg.setpoint.toFixed(3)}` });\n\n// Выход 1: PV для графика\nconst pvChartMsg = { topic: \"PV_PID\", payload: processValue };\n// Выход 2: SP для графика\nconst spChartMsg = { topic: \"Setpoint_PID\", payload: pidMsg.setpoint };\n\nreturn [pidMsg, pvChartMsg, spChartMsg];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "90da8ac38b9867b9"
            ],
            [
                "db7da3e22f117dbc"
            ],
            [
                "db7da3e22f117dbc"
            ]
        ]
    },
    {
        "id": "70dbb741bb367874",
        "type": "function",
        "z": "fab7173f60094a7c",
        "name": "Process PID Output & Valve Logic",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\nconst pidOutputRaw = Number(msg.payload);\nconst currentIntegral = msg.integral;\n\ns('pid_output_actual', pidOutputRaw);\ns('pid_integral_persist', currentIntegral);\n\nconst valveIsNC = (g('pid_valve_is_NC') === 1 || g('pid_valve_is_NC') === true);\nlet valveCommandFinal = pidOutputRaw;\n\nif (!valveIsNC) {\n    valveCommandFinal = 1.0 - pidOutputRaw;\n    node.log(`PID Output (raw): ${pidOutputRaw.toFixed(3)}, Valve NO, Final Command: ${valveCommandFinal.toFixed(3)}`);\n} else {\n    node.log(`PID Output (raw): ${pidOutputRaw.toFixed(3)}, Valve NC, Final Command: ${valveCommandFinal.toFixed(3)}`);\n}\n\ns('pid_valve_command_final', valveCommandFinal);\n\n// Выход 0: Финальная команда на клапан (для отладки/прямой передачи)\nlet outputMsgValveCmd = { payload: valveCommandFinal };\n\n// Выход 1: Обновленное значение pid_integral_persist для UI\nlet outputMsgIntegral = { topic: \"pid_integral_persist\", payload: currentIntegral };\n\n// Выход 2: Команда на клапан для графика\nlet outputMsgValveCmdForChart = { topic: \"MV_0-1_PID\", payload: valveCommandFinal };\n\nreturn [outputMsgValveCmd, outputMsgIntegral, outputMsgValveCmdForChart];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            [
                "56af6930f7ce405a"
            ],
            [
                "54037bd396205d3e"
            ],
            [
                "ed26877fd873eed1"
            ]
        ]
    },
    {
        "id": "56af6930f7ce405a",
        "type": "debug",
        "z": "fab7173f60094a7c",
        "name": "Debug: Final Valve Command (0-1)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 820,
        "y": 200,
        "wires": []
    },
    {
        "id": "54037bd396205d3e",
        "type": "link out",
        "z": "fab7173f60094a7c",
        "name": "Update Integral Persist in UI",
        "mode": "link",
        "links": [
            "8d9eaec6c6ae7039"
        ],
        "x": 1075,
        "y": 260,
        "wires": []
    },
    {
        "id": "90da8ac38b9867b9",
        "type": "PID",
        "z": "fab7173f60094a7c",
        "name": "ПИД Регулятор Процесса",
        "setpoint": 21,
        "pb": 1,
        "ti": 9999,
        "td": 0,
        "integral_default": 0.5,
        "smooth_factor": 3,
        "max_interval": 600,
        "enable": 1,
        "disabled_op": 0,
        "x": 780,
        "y": 40,
        "wires": [
            [
                "70dbb741bb367874"
            ]
        ]
    },
    {
        "id": "db7da3e22f117dbc",
        "type": "link out",
        "z": "fab7173f60094a7c",
        "name": "link out: PV/SP for Chart",
        "mode": "link",
        "links": [
            "0d870807289fdcf1"
        ],
        "x": 435,
        "y": 320,
        "wires": []
    },
    {
        "id": "ed26877fd873eed1",
        "type": "link out",
        "z": "fab7173f60094a7c",
        "name": "link out: MV (0-1) for Chart",
        "mode": "link",
        "links": [
            "5d5c52b09e23dd45"
        ],
        "x": 995,
        "y": 320,
        "wires": []
    },
    {
        "id": "d4710df39ca40a26",
        "type": "inject",
        "z": "4ac5bdc990fc4dcf",
        "name": "Ежедневно в 03:00",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "daily_backup",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "1363ff8b09a8a960"
            ]
        ]
    },
    {
        "id": "1363ff8b09a8a960",
        "type": "function",
        "z": "4ac5bdc990fc4dcf",
        "name": "Подготовка путей для бэкапа (7 файлов)",
        "func": "const sourceDir = '/home/root/.node-red/save/';\nconst backupDir = '/home/root/.node-red/backup/'; \nconst filesToBackup = [\n    'variables_all.json', \n    'variables_calculation.json', \n    'ph_calc_variables.json',\n    'redox_variables.json',\n    'ao_lc_config.json',\n    'redox_variables2.json',\n    'pid_config.json' // Добавлен 7-й файл\n];\n\nconst now = new Date();\nconst year = now.getFullYear();\nconst month = (now.getMonth() + 1).toString().padStart(2, '0');\nconst day = now.getDate().toString().padStart(2, '0');\nconst dateSuffix = `${year}-${month}-${day}`;\n\nlet messages = [];\nlet isManual = (msg.topic === 'manual_backup'); \nlet sourceTrigger = isManual ? \"[Manual Backup]\" : \"[Daily Backup]\";\n\nnode.log(`${sourceTrigger} Запуск резервного копирования для ${filesToBackup.length} файлов...`);\n\nfor (const filename of filesToBackup) {\n    const sourcePath = sourceDir + filename;\n    const baseName = filename.split('.json')[0];\n    const backupFilename = `${baseName}_${dateSuffix}.json`;\n    const backupPath = backupDir + backupFilename;\n    \nmessages.push({ \n        sourceFilename: sourcePath, \n        backupFilename: backupPath,\n        topic: filename, \n        manualTrigger: isManual \n    });\n}\nreturn [ messages[0], messages[1], messages[2], messages[3], messages[4], messages[5], messages[6] ];",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "45373e9445c810a7"
            ],
            [
                "4ae9c989464abdb4"
            ],
            [
                "b5aea5ef0d275a34"
            ],
            [
                "c8891d4f64610e3c"
            ],
            [
                "f6b71e494d4a98b3"
            ],
            [
                "1167aee60d8ff75e"
            ],
            [
                "7a5456db53972fa7"
            ]
        ],
        "inputLabels": [
            "Daily or Manual Trigger"
        ]
    },
    {
        "id": "45373e9445c810a7",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read variables_all.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 690,
        "y": 60,
        "wires": [
            [
                "b603e8596520d479"
            ]
        ]
    },
    {
        "id": "b603e8596520d479",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Backup 1",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 60,
        "wires": [
            [
                "5e121f5ed9200e30"
            ]
        ]
    },
    {
        "id": "5e121f5ed9200e30",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Success Msg 1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 60,
        "wires": [
            [
                "468eb3ced7aaa309"
            ]
        ]
    },
    {
        "id": "4ae9c989464abdb4",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read variables_calculation.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 120,
        "wires": [
            [
                "a4f57d59d04bb1cd"
            ]
        ]
    },
    {
        "id": "a4f57d59d04bb1cd",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Backup 2",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 120,
        "wires": [
            [
                "f42d8000d3e2c910"
            ]
        ]
    },
    {
        "id": "f42d8000d3e2c910",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Success Msg 2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 120,
        "wires": [
            [
                "468eb3ced7aaa309"
            ]
        ]
    },
    {
        "id": "b5aea5ef0d275a34",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read ph_calc_variables.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 660,
        "y": 180,
        "wires": [
            [
                "4ced90c6ac132694"
            ]
        ]
    },
    {
        "id": "4ced90c6ac132694",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Backup 3",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 180,
        "wires": [
            [
                "c38bc3b99f6f7724"
            ]
        ]
    },
    {
        "id": "c38bc3b99f6f7724",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Success Msg 3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 180,
        "wires": [
            [
                "468eb3ced7aaa309"
            ]
        ]
    },
    {
        "id": "c8891d4f64610e3c",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read redox_variables.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 240,
        "wires": [
            [
                "dcf468355ad888e3"
            ]
        ]
    },
    {
        "id": "dcf468355ad888e3",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Backup 4",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 240,
        "wires": [
            [
                "ea54ba84f1673b4f"
            ]
        ]
    },
    {
        "id": "ea54ba84f1673b4f",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Success Msg 4",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 240,
        "wires": [
            [
                "468eb3ced7aaa309"
            ]
        ]
    },
    {
        "id": "f6b71e494d4a98b3",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read ao_lc_config.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 300,
        "wires": [
            [
                "470feac5e32844e8"
            ]
        ]
    },
    {
        "id": "470feac5e32844e8",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Backup 5",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 300,
        "wires": [
            [
                "0e32dc51a9225327"
            ]
        ]
    },
    {
        "id": "0e32dc51a9225327",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Success Msg 5",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 300,
        "wires": [
            [
                "468eb3ced7aaa309"
            ]
        ]
    },
    {
        "id": "1167aee60d8ff75e",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read redox_variables2.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "db619bc269b9db2e"
            ]
        ]
    },
    {
        "id": "db619bc269b9db2e",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Backup 6",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 360,
        "wires": [
            [
                "12164378edab7f7b"
            ]
        ]
    },
    {
        "id": "12164378edab7f7b",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Success Msg 6",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 360,
        "wires": [
            [
                "468eb3ced7aaa309"
            ]
        ]
    },
    {
        "id": "7a5456db53972fa7",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read pid_config.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 420,
        "wires": [
            [
                "0a5b0a262f2ae4fd"
            ]
        ]
    },
    {
        "id": "0a5b0a262f2ae4fd",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Backup 7",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 420,
        "wires": [
            [
                "58be12042f28cd06"
            ]
        ]
    },
    {
        "id": "58be12042f28cd06",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Success Msg 7",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 420,
        "wires": [
            [
                "468eb3ced7aaa309"
            ]
        ]
    },
    {
        "id": "468eb3ced7aaa309",
        "type": "join",
        "z": "4ac5bdc990fc4dcf",
        "name": "Join Backup Success (7)",
        "mode": "count",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "5",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 220,
        "wires": [
            [
                "a03609a52b94601d"
            ]
        ]
    },
    {
        "id": "a03609a52b94601d",
        "type": "ui_toast",
        "z": "4ac5bdc990fc4dcf",
        "position": "top right",
        "displayTime": "5",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Резервное Копирование",
        "name": "Backup Success Toast",
        "x": 1400,
        "y": 280,
        "wires": []
    },
    {
        "id": "f6790c0109f1fc0b",
        "type": "catch",
        "z": "4ac5bdc990fc4dcf",
        "name": "Catch Backup Errors",
        "scope": [
            "45373e9445c810a7",
            "b603e8596520d479",
            "4ae9c989464abdb4",
            "a4f57d59d04bb1cd",
            "b5aea5ef0d275a34",
            "4ced90c6ac132694",
            "c8891d4f64610e3c",
            "dcf468355ad888e3",
            "f6b71e494d4a98b3",
            "470feac5e32844e8",
            "1167aee60d8ff75e",
            "db619bc269b9db2e",
            "7a5456db53972fa7",
            "0a5b0a262f2ae4fd"
        ],
        "uncaught": false,
        "x": 1100,
        "y": 480,
        "wires": [
            [
                "f2d245bbb266fcd7",
                "636391e2d7178ac2"
            ]
        ]
    },
    {
        "id": "f2d245bbb266fcd7",
        "type": "debug",
        "z": "4ac5bdc990fc4dcf",
        "name": "Backup Error Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 480,
        "wires": []
    },
    {
        "id": "636391e2d7178ac2",
        "type": "ui_toast",
        "z": "4ac5bdc990fc4dcf",
        "position": "top right",
        "displayTime": "7",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Ошибка Резервного Копирования",
        "name": "Backup Error Toast",
        "x": 1370,
        "y": 540,
        "wires": []
    },
    {
        "id": "5635207c8d47f9d0",
        "type": "link in",
        "z": "4ac5bdc990fc4dcf",
        "name": "From Manual Backup Btn",
        "links": [
            "59fd1d0f99fdcc48"
        ],
        "x": 95,
        "y": 280,
        "wires": [
            [
                "1363ff8b09a8a960"
            ]
        ]
    },
    {
        "id": "859e0bc908216428",
        "type": "link in",
        "z": "4ac5bdc990fc4dcf",
        "name": "From Restore Backup Btn",
        "links": [
            "25a2b0bb09e27063"
        ],
        "x": 105,
        "y": 460,
        "wires": [
            [
                "a2b531f51bd6d33a"
            ]
        ]
    },
    {
        "id": "a2b531f51bd6d33a",
        "type": "function",
        "z": "4ac5bdc990fc4dcf",
        "name": "Подготовка путей для восстановления (7 файлов)",
        "func": "const backupDir = '/home/root/.node-red/backup/'; \nconst destDir = '/home/root/.node-red/save/'; \nconst filesToRestore = [\n    'variables_all.json', \n    'variables_calculation.json', \n    'ph_calc_variables.json',\n    'redox_variables.json',\n    'ao_lc_config.json',\n    'redox_variables2.json',\n    'pid_config.json' // Добавлен 7-й файл\n];\n\nconst now = new Date();\nconst year = now.getFullYear();\nconst month = (now.getMonth() + 1).toString().padStart(2, '0');\nconst day = now.getDate().toString().padStart(2, '0');\nconst dateSuffix = `${year}-${month}-${day}`; \n\nlet messages = [];\nnode.log(`[Manual Restore] Попытка восстановления из бэкапа от ${dateSuffix} для ${filesToRestore.length} файлов...`);\n\nfor (const filename of filesToRestore) {\n    const destPath = destDir + filename; \n    const baseName = filename.split('.json')[0];\n    const backupFilename = `${baseName}_${dateSuffix}.json`;\n    const sourcePath = backupDir + backupFilename; \n    \nmessages.push({ \n        sourceFilename: sourcePath, \n        destFilename: destPath,    \n        topic: filename,\n        backupDate: dateSuffix \n    });\n}\nreturn [ messages[0], messages[1], messages[2], messages[3], messages[4], messages[5], messages[6] ];",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "ab33c1e48291c12b"
            ],
            [
                "ca246ba41fabf5fa"
            ],
            [
                "639dbedaf3dfb0a9"
            ],
            [
                "0eb8f6f4dbe06d0e"
            ],
            [
                "beec3b6539462f04"
            ],
            [
                "68bf8111b681732a"
            ],
            [
                "644f67dd49d0bec9"
            ]
        ],
        "inputLabels": [
            "Restore Button Trigger"
        ]
    },
    {
        "id": "ab33c1e48291c12b",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read Backup variables_all.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 650,
        "y": 460,
        "wires": [
            [
                "a711cc1d623d668d"
            ]
        ]
    },
    {
        "id": "a711cc1d623d668d",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Restored 1",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 460,
        "wires": [
            [
                "e612977009b4a8ef"
            ]
        ]
    },
    {
        "id": "e612977009b4a8ef",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Restore Success 1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "873cff6a442b8e73"
            ]
        ]
    },
    {
        "id": "ca246ba41fabf5fa",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read Backup variables_calculation.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 660,
        "y": 520,
        "wires": [
            [
                "3a7e4269364988b6"
            ]
        ]
    },
    {
        "id": "3a7e4269364988b6",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Restored 2",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 520,
        "wires": [
            [
                "8afbf6eac12c07a1"
            ]
        ]
    },
    {
        "id": "8afbf6eac12c07a1",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Restore Success 2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 520,
        "wires": [
            [
                "873cff6a442b8e73"
            ]
        ]
    },
    {
        "id": "639dbedaf3dfb0a9",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read Backup ph_calc_variables.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 650,
        "y": 580,
        "wires": [
            [
                "70640f2457bd2a41"
            ]
        ]
    },
    {
        "id": "70640f2457bd2a41",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Restored 3",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 580,
        "wires": [
            [
                "1ed0adfcac17ddda"
            ]
        ]
    },
    {
        "id": "1ed0adfcac17ddda",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Restore Success 3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 580,
        "wires": [
            [
                "873cff6a442b8e73"
            ]
        ]
    },
    {
        "id": "0eb8f6f4dbe06d0e",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read Backup redox_variables.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 640,
        "wires": [
            [
                "41c0a68cb21dc108"
            ]
        ]
    },
    {
        "id": "41c0a68cb21dc108",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Restored 4",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 640,
        "wires": [
            [
                "b3ea4463adee0d1a"
            ]
        ]
    },
    {
        "id": "b3ea4463adee0d1a",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Restore Success 4",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 640,
        "wires": [
            [
                "873cff6a442b8e73"
            ]
        ]
    },
    {
        "id": "beec3b6539462f04",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read Backup ao_lc_config.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 700,
        "wires": [
            [
                "470feac5e32844e8"
            ]
        ]
    },
    {
        "id": "da8b3f9565d2e84f",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Restore Success 5",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 700,
        "wires": [
            [
                "873cff6a442b8e73"
            ]
        ]
    },
    {
        "id": "68bf8111b681732a",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read Backup redox_variables2.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 760,
        "wires": [
            [
                "3d07f293efc2e433"
            ]
        ]
    },
    {
        "id": "3d07f293efc2e433",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Restored 6",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 760,
        "wires": [
            [
                "970ba8888c135118"
            ]
        ]
    },
    {
        "id": "970ba8888c135118",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Restore Success 6",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 760,
        "wires": [
            [
                "873cff6a442b8e73"
            ]
        ]
    },
    {
        "id": "644f67dd49d0bec9",
        "type": "file in",
        "z": "4ac5bdc990fc4dcf",
        "name": "Read Backup pid_config.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 820,
        "wires": [
            [
                "6cf6fcfeefcae362"
            ]
        ]
    },
    {
        "id": "6cf6fcfeefcae362",
        "type": "file",
        "z": "4ac5bdc990fc4dcf",
        "name": "Write Restored 7",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 820,
        "wires": [
            [
                "9469a7de4e9e8008"
            ]
        ]
    },
    {
        "id": "9469a7de4e9e8008",
        "type": "change",
        "z": "4ac5bdc990fc4dcf",
        "name": "Restore Success 7",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 820,
        "wires": [
            [
                "873cff6a442b8e73"
            ]
        ]
    },
    {
        "id": "873cff6a442b8e73",
        "type": "join",
        "z": "4ac5bdc990fc4dcf",
        "name": "Join Restore Success (7)",
        "mode": "count",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "5",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1350,
        "y": 610,
        "wires": [
            [
                "785de2fdaf81cd81",
                "a1be82c82ae84bde",
                "248a22c29143f98f",
                "026db46d70a413ce",
                "1774d9088d1aa3e6",
                "2d6d070a6d95f508",
                "4dec1ed11d5393b6",
                "3ddecc61934b92f1"
            ]
        ]
    },
    {
        "id": "785de2fdaf81cd81",
        "type": "ui_toast",
        "z": "4ac5bdc990fc4dcf",
        "position": "top right",
        "displayTime": "5",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Восстановление Завершено",
        "name": "Restore Success Toast",
        "x": 1420,
        "y": 700,
        "wires": []
    },
    {
        "id": "acf8b356c08dbdd6",
        "type": "catch",
        "z": "4ac5bdc990fc4dcf",
        "name": "Catch Restore Errors",
        "scope": [
            "ab33c1e48291c12b",
            "a711cc1d623d668d",
            "ca246ba41fabf5fa",
            "3a7e4269364988b6",
            "639dbedaf3dfb0a9",
            "70640f2457bd2a41",
            "0eb8f6f4dbe06d0e",
            "41c0a68cb21dc108",
            "beec3b6539462f04",
            "470feac5e32844e8",
            "68bf8111b681732a",
            "3d07f293efc2e433",
            "644f67dd49d0bec9",
            "6cf6fcfeefcae362"
        ],
        "uncaught": false,
        "x": 1120,
        "y": 880,
        "wires": [
            [
                "be2a948df055fc18",
                "1f393dc99746dcb0"
            ]
        ]
    },
    {
        "id": "be2a948df055fc18",
        "type": "debug",
        "z": "4ac5bdc990fc4dcf",
        "name": "Restore Error Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 880,
        "wires": []
    },
    {
        "id": "1f393dc99746dcb0",
        "type": "ui_toast",
        "z": "4ac5bdc990fc4dcf",
        "position": "top right",
        "displayTime": "7",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Ошибка Восстановления",
        "name": "Restore Error Toast",
        "x": 1390,
        "y": 940,
        "wires": []
    },
    {
        "id": "a1be82c82ae84bde",
        "type": "link out",
        "z": "4ac5bdc990fc4dcf",
        "name": "Trigger Read All Vars",
        "mode": "link",
        "links": [
            "fe1f9125261c43c8"
        ],
        "x": 1625,
        "y": 520,
        "wires": []
    },
    {
        "id": "248a22c29143f98f",
        "type": "link out",
        "z": "4ac5bdc990fc4dcf",
        "name": "Trigger Read Calc Vars",
        "mode": "link",
        "links": [
            "8489b771daf8dfc0"
        ],
        "x": 1625,
        "y": 560,
        "wires": []
    },
    {
        "id": "026db46d70a413ce",
        "type": "link out",
        "z": "4ac5bdc990fc4dcf",
        "name": "Trigger Read PH Vars",
        "mode": "link",
        "links": [
            "0f58740bdde9faeb"
        ],
        "x": 1625,
        "y": 600,
        "wires": []
    },
    {
        "id": "1774d9088d1aa3e6",
        "type": "link out",
        "z": "4ac5bdc990fc4dcf",
        "name": "Trigger Read Redox Vars",
        "mode": "link",
        "links": [
            "6eb2276b7da0788c"
        ],
        "x": 1625,
        "y": 640,
        "wires": []
    },
    {
        "id": "2d6d070a6d95f508",
        "type": "link out",
        "z": "4ac5bdc990fc4dcf",
        "name": "Trigger Read AO LC Vars",
        "mode": "link",
        "links": [
            "e36846a3ba56ba76"
        ],
        "x": 1625,
        "y": 680,
        "wires": []
    },
    {
        "id": "4dec1ed11d5393b6",
        "type": "link out",
        "z": "4ac5bdc990fc4dcf",
        "name": "Trigger Read Redox2 Vars after Restore",
        "mode": "link",
        "links": [
            "beb56e8d53aea483"
        ],
        "x": 1625,
        "y": 720,
        "wires": []
    },
    {
        "id": "3ddecc61934b92f1",
        "type": "link out",
        "z": "4ac5bdc990fc4dcf",
        "name": "Trigger Read PID Config after Restore",
        "mode": "link",
        "links": [
            "f34ec6b8c2cba982"
        ],
        "x": 1625,
        "y": 760,
        "wires": []
    },
    {
        "id": "6d5e8c4ef9d7a0c2",
        "type": "inject",
        "z": "e9378293b40785cc",
        "name": "Обновление даты/времени",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "home/datetime",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "9988d3cc5f6b02f1"
            ]
        ]
    },
    {
        "id": "9988d3cc5f6b02f1",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Форматировать дату/время для Home",
        "func": "const input = (typeof msg.payload === 'number' && Number.isFinite(msg.payload)) ? new Date(msg.payload) : new Date();\nconst now = Number.isNaN(input.getTime()) ? new Date() : input;\nconst pad = (value) => String(value).padStart(2, '0');\nconst date = `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())}`;\nconst time = `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(now.getSeconds())}`;\nconst weekdays = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\nconst weekday = weekdays[now.getDay()];\nreturn [\n    { payload: date },\n    { payload: time },\n    { payload: weekday.charAt(0).toUpperCase() + weekday.slice(1) }\n];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "8c1e7b0e33a4d21f"
            ],
            [
                "5ba90e9f2bbcd4b0"
            ],
            [
                "1a2f4d5e6c7b8a90"
            ]
        ]
    },
    {
        "z": "e9378293b40785cc",
        "group": "b5ad3d26d2dec3f7",
        "width": 6,
        "height": 1,
        "layout": "row-left",
        "className": "",
        "style": "",
        "font": "",
        "fontSize": "",
        "color": "",
        "wires": [],
        "id": "8c1e7b0e33a4d21f",
        "type": "ui_text",
        "name": "Home Date",
        "label": "Дата",
        "format": "{{msg.payload}}",
        "order": 4,
        "x": 700,
        "y": 80
    },
    {
        "z": "e9378293b40785cc",
        "group": "b5ad3d26d2dec3f7",
        "width": 6,
        "height": 1,
        "layout": "row-left",
        "className": "",
        "style": "",
        "font": "",
        "fontSize": "",
        "color": "",
        "wires": [],
        "id": "5ba90e9f2bbcd4b0",
        "type": "ui_text",
        "name": "Home Time",
        "label": "Время",
        "format": "{{msg.payload}}",
        "order": 5,
        "x": 700,
        "y": 120
    },
    {
        "z": "e9378293b40785cc",
        "group": "b5ad3d26d2dec3f7",
        "width": 6,
        "height": 1,
        "layout": "row-left",
        "className": "",
        "style": "",
        "font": "",
        "fontSize": "",
        "color": "",
        "wires": [],
        "id": "1a2f4d5e6c7b8a90",
        "type": "ui_text",
        "name": "Home Weekday",
        "label": "День недели",
        "format": "{{msg.payload}}",
        "order": 6,
        "x": 700,
        "y": 160
    },
    {
        "id": "4fcb1c6ff9ad2e3a",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Фильтр вывода графика AI",
        "func": "let enabled = flow.get('ai6717ChartEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('ai6717ChartEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 220,
        "wires": [
            [
                "e531123449713d2b"
            ]
        ]
    },
    {
        "id": "d0d1909f5c8a8c2d",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Управление графиком AI",
        "func": "const enabled = msg.payload === true;\nflow.set('ai6717ChartEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 220,
        "wires": [
            [
                "e531123449713d2b"
            ]
        ]
    },
    {
        "id": "8d7eacb5f0b1a123",
        "type": "ui_switch",
        "z": "e9378293b40785cc",
        "name": "Переключатель графика AI",
        "label": "Показывать график AI 6717",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "ai6717_chart_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 220,
        "wires": [
            [
                "d0d1909f5c8a8c2d"
            ]
        ]
    },
    {
        "id": "3cf2b281462911d0",
        "type": "inject",
        "z": "e9378293b40785cc",
        "name": "AI график: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "ai6717_chart_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "d0d1909f5c8a8c2d"
            ]
        ]
    },
    {
        "id": "6ae0f7de6ac4e10b",
        "type": "function",
        "z": "0aab3c6cefb9136c",
        "name": "Фильтр вывода графика итерации",
        "func": "let enabled = flow.get('iterationChartEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('iterationChartEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "2bb113fc6e830695"
            ]
        ]
    },
    {
        "id": "c6b4547f2b9de4e7",
        "type": "function",
        "z": "0aab3c6cefb9136c",
        "name": "Управление графиком итерации",
        "func": "const enabled = msg.payload === true;\nflow.set('iterationChartEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "2bb113fc6e830695"
            ]
        ]
    },
    {
        "id": "1d5a5e8cba4d153f",
        "type": "ui_switch",
        "z": "0aab3c6cefb9136c",
        "name": "Переключатель графика итерации",
        "label": "Показывать график итерации",
        "tooltip": "",
        "group": "iteration_ui_group",
        "order": 3,
        "width": 8,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "iteration_chart_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "c6b4547f2b9de4e7"
            ]
        ]
    },
    {
        "id": "b9f7f1b3e5c2dca8",
        "type": "inject",
        "z": "0aab3c6cefb9136c",
        "name": "Итерация: выключить график по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "iteration_chart_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "c6b4547f2b9de4e7"
            ]
        ]
    },
    {
        "id": "8771de98b6e947bf",
        "type": "ui_dropdown",
        "z": "e9378293b40785cc",
        "name": "Навигация по вкладкам",
        "label": "Перейти к вкладке",
        "tooltip": "Открыть скрытую вкладку",
        "group": "b5ad3d26d2dec3f7",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Результаты по Шагам",
                "value": "890b934665542552",
                "type": "str"
            },
            {
                "label": "Переменные Расчета",
                "value": "b52ad0f12cf76b90",
                "type": "str"
            },
            {
                "label": "Переменные 1 2 3 4 5",
                "value": "83b781694d048a60",
                "type": "str"
            },
            {
                "label": "Переменные Расчета PH",
                "value": "01aa0c0329411915",
                "type": "str"
            },
            {
                "label": "Redox Потенциал",
                "value": "cbf35f7b08366f68",
                "type": "str"
            },
            {
                "label": "Redox Потенциал 2",
                "value": "471be57479d45576",
                "type": "str"
            },
            {
                "label": "Аналоговые Выходы LC",
                "value": "1d5f2aa7532ab803",
                "type": "str"
            },
            {
                "label": "Настройки ПИД",
                "value": "b53dacbc259cef59",
                "type": "str"
            },
            {
                "label": "История версий",
                "value": "f865e3b9a8326d9a",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "ui_navigation",
        "topicType": "str",
        "className": "",
        "x": 360,
        "y": 280,
        "wires": [
            [
                "bd122440f0c5475f"
            ]
        ]
    },
    {
        "id": "bd122440f0c5475f",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Открыть выбранную вкладку",
        "func": "const raw = msg?.payload;\nconst target = typeof raw === 'string' ? raw : (raw && typeof raw === 'object' && raw.hasOwnProperty('value') ? raw.value : null);\nif (!target) {\n    return null;\n}\nconst command = {\n    tabs: {\n        show: [target]\n    },\n    tab: target\n};\nmsg.ui_control = command;\nmsg.payload = command;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "215d87da53d7459e"
            ]
        ]
    },
    {
        "id": "215d87da53d7459e",
        "type": "ui_ui_control",
        "z": "e9378293b40785cc",
        "name": "UI Control",
        "events": "all",
        "x": 920,
        "y": 160,
        "wires": [
            [
                "2900b784d0d74b00"
            ]
        ]
    },
    {
        "id": "2900b784d0d74b00",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "UI готов → включить тяжёлые потоки",
        "func": "const payload = msg && typeof msg === 'object' ? msg.payload || {} : {};\nconst event = payload.event || msg.event;\nif (event === 'disconnect') {\n    context.set('uiReady', false);\n    return null;\n}\nif (event === 'connect') {\n    if (!context.get('uiReady')) {\n        context.set('uiReady', true);\n        return { enable: true, topic: 'ui_ready' };\n    }\n    return null;\n}\nconst tabCandidate = payload.tab || payload.name || payload.id;\nconst isHomeTab = tabCandidate === 'Home' || tabCandidate === 'bf598e27688ff446';\nif (isHomeTab && !context.get('uiReady')) {\n    context.set('uiReady', true);\n    return { enable: true, topic: 'ui_ready' };\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 160,
        "wires": [
            [
                "749ecdd49863493c"
            ]
        ]
    },
    {
        "id": "749ecdd49863493c",
        "type": "link out",
        "z": "e9378293b40785cc",
        "name": "link out: UI Ready",
        "mode": "link",
        "links": [
            "9d1f564b8088416c",
            "394dafa7ab5c40a7",
            "fc7dda274d9a48c9",
            "a2678400cbea4bc9",
            "4f8165a1a9f64749"
        ],
        "x": 1410,
        "y": 160,
        "wires": []
    },
    {
        "id": "d6f6df5ffa0d4539",
        "type": "ui_switch",
        "z": "e9378293b40785cc",
        "name": "Переключатель графиков PH",
        "label": "Показывать графики pH",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "ph_charts_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "975ce18421ea4974"
            ]
        ]
    },
    {
        "id": "975ce18421ea4974",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Подготовить сигнал PH",
        "func": "const enabled = msg.payload === true;\nmsg.enabled = enabled;\nmsg.payload = enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "01a1452a49e64ec6"
            ]
        ]
    },
    {
        "id": "01a1452a49e64ec6",
        "type": "link out",
        "z": "e9378293b40785cc",
        "name": "link out: PH charts toggle",
        "mode": "link",
        "links": [
            "2825dc0b037f4b01"
        ],
        "x": 910,
        "y": 320,
        "wires": []
    },
    {
        "id": "2825dc0b037f4b01",
        "type": "link in",
        "z": "0adabbe16538e192",
        "name": "link in: PH charts toggle",
        "links": [
            "01a1452a49e64ec6"
        ],
        "x": 120,
        "y": 40,
        "wires": [
            [
                "59d8c899d6bb4b62"
            ]
        ]
    },
    {
        "id": "59d8c899d6bb4b62",
        "type": "function",
        "z": "0adabbe16538e192",
        "name": "Управление графиками PH",
        "func": "const enabled = msg.payload === true || msg.enabled === true;\nflow.set('phChartsEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "4c4a6fb249ca3945",
                "2c064929395c8586",
                "0ff73fe8805d3bba"
            ]
        ]
    },
    {
        "id": "65c2f13bf0c44450",
        "type": "inject",
        "z": "0adabbe16538e192",
        "name": "PH графики: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "ph_charts_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "59d8c899d6bb4b62"
            ]
        ]
    },
    {
        "id": "fb91e7615a2f4b45",
        "type": "function",
        "z": "0adabbe16538e192",
        "name": "Фильтр графика PH",
        "func": "let enabled = flow.get('phChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('phChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 600,
        "wires": [
            [
                "4c4a6fb249ca3945"
            ]
        ]
    },
    {
        "id": "31d853f04ac547f3",
        "type": "function",
        "z": "0adabbe16538e192",
        "name": "Фильтр графика PH",
        "func": "let enabled = flow.get('phChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('phChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 660,
        "wires": [
            [
                "2c064929395c8586"
            ]
        ]
    },
    {
        "id": "71ddcd23b69440d7",
        "type": "function",
        "z": "0adabbe16538e192",
        "name": "Фильтр графика PH",
        "func": "let enabled = flow.get('phChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('phChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 720,
        "wires": [
            [
                "0ff73fe8805d3bba"
            ]
        ]
    },
    {
        "id": "43794e479e0f46bc",
        "type": "ui_switch",
        "z": "e9378293b40785cc",
        "name": "Переключатель графиков Redox",
        "label": "Показывать графики Redox",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 10,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "redox_charts_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 360,
        "wires": [
            [
                "b9b0ed835c8d4581"
            ]
        ]
    },
    {
        "id": "b9b0ed835c8d4581",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Подготовить сигнал Redox",
        "func": "const enabled = msg.payload === true;\nmsg.enabled = enabled;\nmsg.payload = enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "af18aa1c2bdc4b10"
            ]
        ]
    },
    {
        "id": "af18aa1c2bdc4b10",
        "type": "link out",
        "z": "e9378293b40785cc",
        "name": "link out: Redox charts toggle",
        "mode": "link",
        "links": [
            "b0bde6dd3c644264"
        ],
        "x": 910,
        "y": 360,
        "wires": []
    },
    {
        "id": "b0bde6dd3c644264",
        "type": "link in",
        "z": "59dd9bd5d7fbfa1b",
        "name": "link in: Redox charts toggle",
        "links": [
            "af18aa1c2bdc4b10"
        ],
        "x": 120,
        "y": 40,
        "wires": [
            [
                "5ab45bc732004627"
            ]
        ]
    },
    {
        "id": "5ab45bc732004627",
        "type": "function",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Управление графиками Redox",
        "func": "const enabled = msg.payload === true || msg.enabled === true;\nflow.set('redoxChartsEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "2fa96424ab656aac"
            ]
        ]
    },
    {
        "id": "33defd7e494343df",
        "type": "inject",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Redox графики: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "redox_charts_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "5ab45bc732004627"
            ]
        ]
    },
    {
        "id": "ea85da7c10d14b4b",
        "type": "function",
        "z": "59dd9bd5d7fbfa1b",
        "name": "Фильтр графика Redox",
        "func": "let enabled = flow.get('redoxChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('redoxChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 480,
        "wires": [
            [
                "2fa96424ab656aac"
            ]
        ]
    },
    {
        "id": "e1ede3fc25264f1f",
        "type": "ui_switch",
        "z": "e9378293b40785cc",
        "name": "Переключатель графиков Redox 2",
        "label": "Показывать графики Redox 2",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 11,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "redox2_charts_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 400,
        "wires": [
            [
                "5849bea0100f4687"
            ]
        ]
    },
    {
        "id": "5849bea0100f4687",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Подготовить сигнал Redox 2",
        "func": "const enabled = msg.payload === true;\nmsg.enabled = enabled;\nmsg.payload = enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 400,
        "wires": [
            [
                "c2b6b6799b9840ab"
            ]
        ]
    },
    {
        "id": "c2b6b6799b9840ab",
        "type": "link out",
        "z": "e9378293b40785cc",
        "name": "link out: Redox 2 charts toggle",
        "mode": "link",
        "links": [
            "720a5278561645c8"
        ],
        "x": 910,
        "y": 400,
        "wires": []
    },
    {
        "id": "720a5278561645c8",
        "type": "link in",
        "z": "aba43ca783b076c8",
        "name": "link in: Redox 2 charts toggle",
        "links": [
            "c2b6b6799b9840ab"
        ],
        "x": 120,
        "y": 40,
        "wires": [
            [
                "8d73aeb4a78140a5"
            ]
        ]
    },
    {
        "id": "8d73aeb4a78140a5",
        "type": "function",
        "z": "aba43ca783b076c8",
        "name": "Управление графиками Redox 2",
        "func": "const enabled = msg.payload === true || msg.enabled === true;\nflow.set('redox2ChartsEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "cf39952949299925"
            ]
        ]
    },
    {
        "id": "ce9f231619f54d22",
        "type": "inject",
        "z": "aba43ca783b076c8",
        "name": "Redox 2 графики: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "redox2_charts_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "8d73aeb4a78140a5"
            ]
        ]
    },
    {
        "id": "a056b6235b334d12",
        "type": "function",
        "z": "aba43ca783b076c8",
        "name": "Фильтр графика Redox 2",
        "func": "let enabled = flow.get('redox2ChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('redox2ChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 480,
        "wires": [
            [
                "cf39952949299925"
            ]
        ]
    },
    {
        "id": "14b9b31649994b77",
        "type": "ui_switch",
        "z": "e9378293b40785cc",
        "name": "Переключатель графиков AO LC",
        "label": "Показывать графики AO LC",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 12,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "ao_lc_charts_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 440,
        "wires": [
            [
                "5afe9b70d9ef4e25"
            ]
        ]
    },
    {
        "id": "5afe9b70d9ef4e25",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Подготовить сигнал AO LC",
        "func": "const enabled = msg.payload === true;\nmsg.enabled = enabled;\nmsg.payload = enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "a357484771bd41a0"
            ]
        ]
    },
    {
        "id": "a357484771bd41a0",
        "type": "link out",
        "z": "e9378293b40785cc",
        "name": "link out: AO LC charts toggle",
        "mode": "link",
        "links": [
            "0ec55973dd09437d"
        ],
        "x": 910,
        "y": 440,
        "wires": []
    },
    {
        "id": "0ec55973dd09437d",
        "type": "link in",
        "z": "22da98f038da3ad9",
        "name": "link in: AO LC charts toggle",
        "links": [
            "a357484771bd41a0"
        ],
        "x": 120,
        "y": 40,
        "wires": [
            [
                "f21ded136d344922"
            ]
        ]
    },
    {
        "id": "f21ded136d344922",
        "type": "function",
        "z": "22da98f038da3ad9",
        "name": "Управление графиками AO LC",
        "func": "const enabled = msg.payload === true || msg.enabled === true;\nflow.set('aoLcChartsEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "234714f673430506"
            ]
        ]
    },
    {
        "id": "f6394df47ab14cb8",
        "type": "inject",
        "z": "22da98f038da3ad9",
        "name": "AO LC графики: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "ao_lc_charts_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "f21ded136d344922"
            ]
        ]
    },
    {
        "id": "849ef216d2dc46bb",
        "type": "function",
        "z": "22da98f038da3ad9",
        "name": "Фильтр графика AO LC",
        "func": "let enabled = flow.get('aoLcChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('aoLcChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 660,
        "wires": [
            [
                "234714f673430506"
            ]
        ]
    },
    {
        "id": "9ff160b80c154286",
        "type": "ui_switch",
        "z": "e9378293b40785cc",
        "name": "Переключатель графиков ПИД",
        "label": "Показывать графики ПИД",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 13,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "pid_charts_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 480,
        "wires": [
            [
                "f9a1c21b7f444fec"
            ]
        ]
    },
    {
        "id": "f9a1c21b7f444fec",
        "type": "function",
        "z": "e9378293b40785cc",
        "name": "Подготовить сигнал ПИД",
        "func": "const enabled = msg.payload === true;\nmsg.enabled = enabled;\nmsg.payload = enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 480,
        "wires": [
            [
                "46db33ee80a549f7"
            ]
        ]
    },
    {
        "id": "46db33ee80a549f7",
        "type": "link out",
        "z": "e9378293b40785cc",
        "name": "link out: ПИД charts toggle",
        "mode": "link",
        "links": [
            "7c721d5590014193"
        ],
        "x": 910,
        "y": 480,
        "wires": []
    },
    {
        "id": "7c721d5590014193",
        "type": "link in",
        "z": "d769e22348317e1e",
        "name": "link in: ПИД charts toggle",
        "links": [
            "46db33ee80a549f7"
        ],
        "x": 120,
        "y": 40,
        "wires": [
            [
                "85ec8670b6c143c1"
            ]
        ]
    },
    {
        "id": "85ec8670b6c143c1",
        "type": "function",
        "z": "d769e22348317e1e",
        "name": "Управление графиками ПИД",
        "func": "const enabled = msg.payload === true || msg.enabled === true;\nflow.set('pidChartsEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "0bf6e4764fdbc300",
                "13c4d4b182099029",
                "dbc522466d52d3ec"
            ]
        ]
    },
    {
        "id": "1908e5bb6f8b470e",
        "type": "inject",
        "z": "d769e22348317e1e",
        "name": "ПИД графики: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "pid_charts_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "85ec8670b6c143c1"
            ]
        ]
    },
    {
        "id": "1127eae7f97840c8",
        "type": "function",
        "z": "d769e22348317e1e",
        "name": "Фильтр графика ПИД",
        "func": "let enabled = flow.get('pidChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('pidChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1105,
        "y": 700,
        "wires": [
            [
                "0bf6e4764fdbc300"
            ]
        ]
    },
    {
        "id": "7161d41cc6344a2c",
        "type": "function",
        "z": "d769e22348317e1e",
        "name": "Фильтр графика ПИД",
        "func": "let enabled = flow.get('pidChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('pidChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1105,
        "y": 760,
        "wires": [
            [
                "13c4d4b182099029"
            ]
        ]
    },
    {
        "id": "9773dffd1a9b46de",
        "type": "function",
        "z": "d769e22348317e1e",
        "name": "Фильтр графика ПИД",
        "func": "let enabled = flow.get('pidChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('pidChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1105,
        "y": 820,
        "wires": [
            [
                "dbc522466d52d3ec"
            ]
        ]
    },
    {
        "id": "9d3dfc3f73164b31",
        "type": "function",
        "z": "ba6153df2a5704ba",
        "name": "Ожидание готовности UI",
        "func": "const cloneMessage = (source) => {\n    if (typeof RED !== 'undefined' && RED.util && RED.util.cloneMessage) {\n        return RED.util.cloneMessage(source);\n    }\n    return JSON.parse(JSON.stringify(source));\n};\nlet enabled = context.get('uiReady') === true;\nif (msg && msg.enable === true) {\n    if (!enabled) {\n        enabled = true;\n        context.set('uiReady', true);\n    }\n    const pending = context.get('pending');\n    if (pending) {\n        context.set('pending', null);\n        return pending;\n    }\n    return null;\n}\nif (!enabled) {\n    context.set('pending', cloneMessage(msg));\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            "e52a0fc5a2a275dd"
        ]
    },
    {
        "id": "9d1f564b8088416c",
        "type": "link in",
        "z": "ba6153df2a5704ba",
        "name": "link in: UI Ready",
        "links": [
            "749ecdd49863493c"
        ],
        "x": 180,
        "y": 40,
        "wires": [
            [
                "9d3dfc3f73164b31"
            ]
        ]
    },
    {
        "id": "a5b3ce9fdb814e9c",
        "type": "function",
        "z": "459913172d62e701",
        "name": "Ожидание готовности UI",
        "func": "const cloneMessage = (source) => {\n    if (typeof RED !== 'undefined' && RED.util && RED.util.cloneMessage) {\n        return RED.util.cloneMessage(source);\n    }\n    return JSON.parse(JSON.stringify(source));\n};\nlet enabled = context.get('uiReady') === true;\nif (msg && msg.enable === true) {\n    if (!enabled) {\n        enabled = true;\n        context.set('uiReady', true);\n    }\n    const pending = context.get('pending');\n    if (pending) {\n        context.set('pending', null);\n        return pending;\n    }\n    return null;\n}\nif (!enabled) {\n    context.set('pending', cloneMessage(msg));\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            "356bccb04dd00c31"
        ]
    },
    {
        "id": "394dafa7ab5c40a7",
        "type": "link in",
        "z": "459913172d62e701",
        "name": "link in: UI Ready",
        "links": [
            "749ecdd49863493c"
        ],
        "x": 180,
        "y": 40,
        "wires": [
            [
                "a5b3ce9fdb814e9c"
            ]
        ]
    },
    {
        "id": "2f7d6b4240cc4f5a",
        "type": "function",
        "z": "0aab3c6cefb9136c",
        "name": "Ожидание готовности UI",
        "func": "const cloneMessage = (source) => {\n    if (typeof RED !== 'undefined' && RED.util && RED.util.cloneMessage) {\n        return RED.util.cloneMessage(source);\n    }\n    return JSON.parse(JSON.stringify(source));\n};\n\nlet enabled = context.get('uiReady') === true;\nconst isStartSignal = msg && msg.topic === 'start';\n\nif (isStartSignal) {\n    return msg;\n}\n\nif (msg && msg.enable === true) {\n    if (!enabled) {\n        enabled = true;\n        context.set('uiReady', true);\n    }\n    const pending = context.get('pending');\n    if (pending) {\n        context.set('pending', null);\n        return pending;\n    }\n    return null;\n}\n\nif (!enabled) {\n    context.set('pending', cloneMessage(msg));\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            "c821f45e40c16c37",
            "f737018cea686424"
        ]
    },
    {
        "id": "fc7dda274d9a48c9",
        "type": "link in",
        "z": "0aab3c6cefb9136c",
        "name": "link in: UI Ready",
        "links": [
            "749ecdd49863493c"
        ],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "2f7d6b4240cc4f5a"
            ]
        ]
    },
    {
        "id": "cb97cc3296574a09",
        "type": "function",
        "z": "6c5a62355aa37281",
        "name": "Ожидание готовности UI",
        "func": "const cloneMessage = (source) => {\n    if (typeof RED !== 'undefined' && RED.util && RED.util.cloneMessage) {\n        return RED.util.cloneMessage(source);\n    }\n    return JSON.parse(JSON.stringify(source));\n};\nlet enabled = context.get('uiReady') === true;\nif (msg && msg.enable === true) {\n    if (!enabled) {\n        enabled = true;\n        context.set('uiReady', true);\n    }\n    const pending = context.get('pending');\n    if (pending) {\n        context.set('pending', null);\n        return pending;\n    }\n    return null;\n}\nif (!enabled) {\n    context.set('pending', cloneMessage(msg));\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            "3bbae529688a3e48"
        ]
    },
    {
        "id": "a2678400cbea4bc9",
        "type": "link in",
        "z": "6c5a62355aa37281",
        "name": "link in: UI Ready",
        "links": [
            "749ecdd49863493c"
        ],
        "x": 150,
        "y": 40,
        "wires": [
            [
                "cb97cc3296574a09"
            ]
        ]
    },
    {
        "id": "4dfd28aef8fc45a8",
        "type": "function",
        "z": "23e887414e2dc8e7",
        "name": "Ожидание готовности UI",
        "func": "const cloneMessage = (source) => {\n    if (typeof RED !== 'undefined' && RED.util && RED.util.cloneMessage) {\n        return RED.util.cloneMessage(source);\n    }\n    return JSON.parse(JSON.stringify(source));\n};\nlet enabled = context.get('uiReady') === true;\nif (msg && msg.enable === true) {\n    if (!enabled) {\n        enabled = true;\n        context.set('uiReady', true);\n    }\n    const pending = context.get('pending');\n    if (pending) {\n        context.set('pending', null);\n        return pending;\n    }\n    return null;\n}\nif (!enabled) {\n    context.set('pending', cloneMessage(msg));\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            "5d793d6eda157a6c"
        ]
    },
    {
        "id": "4f8165a1a9f64749",
        "type": "link in",
        "z": "23e887414e2dc8e7",
        "name": "link in: UI Ready",
        "links": [
            "749ecdd49863493c"
        ],
        "x": 210,
        "y": 120,
        "wires": [
            [
                "4dfd28aef8fc45a8"
            ]
        ]
    }
]
