[
    {
        "id": "de85da314be95050",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0083502ee0ad39db",
        "type": "tab",
        "label": "All Vars Init & Read",
        "disabled": false,
        "info": "Handles initialization on start and reading variables (n1-pk5) from file."
    },
    {
        "id": "2eb198d5254a377c",
        "type": "tab",
        "label": "All Vars UI",
        "disabled": false,
        "info": "Handles UI elements display, input, and status updates for variables (n1-pk5)."
    },
    {
        "id": "1d9e96f5f85cebbb",
        "type": "tab",
        "label": "All Vars Save",
        "disabled": false,
        "info": "Handles applying changes to globals and saving variables (n1-pk5) to file."
    },
    {
        "id": "8749a256bb1a291b",
        "type": "tab",
        "label": "Calc Init & Read",
        "disabled": false,
        "info": "Handles initialization on start and reading calculation variables (koef/konst) from file."
    },
    {
        "id": "0640fd0276d52e44",
        "type": "tab",
        "label": "Calc UI",
        "disabled": false,
        "info": "Handles UI elements display, input, and status updates for calculation variables (koef/konst)."
    },
    {
        "id": "504f075c21176c3f",
        "type": "tab",
        "label": "Calc Save",
        "disabled": false,
        "info": "Handles applying changes to globals and saving calculation variables (koef/konst) to file."
    },
    {
        "id": "33e7454071695bcc",
        "type": "tab",
        "label": "функция итерации",
        "disabled": false,
        "info": "Выполняет циклическую итерацию переменной x через 5 шагов, используя глобальные переменные n, k, h, p, pk. Отображает x на графике, имеет кнопку сброса и выводит номер шага перед паузой."
    },
    {
        "id": "2a7abf2a60427cf6",
        "type": "tab",
        "label": "АО6224_AI6717_v2",
        "disabled": false,
        "info": "Управляет АО модуля 6224 на основе global.x.\nЧитает АИ модуля 6717.\nПрименяет koef/konst к значениям AI перед сохранением и отображением.\nПозволяет записывать цикл данных AI_0-AI_7 в файл по кнопке (начиная после первого завершения шага 5).\nОтображает на UI преобразованные значения AI_0-7 для КАЖДОГО шага итерации.",
        "env": []
    },
    {
        "id": "bbb73f6abca22b12",
        "type": "tab",
        "label": "PH Init & Read",
        "disabled": false,
        "info": "Handles initialization on start and reading PH variables from file."
    },
    {
        "id": "a2ee9fb80f70c813",
        "type": "tab",
        "label": "PH Save",
        "disabled": false,
        "info": "Handles applying PH changes to globals and saving to file."
    },
    {
        "id": "94ff508d12ea2f6d",
        "type": "tab",
        "label": "PH UI",
        "disabled": false,
        "info": "Handles PH UI elements display, input, and status updates. Includes PH charts."
    },
    {
        "id": "c7ddd775817ac60f",
        "type": "tab",
        "label": "PH Calculations",
        "disabled": false,
        "info": "Performs periodic calculations for camm, ckisl, ai2t1t2h1h2, ph. Performs cammkisl_smus calculation at the end of each cycle. Sends data to charts."
    },
    {
        "id": "17485bfdc47fc3ef",
        "type": "tab",
        "label": "Redox Init & Read",
        "disabled": false,
        "info": "Инициализация и чтение параметров Redox из файла."
    },
    {
        "id": "7e9c6641b16de585",
        "type": "tab",
        "label": "Redox UI",
        "disabled": false,
        "info": "UI для настройки и отображения Redox."
    },
    {
        "id": "7398ed9d3bdd1adb",
        "type": "tab",
        "label": "Redox Calculations",
        "disabled": false,
        "info": "Расчет и сглаживание Redox потенциала (ai3ph5, ai3ph5smus)."
    },
    {
        "id": "e72998e6615cd690",
        "type": "tab",
        "label": "Redox Save",
        "disabled": false,
        "info": "Сохранение параметров Redox в файл."
    },
    {
        "id": "fa26a889a6480f8c",
        "type": "tab",
        "label": "AO LC Init & Read",
        "disabled": false,
        "info": "Инициализация и чтение конфигурации аналоговых выходов 4-20мА (ключи, K, C)."
    },
    {
        "id": "31fb96ba681293b1",
        "type": "tab",
        "label": "AO LC Save",
        "disabled": false,
        "info": "Сохранение конфигурации аналоговых выходов 4-20мА."
    },
    {
        "id": "8110848381ab0154",
        "type": "tab",
        "label": "AO LC Output Logic",
        "disabled": false,
        "info": "Логика вывода сигналов 4-20мА на основе конфигурации."
    },
    {
        "id": "179f80e858d2e6d2",
        "type": "tab",
        "label": "Redox Init & Read2",
        "disabled": false,
        "info": "Инициализация и чтение параметров Redox2 (ai4p2h5koef, ai4p2h5konst, window_smusp2) из файла redox_variables2.json."
    },
    {
        "id": "581cd0ee506b12fb",
        "type": "tab",
        "label": "Redox UI2",
        "disabled": false,
        "info": "UI для настройки и отображения Redox2 (ai4p2h5koef, ai4p2h5konst, window_smusp2, ai4h5, ai4p2h5, ai4p2h5smus)."
    },
    {
        "id": "8c6eeff428328b9d",
        "type": "tab",
        "label": "Redox Calculations2",
        "disabled": false,
        "info": "Расчет и сглаживание Redox потенциала 2 (ai4p2h5, ai4p2h5smus) на основе ai4h5."
    },
    {
        "id": "319252b7e0410b2b",
        "type": "tab",
        "label": "Redox Save2",
        "disabled": false,
        "info": "Сохранение параметров Redox2 (ai4p2h5koef, ai4p2h5konst, window_smusp2) в файл redox_variables2.json."
    },
    {
        "id": "4f802f288b4a6b48",
        "type": "tab",
        "label": "Server",
        "disabled": false,
        "info": "Modbus TCP Server для панели Weintek. Инициализация и циклическое обновление регистров из глобальных переменных. Добавлена логика опроса для записи уставок с HMI.",
        "env": []
    },
    {
        "id": "7a2b68c9f92e1313",
        "type": "tab",
        "label": "AO LC Config UI",
        "disabled": false,
        "info": "UI для настройки аналоговых выходов 4-20мА (ключи, K, C) и отображения их работы на графике."
    },
    {
        "id": "931d498f262979ce",
        "type": "tab",
        "label": "PID Config Init & Read",
        "disabled": false,
        "info": "Инициализация и чтение конфигурации ПИД-регулятора из файла pid_config.json"
    },
    {
        "id": "c3e5092eba83b800",
        "type": "tab",
        "label": "PID Config Save",
        "disabled": false,
        "info": "Сохранение конфигурации ПИД-регулятора в файл pid_config.json."
    },
    {
        "id": "cb1fe40a440a5967",
        "type": "tab",
        "label": "PID Config UI",
        "disabled": false,
        "info": "UI для настройки параметров ПИД-регулятора."
    },
    {
        "id": "a609182e19a3ce4d",
        "type": "tab",
        "label": "PID Control Logic",
        "disabled": false,
        "info": "Основная логика ПИД-регулирования: выбор PV, передача параметров в ПИД, обработка выхода."
    },
    {
        "id": "b40e2016c7b21a31",
        "type": "tab",
        "label": "Резервное Копирование",
        "disabled": false,
        "info": "Содержит логику для ежедневного и ручного резервного копирования, а также восстановления переменных из бэкапа за текущий день. Обрабатывает 7 файлов: all, calculation, ph, redox, ao_lc, redox2, pid_config."
    },
    {
        "id": "084003c6178784f4",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "fefac9801da80b93",
        "type": "ui_group",
        "name": "Шаги",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7bbe98b569431b92",
        "type": "ui_group",
        "name": "Переменные Шаг 1",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f2b1f8709bad5c42",
        "type": "ui_group",
        "name": "Переменные Шаг 2",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1247de7ed48c5785",
        "type": "ui_group",
        "name": "Переменные Шаг 3",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8f599a2a4ff7868a",
        "type": "ui_group",
        "name": "Переменные Шаг 4",
        "tab": "",
        "order": 5,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "31401d2598399c8b",
        "type": "ui_group",
        "name": "Переменные Шаг 5",
        "tab": "",
        "order": 6,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "iteration_ui_tab",
        "type": "ui_tab",
        "name": "Итерация",
        "icon": "show_chart",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "iteration_ui_group",
        "type": "ui_group",
        "name": "График и Управление Итерацией",
        "tab": "iteration_ui_tab",
        "order": 1,
        "disp": true,
        "width": "32",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b5ad3d26d2dec3f7",
        "type": "ui_group",
        "name": "Default",
        "tab": "bf598e27688ff446",
        "order": 1,
        "disp": false,
        "width": "32",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bf598e27688ff446",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "890b934665542552",
        "type": "ui_tab",
        "name": "Результаты по Шагам",
        "icon": "assignment",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9348979b18aad42e",
        "type": "ui_group",
        "name": "Значения AI 1 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1c9c669cfa71380c",
        "type": "ui_group",
        "name": "Значения AI 2 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "78478d37299df3f2",
        "type": "ui_group",
        "name": "Значения AI 3 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4ad62ba0c83b740b",
        "type": "ui_group",
        "name": "Значения AI 4 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9eaeaa2ca534b09b",
        "type": "ui_group",
        "name": "Значения AI 5 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d513ea3bdc3c943e",
        "type": "ui_group",
        "name": "Значения AI 6 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1c524b55f70bd43f",
        "type": "ui_group",
        "name": "Значения AI 7 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0f43dd3488f8235e",
        "type": "ui_group",
        "name": "Значения AI 8 (Шаги 1-5)",
        "tab": "890b934665542552",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eb35cce35ef3368f",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.214",
        "tcpPort": "502",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 2000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 4000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "1d5f2aa7532ab803",
        "type": "ui_tab",
        "name": "Аналоговые Выходы LC",
        "icon": "settings_input_component",
        "order": 9
    },
    {
        "id": "f865e3b9a8326d9a",
        "type": "ui_tab",
        "name": "История версий",
        "icon": "assignment_turned_in",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e9abdc54dcb621b3",
        "type": "ui_group",
        "name": "История изменений",
        "tab": "f865e3b9a8326d9a",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ab117ca2175957a7",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "fefac9801da80b93",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "c10b276ac60641ab",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "fefac9801da80b93",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "b2274b11f3a30e8f",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "7bbe98b569431b92",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "5268310d05a4042c",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "7bbe98b569431b92",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "3388aad75cde04e9",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "7bbe98b569431b92",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "819f668479c9f459",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "7bbe98b569431b92",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "d66527300c327730",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "7bbe98b569431b92",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "91cd0a62e7b0e284",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "f2b1f8709bad5c42",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "a4e82e914b0e73cf",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "f2b1f8709bad5c42",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "13ba9b3a087e5575",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "f2b1f8709bad5c42",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "c37791be39a6fa48",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "f2b1f8709bad5c42",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "108c5caf8baf4586",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "f2b1f8709bad5c42",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "f8dea3a4c5c00106",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "1247de7ed48c5785",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "b6792c3a2610ed6f",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "1247de7ed48c5785",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "5b255883576dad00",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "1247de7ed48c5785",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "b1e9445b4f05722e",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "1247de7ed48c5785",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "af49a1422a846533",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "1247de7ed48c5785",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "d6a16897dfd5f06a",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "8f599a2a4ff7868a",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "28ce2120f86df881",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "8f599a2a4ff7868a",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "898d80af823fd88a",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "8f599a2a4ff7868a",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "fc9bc677d7adad07",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "8f599a2a4ff7868a",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "6df7cc3ced8a2c1d",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "8f599a2a4ff7868a",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "151727cbfc1c7181",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "31401d2598399c8b",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "f0db011b0a4a327d",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "31401d2598399c8b",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "7a9344d3e0e66e67",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "31401d2598399c8b",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "0f5e176c497aa603",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "31401d2598399c8b",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "99019755cc6a166e",
        "type": "ui_spacer",
        "z": "33e7454071695bcc",
        "name": "spacer",
        "group": "31401d2598399c8b",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "1ca429ef1c54e053",
        "type": "ui_tab",
        "z": "0640fd0276d52e44",
        "name": "Переменные Расчета",
        "icon": "settings_input_component",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "3a8fead8c95dcfc2",
        "type": "ui_group",
        "z": "0640fd0276d52e44",
        "name": "Управление Расчетом",
        "tab": "1ca429ef1c54e053",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9b053e6ed348d847",
        "type": "ui_group",
        "z": "0640fd0276d52e44",
        "name": "Коэффициенты (koef 0-7)",
        "tab": "1ca429ef1c54e053",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "891f9144fbdf0897",
        "type": "ui_group",
        "z": "0640fd0276d52e44",
        "name": "Константы (konst 0-7)",
        "tab": "1ca429ef1c54e053",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a1eb237deeed4f68",
        "type": "ui_tab",
        "z": "2eb198d5254a377c",
        "name": "Переменные 1 2 3 4 5",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "b5f059245ebc9253",
        "type": "ui_group",
        "z": "2eb198d5254a377c",
        "name": "Шаги",
        "tab": "a1eb237deeed4f68",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5a2c57e029073535",
        "type": "ui_group",
        "z": "2eb198d5254a377c",
        "name": "Переменные Шаг 1",
        "tab": "a1eb237deeed4f68",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "797b951af3ed7e6e",
        "type": "ui_group",
        "z": "2eb198d5254a377c",
        "name": "Переменные Шаг 2",
        "tab": "a1eb237deeed4f68",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "85844825f603eaec",
        "type": "ui_group",
        "z": "2eb198d5254a377c",
        "name": "Переменные Шаг 3",
        "tab": "a1eb237deeed4f68",
        "order": 4,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "343529bc305f4ec7",
        "type": "ui_group",
        "z": "2eb198d5254a377c",
        "name": "Переменные Шаг 4",
        "tab": "a1eb237deeed4f68",
        "order": 5,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "11afac11e1586fa3",
        "type": "ui_group",
        "z": "2eb198d5254a377c",
        "name": "Переменные Шаг 5",
        "tab": "a1eb237deeed4f68",
        "order": 6,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "448d421088f328d4",
        "type": "ui_tab",
        "z": "94ff508d12ea2f6d",
        "name": "Переменные Расчета PH",
        "icon": "bar-chart",
        "order": 6,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "a691580503936b70",
        "type": "ui_group",
        "z": "94ff508d12ea2f6d",
        "name": "Управление PH",
        "tab": "448d421088f328d4",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7543e63693320913",
        "type": "ui_group",
        "z": "94ff508d12ea2f6d",
        "name": "Переменные Входов PH",
        "tab": "448d421088f328d4",
        "order": 2,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0d9a46cbdb160a3c",
        "type": "ui_group",
        "z": "94ff508d12ea2f6d",
        "name": "Основные Переменные PH",
        "tab": "448d421088f328d4",
        "order": 3,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ed8475d4594aa685",
        "type": "ui_group",
        "z": "94ff508d12ea2f6d",
        "name": "Константы и Лимиты PH",
        "tab": "448d421088f328d4",
        "order": 4,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "82af0032683719ae",
        "type": "ui_group",
        "z": "94ff508d12ea2f6d",
        "name": "Графики PH",
        "tab": "448d421088f328d4",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "314b7de6c01e1f5b",
        "type": "ui_tab",
        "z": "7e9c6641b16de585",
        "name": "Redox Потенциал",
        "icon": "flash_on",
        "order": 7,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "8e3db00ee18295d3",
        "type": "ui_group",
        "z": "7e9c6641b16de585",
        "name": "Управление Redox",
        "tab": "314b7de6c01e1f5b",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "83884bb4e452c2f5",
        "type": "ui_group",
        "z": "7e9c6641b16de585",
        "name": "Параметры и Значения Redox",
        "tab": "314b7de6c01e1f5b",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fbb2ba6afc0947d3",
        "type": "ui_group",
        "z": "7e9c6641b16de585",
        "name": "График Redox",
        "tab": "314b7de6c01e1f5b",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a0b71270a6b25db2",
        "type": "ui_tab",
        "z": "581cd0ee506b12fb",
        "name": "Redox Потенциал 2",
        "icon": "flash_on",
        "order": 8,
        "hidden": true
    },
    {
        "id": "714d420805937ade",
        "type": "ui_group",
        "z": "581cd0ee506b12fb",
        "name": "Управление Redox 2",
        "tab": "a0b71270a6b25db2",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0ad4d1324f6a6e7e",
        "type": "ui_group",
        "z": "581cd0ee506b12fb",
        "name": "Параметры и Значения Redox 2",
        "tab": "a0b71270a6b25db2",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "81c05338f8b2229b",
        "type": "ui_group",
        "z": "581cd0ee506b12fb",
        "name": "График Redox 2",
        "tab": "a0b71270a6b25db2",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bec8068378872fb4",
        "type": "ui_group",
        "z": "7a2b68c9f92e1313",
        "name": "Управление Конфигурацией АО 4-20мА",
        "tab": "1d5f2aa7532ab803",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7d3209aa86af4056",
        "type": "ui_group",
        "z": "7a2b68c9f92e1313",
        "name": "Канал 2 (AO1 физич.)",
        "tab": "1d5f2aa7532ab803",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "79593de977c7d35f",
        "type": "ui_group",
        "z": "7a2b68c9f92e1313",
        "name": "Канал 3 (AO2 физич.)",
        "tab": "1d5f2aa7532ab803",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a0107089e1d26bc9",
        "type": "ui_group",
        "z": "7a2b68c9f92e1313",
        "name": "Канал 4 (AO3 физич.)",
        "tab": "1d5f2aa7532ab803",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "599e611306f451f2",
        "type": "ui_group",
        "z": "7a2b68c9f92e1313",
        "name": "Графики Выходных Токов АО LC",
        "tab": "1d5f2aa7532ab803",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a00ae3d085ad4c70",
        "type": "ui_tab",
        "z": "cb1fe40a440a5967",
        "name": "Настройки ПИД",
        "icon": "settings_applications",
        "order": 10,
        "hidden": true
    },
    {
        "id": "ccc1572df90c68cb",
        "type": "ui_group",
        "z": "cb1fe40a440a5967",
        "name": "Основные Параметры ПИД",
        "tab": "a00ae3d085ad4c70",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9768866a16b8bcd2",
        "type": "ui_group",
        "z": "cb1fe40a440a5967",
        "name": "Коэффициенты ПИД",
        "tab": "a00ae3d085ad4c70",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "08127e8709d06964",
        "type": "ui_group",
        "z": "cb1fe40a440a5967",
        "name": "Дополнительные Параметры ПИД",
        "tab": "a00ae3d085ad4c70",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "830dda0ecad0b212",
        "type": "ui_group",
        "z": "cb1fe40a440a5967",
        "name": "Управление Сохранением (ПИД)",
        "tab": "a00ae3d085ad4c70",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "641334a6e067f93d",
        "type": "ui_group",
        "z": "cb1fe40a440a5967",
        "name": "Мониторинг ПИД",
        "tab": "a00ae3d085ad4c70",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bb5885e26105cede",
        "type": "inject",
        "z": "0083502ee0ad39db",
        "name": "При старте потока 1c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "0f3bb7426c40704b"
            ]
        ]
    },
    {
        "id": "109756e5a4d5ea04",
        "type": "link in",
        "z": "0083502ee0ad39db",
        "name": "link in: trigger-read-all-vars",
        "links": [
            "91d941bef190526b",
            "f4dc4ffac71ae933"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "b6bc3a8ad1b5205f"
            ]
        ]
    },
    {
        "id": "b6bc3a8ad1b5205f",
        "type": "file in",
        "z": "0083502ee0ad39db",
        "name": "Прочитать файл переменных",
        "filename": "/home/root/.node-red/save/variables_all.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 490,
        "y": 140,
        "wires": [
            [
                "24fc6398cf6f55c6"
            ]
        ]
    },
    {
        "id": "7f4f4d051a44b90f",
        "type": "catch",
        "z": "0083502ee0ad39db",
        "name": "Перехват ошибки чтения файла",
        "scope": [
            "b6bc3a8ad1b5205f"
        ],
        "uncaught": false,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "590647f4879641ef"
            ]
        ]
    },
    {
        "id": "24fc6398cf6f55c6",
        "type": "json",
        "z": "0083502ee0ad39db",
        "name": "Разобрать JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 60,
        "wires": [
            [
                "590647f4879641ef"
            ]
        ]
    },
    {
        "id": "590647f4879641ef",
        "type": "function",
        "z": "0083502ee0ad39db",
        "name": "Init/Read State & Globals (All Vars)",
        "func": "const VERSION_PATTERN = /^\\d{12}$/;\nconst READABLE_PATTERN = /^\\d{4}-\\d{2}-\\d{2}_\\d{4}$/;\nconst FILE_NAME_PATTERN = /^flows_[A-Za-z0-9_-]+_ver_(\\d{4}-\\d{2}-\\d{2})_(\\d{12})$/;\nconst PROJECT_SLUG = 'AO6224_AI6717';\n\nconst toReadableVersion = (value) => {\n    if (typeof value === 'string' && VERSION_PATTERN.test(value)) {\n        const day = value.slice(0, 2);\n        const month = value.slice(2, 4);\n        const year = value.slice(4, 8);\n        const build = value.slice(8);\n        return `${year}-${month}-${day}_${build}`;\n    }\n    if (typeof value === 'string' && READABLE_PATTERN.test(value)) {\n        return value;\n    }\n    if (typeof value === 'string') {\n        const match = value.match(FILE_NAME_PATTERN);\n        if (match) {\n            const [, datePart, buildPart] = match;\n            return `${datePart}_${buildPart}`;\n        }\n    }\n    return '1970-01-01_0000';\n};\n\nconst normalizeVersion = (value) => {\n    if (typeof value !== 'string' || !value.length) {\n        return undefined;\n    }\n    if (VERSION_PATTERN.test(value)) {\n        return value;\n    }\n    if (READABLE_PATTERN.test(value)) {\n        const [datePart, buildPart] = value.split('_');\n        const [year, month, day] = datePart.split('-');\n        return `${day}${month}${year}${buildPart}`;\n    }\n    const match = value.match(FILE_NAME_PATTERN);\n    if (match) {\n        const [, datePart, buildPart] = match;\n        const [year, month, day] = datePart.split('-');\n        return `${day}${month}${year}${buildPart}`;\n    }\n    return undefined;\n};\n\nconst pad2 = (value) => String(value).padStart(2, '0');\nconst formatVersion = (date) => {\n    const current = date instanceof Date ? date : new Date(date);\n    return `${pad2(current.getDate())}${pad2(current.getMonth() + 1)}${current.getFullYear()}${pad2(current.getHours())}${pad2(current.getMinutes())}`;\n};\n\nconst deriveVersionFromFileName = (fileName) => {\n    if (typeof fileName === 'string' && fileName.endsWith('.json')) {\n        const candidate = fileName.slice(0, -5);\n        return normalizeVersion(candidate);\n    }\n    return undefined;\n};\n\nlet projectVersion = normalizeVersion(flow.get('versionRaw'))\n    || normalizeVersion(flow.get('version'))\n    || normalizeVersion(global.get('currentVersion'))\n    || deriveVersionFromFileName(flow.get('flowFileName'))\n    || deriveVersionFromFileName(global.get('flowFileName'));\nif (!projectVersion) {\n    projectVersion = formatVersion(new Date());\n}\n\nconst readableVersion = toReadableVersion(projectVersion);\nconst flowFileName = (() => {\n    const [datePart] = readableVersion.split('_');\n    const compact = toVersionString(readableVersion);\n    const buildFull = compact;\n    return `flows_${PROJECT_SLUG}_ver_${datePart}_${buildFull}.json`;\n})();\nconst versionNumber = Number(projectVersion);\n\nif (global.get('currentVersion') !== projectVersion) {\n    global.set('currentVersion', projectVersion);\n}\n\nif (global.get('flowFileName') !== flowFileName) {\n    global.set('flowFileName', flowFileName);\n}\n\nif (flow.get('flowFileName') !== flowFileName) {\n    flow.set('flowFileName', flowFileName);\n}\n\nif (flow.get('version') !== readableVersion) {\n    flow.set('version', readableVersion);\n}\n\nif (flow.get('versionRaw') !== projectVersion) {\n    flow.set('versionRaw', projectVersion);\n}\n\nif (Number.isFinite(versionNumber) && global.get('VER') !== versionNumber) {\n    global.set('VER', versionNumber);\n}\n\nconst uiStateMetaInit = global.get('uiState_meta') || {};\nlet metaUpdated = false;\n\nif (uiStateMetaInit.version !== projectVersion) {\n    uiStateMetaInit.version = projectVersion;\n    metaUpdated = true;\n}\n\nif (Number.isFinite(versionNumber) && uiStateMetaInit.versionNumber !== versionNumber) {\n    uiStateMetaInit.versionNumber = versionNumber;\n    metaUpdated = true;\n}\n\nif (uiStateMetaInit.fileName !== flowFileName) {\n    uiStateMetaInit.fileName = flowFileName;\n    metaUpdated = true;\n}\n\nif (uiStateMetaInit.readableVersion !== readableVersion) {\n    uiStateMetaInit.readableVersion = readableVersion;\n    metaUpdated = true;\n}\n\nif (metaUpdated) {\n    global.set('uiState_meta', uiStateMetaInit);\n}\n\nconst defaultVars = {n1:-100,k1:100,h1:10,p1:200,pk1:1000,n2:-200,k2:200,h2:20,p2:300,pk2:1100,n3:-300,k3:300,h3:30,p3:400,pk3:1200,n4:-400,k4:400,h4:40,p4:500,pk4:1300,n5:-500,k5:500,h5:50,p5:600,pk5:1400};\nlet loadedVars = {};\nlet source = msg.topic === 'init' ? '[INIT_ALL]' : '[READ_ALL_BTN]';\nconst requiredKeys = Object.keys(defaultVars);\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && requiredKeys.every(key => Object.prototype.hasOwnProperty.call(msg.payload, key));\n\nif (isValidPayload) {\n    loadedVars = msg.payload;\n    node.warn(source + \" Переменные (1-5) загружены из файла.\");\n} else {\n    loadedVars = {...defaultVars};\n    if (msg.error) {\n         node.warn(source + \" Ошибка чтения файла переменных (1-5): \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init') {\n         node.warn(source + \" Файл переменных (1-5) не найден/поврежден/неполный. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл переменных (1-5) не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key in defaultVars) {\n    let currentVal = Object.prototype.hasOwnProperty.call(loadedVars, key) ? loadedVars[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n    if (Number.isNaN(numValue)) {\n        node.warn(`Invalid number format for ${key}: ${currentVal}. Using default.`);\n        currentVal = defaultVars[key];\n        loadedVars[key] = currentVal;\n    } else {\n         currentVal = numValue;\n         loadedVars[key] = currentVal;\n    }\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\nglobal.set('savedStateAll', {...loadedVars});\nglobal.set('uiStateAll', {...loadedVars});\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные (1-5) установлены/обновлены: \" + JSON.stringify(loadedVars));\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные (1-5) уже были установлены.\");\n}\n\nreturn {payload:true,version:projectVersion,filename:flowFileName,versionNumber:Number.isFinite(versionNumber)?versionNumber:null,readableVersion};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 140,
        "wires": [
            [
                "7ff48c9c61662bf0"
            ]
        ]
    },
    {
        "id": "7ff48c9c61662bf0",
        "type": "link out",
        "z": "0083502ee0ad39db",
        "name": "link out: trigger-all-vars-ui-update",
        "mode": "link",
        "links": [
            "812190053ecfd8ba"
        ],
        "x": 1130,
        "y": 140,
        "wires": []
    },
    {
        "id": "0f3bb7426c40704b",
        "type": "function",
        "z": "0083502ee0ad39db",
        "name": "Ожидание готовности UI",
        "func": "const cloneMessage = (source) => {\n    if (typeof RED !== 'undefined' && RED.util && RED.util.cloneMessage) {\n        return RED.util.cloneMessage(source);\n    }\n    return JSON.parse(JSON.stringify(source));\n};\nlet enabled = context.get('uiReady') === true;\nif (msg && msg.enable === true) {\n    if (!enabled) {\n        enabled = true;\n        context.set('uiReady', true);\n    }\n    const pending = context.get('pending');\n    if (pending) {\n        context.set('pending', null);\n        return pending;\n    }\n    return null;\n}\nif (!enabled) {\n    context.set('pending', cloneMessage(msg));\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "b6bc3a8ad1b5205f"
            ]
        ]
    },
    {
        "id": "816b01c178bb893d",
        "type": "link in",
        "z": "0083502ee0ad39db",
        "name": "link in: UI Ready",
        "links": [
            "35f8cce28c86843b"
        ],
        "x": 180,
        "y": 40,
        "wires": [
            [
                "0f3bb7426c40704b"
            ]
        ]
    },
    {
        "id": "812190053ecfd8ba",
        "type": "link in",
        "z": "2eb198d5254a377c",
        "name": "link in: trigger-all-vars-ui-update",
        "links": [
            "7ff48c9c61662bf0",
            "153ff17068380336"
        ],
        "x": 245,
        "y": 500,
        "wires": [
            [
                "366333c982a082f6"
            ]
        ]
    },
    {
        "id": "366333c982a082f6",
        "type": "function",
        "z": "2eb198d5254a377c",
        "name": "Update UI Elements (All Vars)",
        "func": "const uiState = global.get('uiStateAll') || {};\nconst savedState = global.get('savedStateAll') || {};\nconst uiMessages = [];\nconst orderedKeys = [];\nfor (let i = 1; i <= 5; i++) {\n    orderedKeys.push(`n${i}`, `k${i}`, `h${i}`, `p${i}`, `pk${i}`);\n}\n\n// Prepare messages for UI numeric inputs (outputs 0-24)\nfor (const key of orderedKeys) {\n    const value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : 0;\n    uiMessages.push({ payload: value, topic: key });\n}\n\n// Prepare message for the status indicator (output 25)\nlet hasUnsavedChanges = false;\nfor (const key of orderedKeys) {\n    if (!savedState.hasOwnProperty(key) || !uiState.hasOwnProperty(key) || Number(savedState[key]) !== Number(uiState[key])) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\nuiMessages.push({ payload: statusMessage });\n\nreturn uiMessages;",
        "outputs": 26,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 500,
        "wires": [
            [
                "a13981e30d690c30"
            ],
            [
                "30252b03dffda1d6"
            ],
            [
                "a2fdfc5b49d191f7"
            ],
            [
                "ebc22f55310ef8de"
            ],
            [
                "b6f11e5d41c04115"
            ],
            [
                "38bbd1822b481a5e"
            ],
            [
                "e7df27f92064b191"
            ],
            [
                "305c3691fcb5ddb8"
            ],
            [
                "ba1d231ce91803de"
            ],
            [
                "695400a284467cf6"
            ],
            [
                "963a238e5fb12e84"
            ],
            [
                "9869fa4597abc41c"
            ],
            [
                "6ecb0f6ba0d9378f"
            ],
            [
                "9ca5a07fa79ff88e"
            ],
            [
                "67020d6c583372bd"
            ],
            [
                "b69113ef5805c6ab"
            ],
            [
                "3db7147cab9d0d5b"
            ],
            [
                "2997199f4ad5683c"
            ],
            [
                "ac5d717340d105e8"
            ],
            [
                "3c6e14e35298f8b1"
            ],
            [
                "73c3d79a614181a7"
            ],
            [
                "e53636a5cc5b8396"
            ],
            [
                "8a809aa9849bdc70"
            ],
            [
                "02f34193e952471e"
            ],
            [
                "3c900728a79381bb"
            ],
            [
                "2f8c6a0362e94e02"
            ]
        ]
    },
    {
        "id": "9ffba4ae5aab376f",
        "type": "function",
        "z": "2eb198d5254a377c",
        "name": "Handle UI Input & Update Status (All Vars)",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\n\nlet uiState = global.get('uiStateAll') || {};\nconst savedState = global.get('savedStateAll') || {};\n\nconst validVars = [];\nfor (let i = 1; i <= 5; i++) {\n    validVars.push(`n${i}`, `k${i}`, `h${i}`, `p${i}`, `pk${i}`);\n}\n\nif (validVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    uiState[varName] = newValue;\n    global.set('uiStateAll', uiState);\n} else {\n    node.warn(\"[UI_INPUT_ALL] Получено некорректное сообщение от UI: \" + JSON.stringify(msg));\n    return null;\n}\n\nlet hasUnsavedChanges = false;\nfor (const key of validVars) {\n    if (!savedState.hasOwnProperty(key) || !uiState.hasOwnProperty(key) || Number(savedState[key]) !== Number(uiState[key])) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\n\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 500,
        "wires": [
            [
                "2f8c6a0362e94e02"
            ]
        ]
    },
    {
        "id": "2aa59a7325201052",
        "type": "link in",
        "z": "2eb198d5254a377c",
        "name": "link in: update-all-vars-status-text",
        "links": [
            "63e0d71a954cc3b6"
        ],
        "x": 1455,
        "y": 600,
        "wires": [
            [
                "2f8c6a0362e94e02"
            ]
        ]
    },
    {
        "id": "fb654d1ccd8c04f7",
        "type": "ui_button",
        "z": "2eb198d5254a377c",
        "name": "Чтение из файла",
        "group": "b5f059245ebc9253",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение",
        "tooltip": "Прочитать значения переменных из файла, обновить поля и ГЛОБАЛЬНЫЕ переменные",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-download",
        "payload": "read_request",
        "payloadType": "str",
        "topic": "read_request",
        "topicType": "str",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "91d941bef190526b"
            ]
        ]
    },
    {
        "id": "91d941bef190526b",
        "type": "link out",
        "z": "2eb198d5254a377c",
        "name": "link out: trigger-read-all-vars",
        "mode": "link",
        "links": [
            "109756e5a4d5ea04"
        ],
        "x": 385,
        "y": 80,
        "wires": []
    },
    {
        "id": "e1a719afcd4a7e91",
        "type": "ui_button",
        "z": "2eb198d5254a377c",
        "name": "Запись в файл",
        "group": "b5f059245ebc9253",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись",
        "tooltip": "Применить изменения к ГЛОБАЛЬНЫМ переменным и сохранить текущие значения в файл",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-upload",
        "payload": "write_request",
        "payloadType": "str",
        "topic": "write_request",
        "topicType": "str",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "a5f6615a09fb36c6"
            ]
        ]
    },
    {
        "id": "a5f6615a09fb36c6",
        "type": "link out",
        "z": "2eb198d5254a377c",
        "name": "link out: trigger-save-all-vars",
        "mode": "link",
        "links": [
            "2df574ef89bc8dab"
        ],
        "x": 385,
        "y": 140,
        "wires": []
    },
    {
        "id": "a13981e30d690c30",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "n1",
        "label": "Переменная n1:",
        "group": "5a2c57e029073535",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "n1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "30252b03dffda1d6",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "k1",
        "label": "Переменная k1:",
        "group": "5a2c57e029073535",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "k1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "a2fdfc5b49d191f7",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "h1",
        "label": "Переменная h1:",
        "tooltip": "",
        "group": "5a2c57e029073535",
        "order": 5,
        "width": 6,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "h1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": "1",
        "className": "",
        "x": 1050,
        "y": 180,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "ebc22f55310ef8de",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "p1",
        "label": "Переменная p1 (ms):",
        "group": "5a2c57e029073535",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "p1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "b6f11e5d41c04115",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "pk1",
        "label": "Переменная pk1 (ms):",
        "group": "5a2c57e029073535",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pk1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 260,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "38bbd1822b481a5e",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "n2",
        "label": "Переменная n2:",
        "group": "797b951af3ed7e6e",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "n2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "e7df27f92064b191",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "k2",
        "label": "Переменная k2:",
        "group": "797b951af3ed7e6e",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "k2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 340,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "305c3691fcb5ddb8",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "h2",
        "label": "Переменная h2:",
        "group": "797b951af3ed7e6e",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "h2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 380,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "ba1d231ce91803de",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "p2",
        "label": "Переменная p2 (ms):",
        "group": "797b951af3ed7e6e",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "p2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 420,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "695400a284467cf6",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "pk2",
        "label": "Переменная pk2 (ms):",
        "group": "797b951af3ed7e6e",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pk2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 460,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "963a238e5fb12e84",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "n3",
        "label": "Переменная n3:",
        "group": "85844825f603eaec",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "n3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 500,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "9869fa4597abc41c",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "k3",
        "label": "Переменная k3:",
        "group": "85844825f603eaec",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "k3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 540,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "6ecb0f6ba0d9378f",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "h3",
        "label": "Переменная h3:",
        "group": "85844825f603eaec",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "h3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "9ca5a07fa79ff88e",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "p3",
        "label": "Переменная p3 (ms):",
        "group": "85844825f603eaec",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "p3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 620,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "67020d6c583372bd",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "pk3",
        "label": "Переменная pk3 (ms):",
        "group": "85844825f603eaec",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pk3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 660,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "b69113ef5805c6ab",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "n4",
        "label": "Переменная n4:",
        "group": "343529bc305f4ec7",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "n4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 700,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "3db7147cab9d0d5b",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "k4",
        "label": "Переменная k4:",
        "group": "343529bc305f4ec7",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "k4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 740,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "2997199f4ad5683c",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "h4",
        "label": "Переменная h4:",
        "group": "343529bc305f4ec7",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "h4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 780,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "ac5d717340d105e8",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "p4",
        "label": "Переменная p4 (ms):",
        "group": "343529bc305f4ec7",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "p4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 820,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "3c6e14e35298f8b1",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "pk4",
        "label": "Переменная pk4 (ms):",
        "group": "343529bc305f4ec7",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pk4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 860,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "73c3d79a614181a7",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "n5",
        "label": "Переменная n5:",
        "group": "11afac11e1586fa3",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "n5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 900,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "e53636a5cc5b8396",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "k5",
        "label": "Переменная k5:",
        "group": "11afac11e1586fa3",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "k5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 940,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "8a809aa9849bdc70",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "h5",
        "label": "Переменная h5:",
        "group": "11afac11e1586fa3",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "h5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -10000,
        "max": 10000,
        "step": 1,
        "x": 1050,
        "y": 980,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "02f34193e952471e",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "p5",
        "label": "Переменная p5 (ms):",
        "group": "11afac11e1586fa3",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "p5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 1020,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "3c900728a79381bb",
        "type": "ui_numeric",
        "z": "2eb198d5254a377c",
        "name": "pk5",
        "label": "Переменная pk5 (ms):",
        "group": "11afac11e1586fa3",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pk5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 5000,
        "step": 1,
        "x": 1050,
        "y": 1060,
        "wires": [
            [
                "9ffba4ae5aab376f"
            ]
        ]
    },
    {
        "id": "2f8c6a0362e94e02",
        "type": "ui_text",
        "z": "2eb198d5254a377c",
        "group": "b5f059245ebc9253",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус сохранения",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1630,
        "y": 550,
        "wires": []
    },
    {
        "id": "93f141bfbc0a4848",
        "type": "ui_button",
        "z": "2eb198d5254a377c",
        "name": "Создать бэкап сейчас",
        "group": "b5f059245ebc9253",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Создать Бэкап",
        "tooltip": "Сохранить текущие файлы переменных (All, Calc, PH) в каталог бэкапа с текущей датой",
        "color": "",
        "bgcolor": "orange",
        "className": "",
        "icon": "save",
        "payload": "manual",
        "payloadType": "str",
        "topic": "manual_backup",
        "topicType": "str",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "fa4f7c63be7a2049"
            ]
        ]
    },
    {
        "id": "96d8568b595807ad",
        "type": "ui_button",
        "z": "2eb198d5254a377c",
        "name": "Восстановить из бэкапа (сегодня)",
        "group": "b5f059245ebc9253",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Восстановить Бэкап",
        "tooltip": "Перезаписать текущие файлы переменных (All, Calc, PH) файлами из бэкапа за СЕГОДНЯШНЮЮ дату и перезагрузить переменные.",
        "color": "",
        "bgcolor": "darkred",
        "className": "",
        "icon": "restore",
        "payload": "restore",
        "payloadType": "str",
        "topic": "restore_backup",
        "topicType": "str",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "092e65324c6d5488"
            ]
        ]
    },
    {
        "id": "fa4f7c63be7a2049",
        "type": "link out",
        "z": "2eb198d5254a377c",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "a788e9550960b83e"
        ],
        "x": 375,
        "y": 260,
        "wires": []
    },
    {
        "id": "092e65324c6d5488",
        "type": "link out",
        "z": "2eb198d5254a377c",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "fb3eaedb991238cd"
        ],
        "x": 435,
        "y": 200,
        "wires": []
    },
    {
        "id": "2df574ef89bc8dab",
        "type": "link in",
        "z": "1d9e96f5f85cebbb",
        "name": "link in: trigger-save-all-vars",
        "links": [
            "a5f6615a09fb36c6",
            "cccbd4047eb1b324"
        ],
        "x": 245,
        "y": 80,
        "wires": [
            [
                "07fd3cb2b6e9c7fd"
            ]
        ]
    },
    {
        "id": "07fd3cb2b6e9c7fd",
        "type": "function",
        "z": "1d9e96f5f85cebbb",
        "name": "Apply Globals, Save State & File (All Vars)",
        "func": "const uiState = global.get('uiStateAll') || {};\nlet savedState = global.get('savedStateAll') || {};\n\nlet globalsChanged = false;\nconst validVars = [];\nfor (let i = 1; i <= 5; i++) {\n    validVars.push(`n${i}`, `k${i}`, `h${i}`, `p${i}`, `pk${i}`);\n}\n\nconst stateToSave = {};\n\nfor (const key of validVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : null;\n    \n    const numValue = Number(valueToSet);\n    if (valueToSet === null || isNaN(numValue)){\n         node.warn(`Attempted to save invalid/missing value for ${key}: ${valueToSet}. Using last saved value or default.`);\n         // Use last saved value or default from the init flow\n         const defaultVal = global.get('savedStateAll') ? global.get('savedStateAll')[key] : undefined; // Fallback needed\n         valueToSet = defaultVal !== undefined ? defaultVal : 0; // Default to 0 if truly missing\n    } else {\n         valueToSet = numValue;\n         // Add clamping if needed\n    }\n    \n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChanged = true;\n    }\n    stateToSave[key] = valueToSet;\n}\n\nglobal.set('savedStateAll', { ...stateToSave });\nglobal.set('uiStateAll', { ...stateToSave });\n\nif (globalsChanged) {\n    node.log(\"[WRITE_ALL_BTN] Глобальные переменные (1-5) обновлены из UI: \" + JSON.stringify(stateToSave));\n} else {\n    node.log(\"[WRITE_ALL_BTN] Глобальные переменные (1-5) не требовали обновления.\");\n}\nnode.log(\"[WRITE_ALL_BTN] global.savedStateAll и global.uiStateAll обновлены.\");\n\nconst filePayload = { payload: { ...stateToSave } };\nconst statusMessage = { payload: \"<font color='green'>Все изменения сохранены</font>\" };\n\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "a912ab47b28576c3"
            ],
            [
                "63e0d71a954cc3b6"
            ]
        ]
    },
    {
        "id": "a912ab47b28576c3",
        "type": "json",
        "z": "1d9e96f5f85cebbb",
        "name": "Объект в JSON",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "e02f727a9264965a"
            ]
        ]
    },
    {
        "id": "e02f727a9264965a",
        "type": "file",
        "z": "1d9e96f5f85cebbb",
        "name": "Сохранить файл переменных",
        "filename": "/home/root/.node-red/save/variables_all.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "e2013fe586ed788c"
            ]
        ]
    },
    {
        "id": "e2013fe586ed788c",
        "type": "ui_toast",
        "z": "1d9e96f5f85cebbb",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение",
        "name": "Уведомление о сохранении",
        "x": 480,
        "y": 340,
        "wires": []
    },
    {
        "id": "63e0d71a954cc3b6",
        "type": "link out",
        "z": "1d9e96f5f85cebbb",
        "name": "link out: update-all-vars-status-text",
        "mode": "link",
        "links": [
            "2aa59a7325201052"
        ],
        "x": 750,
        "y": 100,
        "wires": []
    },
    {
        "id": "751b94b08999ebf6",
        "type": "inject",
        "z": "8749a256bb1a291b",
        "name": "При старте потока 2c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "6e767e6478099678"
            ]
        ]
    },
    {
        "id": "175cd26666835156",
        "type": "link in",
        "z": "8749a256bb1a291b",
        "name": "link in: trigger-read-calc",
        "links": [
            "62f7d10c20047832"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "4d51f50f37d58b16"
            ]
        ]
    },
    {
        "id": "4d51f50f37d58b16",
        "type": "file in",
        "z": "8749a256bb1a291b",
        "name": "Прочитать файл переменных расчета",
        "filename": "/home/root/.node-red/save/variables_calculation.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "bc6acf61074673a9"
            ]
        ]
    },
    {
        "id": "87eb545b50afa656",
        "type": "catch",
        "z": "8749a256bb1a291b",
        "name": "Перехват ошибки чтения файла",
        "scope": [
            "4d51f50f37d58b16"
        ],
        "uncaught": false,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "5ad8461fb69ec696"
            ]
        ]
    },
    {
        "id": "bc6acf61074673a9",
        "type": "json",
        "z": "8749a256bb1a291b",
        "name": "Разобрать JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 80,
        "wires": [
            [
                "5ad8461fb69ec696"
            ]
        ]
    },
    {
        "id": "5ad8461fb69ec696",
        "type": "function",
        "z": "8749a256bb1a291b",
        "name": "Init/Read State & Globals (Calc)",
        "func": "const defaultVars = {\n    koef0: 1, konst0: 0,\n    koef1: 1, konst1: 0,\n    koef2: 1, konst2: 0,\n    koef3: 1, konst3: 0,\n    koef4: 1, konst4: 0,\n    koef5: 1, konst5: 0,\n    koef6: 1, konst6: 0,\n    koef7: 1, konst7: 0\n};\n\nlet loadedVars = {};\nlet source = msg.topic === 'init' ? '[INIT_CALC]' : '[READ_CALC_BTN]';\n\nconst requiredKeys = Object.keys(defaultVars);\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && requiredKeys.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    loadedVars = msg.payload;\n    node.warn(source + \" Переменные расчета (koef/konst) загружены из файла.\");\n} else {\n    loadedVars = { ...defaultVars };\n    if (msg.error) {\n         node.warn(source + \" Ошибка чтения файла переменных расчета: \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init'){\n         node.warn(source + \" Файл переменных расчета (koef/konst) не найден/поврежден/неполный. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл переменных расчета (koef/konst) не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key in defaultVars) { // Iterate over default keys to ensure all exist\n    let currentVal = loadedVars.hasOwnProperty(key) ? loadedVars[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n\n    if (isNaN(numValue)) {\n        node.warn(`Invalid number format for ${key}: ${currentVal}. Using default.`);\n        currentVal = defaultVars[key];\n        loadedVars[key] = currentVal; // Correct loadedVars as well\n    } else {\n         currentVal = numValue; // Use the number value\n         // Add clamping if needed, e.g., between -1000 and 1000\n         // if (currentVal < -1000) currentVal = -1000;\n         // if (currentVal > 1000) currentVal = 1000;\n         loadedVars[key] = currentVal; // Update loadedVars with potentially clamped value\n    }\n    \n    // Set global variables\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\n// Set global states\nglobal.set('savedStateCalc', { ...loadedVars });\nglobal.set('uiStateCalc', { ...loadedVars });\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные расчета (koef/konst) установлены/обновлены: \" + JSON.stringify(loadedVars));\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные расчета (koef/konst) уже были установлены.\");\n}\n\n// Send trigger to UI flow\nreturn { payload: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 140,
        "wires": [
            [
                "8f7b13569eb5fb21"
            ]
        ]
    },
    {
        "id": "8f7b13569eb5fb21",
        "type": "link out",
        "z": "8749a256bb1a291b",
        "name": "link out: trigger-calc-ui-update",
        "mode": "link",
        "links": [
            "195c30723715fceb"
        ],
        "x": 1090,
        "y": 140,
        "wires": []
    },
    {
        "id": "6e767e6478099678",
        "type": "function",
        "z": "8749a256bb1a291b",
        "name": "Ожидание готовности UI",
        "func": "const cloneMessage = (source) => {\n    if (typeof RED !== 'undefined' && RED.util && RED.util.cloneMessage) {\n        return RED.util.cloneMessage(source);\n    }\n    return JSON.parse(JSON.stringify(source));\n};\nlet enabled = context.get('uiReady') === true;\nif (msg && msg.enable === true) {\n    if (!enabled) {\n        enabled = true;\n        context.set('uiReady', true);\n    }\n    const pending = context.get('pending');\n    if (pending) {\n        context.set('pending', null);\n        return pending;\n    }\n    return null;\n}\nif (!enabled) {\n    context.set('pending', cloneMessage(msg));\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "4d51f50f37d58b16"
            ]
        ]
    },
    {
        "id": "94e3bd5ddc07eae0",
        "type": "link in",
        "z": "8749a256bb1a291b",
        "name": "link in: UI Ready",
        "links": [
            "35f8cce28c86843b"
        ],
        "x": 180,
        "y": 40,
        "wires": [
            [
                "6e767e6478099678"
            ]
        ]
    },
    {
        "id": "195c30723715fceb",
        "type": "link in",
        "z": "0640fd0276d52e44",
        "name": "link in: trigger-calc-ui-update",
        "links": [
            "8f7b13569eb5fb21",
            "3045711bf9f849ad"
        ],
        "x": 115,
        "y": 400,
        "wires": [
            [
                "837697ac5bccf976"
            ]
        ]
    },
    {
        "id": "837697ac5bccf976",
        "type": "function",
        "z": "0640fd0276d52e44",
        "name": "Update UI Elements (Calc)",
        "func": "const uiState = global.get('uiStateCalc') || {};\nconst savedState = global.get('savedStateCalc') || {};\nconst uiMessages = [];\nconst orderedKeys = [];\nfor (let i = 0; i <= 7; i++) {\n    orderedKeys.push(`koef${i}`, `konst${i}`);\n}\n\n// Prepare messages for UI numeric inputs (outputs 0-15)\nfor (const key of orderedKeys) {\n    const value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : 0; // Default to 0 if key missing\n    uiMessages.push({ payload: value, topic: key });\n}\n\n// Prepare message for the status indicator (output 16)\nlet hasUnsavedChanges = false;\nfor (const key of orderedKeys) {\n    // Use Number() to handle potential type differences\n    // Ensure both states have the key before comparing\n    if (!savedState.hasOwnProperty(key) || !uiState.hasOwnProperty(key) || Number(savedState[key]) !== Number(uiState[key])) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\nuiMessages.push({ payload: statusMessage });\n\n// Return the array of messages (16 for numerics + 1 for status text)\nreturn uiMessages;",
        "outputs": 17,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "da6a62c261739599"
            ],
            [
                "47378ab250015488"
            ],
            [
                "3ca6f266e692a81d"
            ],
            [
                "fc652cc18416b878"
            ],
            [
                "8b17815410ef4a63"
            ],
            [
                "1e18990627c22270"
            ],
            [
                "70bb9163b7dcc20e"
            ],
            [
                "3559c7445db4a199"
            ],
            [
                "cbadfe729fec1a87"
            ],
            [
                "54dd42945a76278c"
            ],
            [
                "076b2b3e4ad92652"
            ],
            [
                "544c1213aa4678ba"
            ],
            [
                "090b7d749cfa3ff1"
            ],
            [
                "51339e879c065c19"
            ],
            [
                "1e917613620232da"
            ],
            [
                "07d0d27e60dc4453"
            ],
            [
                "4d5a44d3d1b762c8"
            ]
        ]
    },
    {
        "id": "0dbab79e4ef91f79",
        "type": "function",
        "z": "0640fd0276d52e44",
        "name": "Handle UI Input & Update Status (Calc)",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\n\nlet uiState = global.get('uiStateCalc') || {};\nconst savedState = global.get('savedStateCalc') || {};\n\nconst validVars = [];\nfor (let i = 0; i <= 7; i++) {\n    validVars.push(`koef${i}`, `konst${i}`);\n}\n\nif (validVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    uiState[varName] = newValue;\n    global.set('uiStateCalc', uiState);\n} else {\n    node.warn(\"[UI_CALC_INPUT] Получено некорректное сообщение от UI: \" + JSON.stringify(msg));\n    return null; // Stop processing if invalid\n}\n\nlet hasUnsavedChanges = false;\nfor (const key of validVars) {\n    if (!savedState.hasOwnProperty(key) || !uiState.hasOwnProperty(key) || Number(savedState[key]) !== Number(uiState[key])) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\n\n// Only output the status message\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 400,
        "wires": [
            [
                "4d5a44d3d1b762c8"
            ]
        ]
    },
    {
        "id": "16264f81be1234e3",
        "type": "link in",
        "z": "0640fd0276d52e44",
        "name": "link in: update-calc-status-text",
        "links": [
            "8c877764679080a2"
        ],
        "x": 875,
        "y": 500,
        "wires": [
            [
                "4d5a44d3d1b762c8"
            ]
        ]
    },
    {
        "id": "17e81e34eb8c8a86",
        "type": "ui_button",
        "z": "0640fd0276d52e44",
        "name": "Чтение из файла",
        "group": "3a8fead8c95dcfc2",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение",
        "tooltip": "Прочитать значения переменных расчета из файла, обновить поля и ГЛОБАЛЬНЫЕ переменные",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-download",
        "payload": "read_request",
        "payloadType": "str",
        "topic": "read_request",
        "topicType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "62f7d10c20047832"
            ]
        ]
    },
    {
        "id": "62f7d10c20047832",
        "type": "link out",
        "z": "0640fd0276d52e44",
        "name": "link out: trigger-read-calc",
        "mode": "link",
        "links": [
            "175cd26666835156"
        ],
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "351950f33d1d0da5",
        "type": "ui_button",
        "z": "0640fd0276d52e44",
        "name": "Запись в файл",
        "group": "3a8fead8c95dcfc2",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись",
        "tooltip": "Применить изменения к ГЛОБАЛЬНЫМ переменным и сохранить текущие значения в файл",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-upload",
        "payload": "write_request",
        "payloadType": "str",
        "topic": "write_request",
        "topicType": "str",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "091bb74da318241c"
            ]
        ]
    },
    {
        "id": "091bb74da318241c",
        "type": "link out",
        "z": "0640fd0276d52e44",
        "name": "link out: trigger-save-calc",
        "mode": "link",
        "links": [
            "097f508f0c552526"
        ],
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "da6a62c261739599",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "koef0",
        "label": "Koef 0:",
        "group": "9b053e6ed348d847",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef0",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "47378ab250015488",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "konst0",
        "label": "Konst 0:",
        "group": "891f9144fbdf0897",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst0",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 140,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "3ca6f266e692a81d",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "koef1",
        "label": "Koef 1:",
        "group": "9b053e6ed348d847",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "fc652cc18416b878",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "konst1",
        "label": "Konst 1:",
        "group": "891f9144fbdf0897",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 220,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "8b17815410ef4a63",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "koef2",
        "label": "Koef 2:",
        "group": "9b053e6ed348d847",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 260,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "1e18990627c22270",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "konst2",
        "label": "Konst 2:",
        "group": "891f9144fbdf0897",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 300,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "70bb9163b7dcc20e",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "koef3",
        "label": "Koef 3:",
        "group": "9b053e6ed348d847",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 340,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "3559c7445db4a199",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "konst3",
        "label": "Konst 3:",
        "group": "891f9144fbdf0897",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst3",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 380,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "cbadfe729fec1a87",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "koef4",
        "label": "Koef 4:",
        "group": "9b053e6ed348d847",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 420,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "54dd42945a76278c",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "konst4",
        "label": "Konst 4:",
        "group": "891f9144fbdf0897",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst4",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 460,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "076b2b3e4ad92652",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "koef5",
        "label": "Koef 5:",
        "group": "9b053e6ed348d847",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 500,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "544c1213aa4678ba",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "konst5",
        "label": "Konst 5:",
        "group": "891f9144fbdf0897",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst5",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 540,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "090b7d749cfa3ff1",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "koef6",
        "label": "Koef 6:",
        "group": "9b053e6ed348d847",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef6",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 580,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "51339e879c065c19",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "konst6",
        "label": "Konst 6:",
        "group": "891f9144fbdf0897",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst6",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 620,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "1e917613620232da",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "koef7",
        "label": "Koef 7:",
        "group": "9b053e6ed348d847",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "koef7",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 660,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "07d0d27e60dc4453",
        "type": "ui_numeric",
        "z": "0640fd0276d52e44",
        "name": "konst7",
        "label": "Konst 7:",
        "group": "891f9144fbdf0897",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "konst7",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.01,
        "x": 610,
        "y": 700,
        "wires": [
            [
                "0dbab79e4ef91f79"
            ]
        ]
    },
    {
        "id": "4d5a44d3d1b762c8",
        "type": "ui_text",
        "z": "0640fd0276d52e44",
        "group": "3a8fead8c95dcfc2",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус сохранения",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1110,
        "y": 450,
        "wires": []
    },
    {
        "id": "097f508f0c552526",
        "type": "link in",
        "z": "504f075c21176c3f",
        "name": "link in: trigger-save-calc",
        "links": [
            "091bb74da318241c",
            "2f5f8d973fe5dd3f"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "220637738898946a"
            ]
        ]
    },
    {
        "id": "220637738898946a",
        "type": "function",
        "z": "504f075c21176c3f",
        "name": "Apply Globals, Save State & File (Calc)",
        "func": "const uiState = global.get('uiStateCalc') || {};\nlet savedState = global.get('savedStateCalc') || {}; // Will be updated\n\nlet globalsChanged = false;\nconst validVars = [];\nfor (let i = 0; i <= 7; i++) {\n    validVars.push(`koef${i}`, `konst${i}`);\n}\n\nconst stateToSave = {};\n\nfor (const key of validVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : null;\n    \n    // Ensure the value being set is a number\n    const numValue = Number(valueToSet);\n    if (valueToSet === null || isNaN(numValue)){\n         node.warn(`Attempted to save invalid/missing value for ${key}: ${valueToSet}. Using last saved value or default.`);\n         // Use last saved value or default from the init flow\n         const defaultValue = key.startsWith('koef') ? 1 : 0;\n         valueToSet = savedState.hasOwnProperty(key) ? savedState[key] : defaultValue; \n    } else {\n         valueToSet = numValue; // Use the valid number\n         // Add clamping if needed\n         // if (valueToSet < -1000) valueToSet = -1000;\n         // if (valueToSet > 1000) valueToSet = 1000;\n    }\n    \n    // Update global variable if changed\n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChanged = true;\n    }\n    // Store the potentially clamped/corrected value for saving state and file\n    stateToSave[key] = valueToSet; \n}\n\n// Update the global saved state\nglobal.set('savedStateCalc', { ...stateToSave });\n// Update the global UI state as well, in case values were clamped/corrected\nglobal.set('uiStateCalc', { ...stateToSave }); \n\nif (globalsChanged) {\n    node.log(\"[WRITE_CALC_BTN] Глобальные переменные расчета обновлены из UI: \" + JSON.stringify(stateToSave));\n} else {\n    node.log(\"[WRITE_CALC_BTN] Глобальные переменные расчета не требовали обновления.\");\n}\nnode.log(\"[WRITE_CALC_BTN] global.savedStateCalc и global.uiStateCalc обновлены.\");\n\n// Output 1: Data to save to file\nconst filePayload = { payload: { ...stateToSave } };\n\n// Output 2: Status message for UI text node via link out\nconst statusMessage = { payload: \"<font color='green'>Все изменения сохранены</font>\" };\n\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "2ed1fa6ca3a62231"
            ],
            [
                "8c877764679080a2"
            ]
        ]
    },
    {
        "id": "2ed1fa6ca3a62231",
        "type": "json",
        "z": "504f075c21176c3f",
        "name": "Объект в JSON",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "03f1625d5adbf91d"
            ]
        ]
    },
    {
        "id": "03f1625d5adbf91d",
        "type": "file",
        "z": "504f075c21176c3f",
        "name": "Сохранить файл переменных расчета",
        "filename": "/home/root/.node-red/save/variables_calculation.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "f4b9a0981348116b"
            ]
        ]
    },
    {
        "id": "f4b9a0981348116b",
        "type": "ui_toast",
        "z": "504f075c21176c3f",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение Расчета",
        "name": "Уведомление о сохранении",
        "x": 480,
        "y": 340,
        "wires": []
    },
    {
        "id": "8c877764679080a2",
        "type": "link out",
        "z": "504f075c21176c3f",
        "name": "link out: update-calc-status-text",
        "mode": "link",
        "links": [
            "16264f81be1234e3"
        ],
        "x": 730,
        "y": 100,
        "wires": []
    },
    {
        "id": "94958f04440b535b",
        "type": "inject",
        "z": "33e7454071695bcc",
        "name": "Запуск при старте 3с",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "start",
        "payload": "true",
        "payloadType": "bool",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "768ad1cdda668af0"
            ]
        ]
    },
    {
        "id": "570ff5650ceb97c7",
        "type": "ui_button",
        "z": "33e7454071695bcc",
        "name": "Сброс итерации",
        "group": "iteration_ui_group",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "label": "Сброс итерации",
        "tooltip": "Остановить текущую итерацию и начать с Шага 1",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "refresh",
        "payload": "reset",
        "payloadType": "str",
        "topic": "reset",
        "topicType": "str",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "b6dde8359e5f6218"
            ]
        ]
    },
    {
        "id": "b6dde8359e5f6218",
        "type": "function",
        "z": "33e7454071695bcc",
        "name": "Контроллер итерации",
        "func": "const fContext = flow.get('iterationContext') || {};\nconst gContext = global;\n\nif (fContext.intervalId) {\n    clearInterval(fContext.intervalId);\n    fContext.intervalId = null;\n}\nif (fContext.firstPauseTimeoutId) {\n    clearTimeout(fContext.firstPauseTimeoutId);\n    fContext.firstPauseTimeoutId = null;\n}\nif (fContext.nextStepDelayTimeoutId) {\n    clearTimeout(fContext.nextStepDelayTimeoutId);\n    fContext.nextStepDelayTimeoutId = null;\n}\nif (fContext.stepSendDelayTimeoutId) {\n    delete fContext.stepSendDelayTimeoutId;\n}\nif (fContext.pauseTimeoutId) {\n    delete fContext.pauseTimeoutId;\n}\n\n\nif (msg.topic === 'reset') {\n    node.warn(\"[ITERATION] Сброс итерации...\");\n    fContext.currentStep = 1;\n    fContext.isRunning = true;\n    if (fContext.intervalId) clearInterval(fContext.intervalId);\n    if (fContext.firstPauseTimeoutId) clearTimeout(fContext.firstPauseTimeoutId);\n    if (fContext.nextStepDelayTimeoutId) clearTimeout(fContext.nextStepDelayTimeoutId);\n    fContext.intervalId = null;\n    fContext.firstPauseTimeoutId = null;\n    fContext.nextStepDelayTimeoutId = null;\n\n    flow.set('iterationContext', fContext);\n    node.send([{ topic: 'start_step', payload: fContext.currentStep }, null, null]);\n    return null;\n}\n\nif (msg.topic === 'start' || msg.topic === 'start_step') {\n    if (msg.topic === 'start' && fContext.isRunning) {\n        node.log(\"[ITERATION] Итерация уже запущена (игнорирую 'start').\");\n        return null;\n    }\n\n    if (msg.topic === 'start') {\n        fContext.currentStep = 1;\n    }\n\n    fContext.currentStep = fContext.currentStep || 1;\n    fContext.isRunning = true;\n\n    const step = fContext.currentStep;\n    node.log(`[ITERATION] Запуск Шага ${step}`);\n\n    const n = gContext.get(`n${step}`);\n    const k = gContext.get(`k${step}`);\n    const h = gContext.get(`h${step}`);\n    let p = gContext.get(`p${step}`);\n    let pk = gContext.get(`pk${step}`);\n\n    if ([n, k, h, p, pk].some(val => typeof val !== 'number')) {\n        node.error(`[ITERATION] Ошибка: Не все переменные для Шага ${step} являются числами (${n},${k},${h},${p},${pk}). Остановка.`);\n        fContext.isRunning = false;\n        flow.set('iterationContext', fContext);\n        return null;\n    }\n    if (n === k) {\n        node.error(`[ITERATION] Ошибка: Начальное значение n${step} (${n}) равно конечному k${step} (${k}). Итерация невозможна. Остановка.`);\n        fContext.isRunning = false;\n        flow.set('iterationContext', fContext);\n        return null;\n    }\n    if (h === 0) {\n        node.error(`[ITERATION] Ошибка: Шаг h${step} равен нулю. Итерация невозможна. Остановка.`);\n        fContext.isRunning = false;\n        flow.set('iterationContext', fContext);\n        return null;\n    }\n    if (p <= 0) {\n        node.warn(`[ITERATION] Предупреждение: Период p${step} (${p}ms) <= 0. Используется 100ms.`);\n        p = 100;\n    }\n    if (pk < 0) {\n        node.warn(`[ITERATION] Предупреждение: Пауза pk${step} (${pk}ms) < 0. Используется 0ms.`);\n        pk = 0;\n    }\n\n    const isIncreasing = k > n;\n    const stepIncrement = isIncreasing ? Math.abs(h) : -Math.abs(h);\n    node.log(`[ITERATION] Шаг ${step}: Направление ${isIncreasing ? 'возрастание' : 'убывание'}, шаг из h${step}=${h} равен ${stepIncrement}`);\n\n    gContext.set('x', n);\n    node.log(`[ITERATION] Шаг ${step}: x инициализирован значением n${step} = ${n}`);\n\n    node.send([null, { payload: n }, null]);\n\n    fContext.intervalId = setInterval(() => {\n        const currentfContext = flow.get('iterationContext') || {};\n        if (!currentfContext.isRunning || currentfContext.intervalId !== fContext.intervalId) {\n            clearInterval(fContext.intervalId);\n            return;\n        }\n\n        let currentX = gContext.get('x');\n        let nextX = currentX + stepIncrement;\n\n        if ((isIncreasing && nextX > k) || (!isIncreasing && nextX < k)) {\n            currentX = k;\n        } else {\n            currentX = nextX;\n        }\n        gContext.set('x', currentX);\n\n        node.send([null, { payload: currentX }, null]);\n\n        const conditionMet = currentX === k;\n\n        if (conditionMet) {\n            node.log(`[ITERATION] Шаг ${step} завершен. x (${currentX}) достиг k${step} (${k}).`);\n            clearInterval(fContext.intervalId);\n            fContext.intervalId = null;\n\n            node.log(`[ITERATION] Запуск ПЕРВОЙ паузы pk=${pk}ms.`);\n            fContext.firstPauseTimeoutId = setTimeout(() => {\n                const latestfContext1 = flow.get('iterationContext') || {};\n                if (!latestfContext1.isRunning || latestfContext1.firstPauseTimeoutId !== fContext.firstPauseTimeoutId) {\n                    node.warn(\"[ITERATION] Сброс произошел во время ПЕРВОЙ паузы 'pk'. Номер шага и вторая пауза 'pk' не запускаются.\")\n                    return;\n                }\n                latestfContext1.firstPauseTimeoutId = null;\n\n                node.log(`[ITERATION] Отправка номера шага ${step} на выход 3 (после ПЕРВОЙ паузы pk=${pk}ms).`);\n                node.send([null, null, { payload: step }]);\n\n                node.log(`[ITERATION] Запуск ВТОРОЙ паузы pk=${pk}ms перед следующим шагом.`);\n                latestfContext1.nextStepDelayTimeoutId = setTimeout(() => {\n                    const latestfContext2 = flow.get('iterationContext') || {};\n                    if (!latestfContext2.isRunning || latestfContext2.nextStepDelayTimeoutId !== latestfContext1.nextStepDelayTimeoutId) {\n                        node.warn(\"[ITERATION] Сброс произошел во время ВТОРОЙ паузы 'pk'. Следующий шаг не запускается.\")\n                        return;\n                    }\n                    latestfContext2.nextStepDelayTimeoutId = null;\n\n                    latestfContext2.currentStep = (step % 5) + 1;\n                    node.log(`[ITERATION] Запуск следующего шага ${latestfContext2.currentStep} (после ВТОРОЙ паузы pk=${pk}ms).`);\n                    flow.set('iterationContext', latestfContext2);\n                    node.send([{ topic: 'start_step', payload: latestfContext2.currentStep }, null, null]);\n\n                }, pk);\n                flow.set('iterationContext', latestfContext1);\n\n            }, pk);\n            flow.set('iterationContext', fContext);\n\n        }\n    }, p);\n\n    flow.set('iterationContext', fContext);\n}\n\nreturn null;\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "// Code added here will be run once when the node is started.\nnode.log(\"[ITERATION] Контроллер инициализирован.\");\n// Initialize flow context for iteration\nflow.set('iterationContext', { \n    currentStep: 1,\n    isRunning: false,\n    intervalId: null,\n    pauseTimeoutId: null\n});\n// Initialize global x if not present\nif (global.get('x') === undefined) {\n    global.set('x', 0);\n}\n// Initialize global nh if not present\nif (global.get('nh') === undefined) {\n    global.set('nh', 0); // Or null, or a suitable default\n}\n",
        "finalize": "// Code added here will be run when the node is stopped or restarted.\nconst fContext = flow.get('iterationContext') || {};\nnode.log(\"[ITERATION] Остановка контроллера...\");\nif (fContext.intervalId) {\n    clearInterval(fContext.intervalId);\n    node.log(\"[ITERATION] Остановлен таймер интервала при выключении.\");\n}\nif (fContext.pauseTimeoutId) {\n    clearTimeout(fContext.pauseTimeoutId);\n    node.log(\"[ITERATION] Остановлен таймер паузы при выключении.\");\n}\n// Reset context on finalize\nflow.set('iterationContext', { \n    currentStep: 1,\n    isRunning: false,\n    intervalId: null,\n    pauseTimeoutId: null\n});\nnode.log(\"[ITERATION] Контроллер остановлен и контекст сброшен.\");\n",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "b6dde8359e5f6218",
                "b426cfb2c6777508"
            ],
            [
                "c3699c7fa6d2839b"
            ],
            [
                "3d48a651a16f2fef",
                "9b73230004d23f1e"
            ]
        ]
    },
    {
        "id": "6abf2f14394c2a47",
        "type": "ui_chart",
        "z": "33e7454071695bcc",
        "name": "График итерации X",
        "group": "iteration_ui_group",
        "order": 1,
        "width": 32,
        "height": 12,
        "label": "Значение X",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "200",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3d48a651a16f2fef",
        "type": "change",
        "z": "33e7454071695bcc",
        "name": "Установить global.nh",
        "rules": [
            {
                "t": "set",
                "p": "nh",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b426cfb2c6777508",
        "type": "link out",
        "z": "33e7454071695bcc",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "c40f15795d86b8c3"
        ],
        "x": 915,
        "y": 240,
        "wires": []
    },
    {
        "id": "9b73230004d23f1e",
        "type": "link out",
        "z": "33e7454071695bcc",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "592ed12eaeb72f14",
            "1091f62cd3fa9352",
            "c94028d4e3eb9d6e",
            "2615b3dc67948e53"
        ],
        "x": 915,
        "y": 280,
        "wires": []
    },
    {
        "id": "9cb0b4091b53be26",
        "type": "link in",
        "z": "33e7454071695bcc",
        "name": "Сброс итерации",
        "links": [
            "153ff17068380336"
        ],
        "x": 145,
        "y": 180,
        "wires": [
            [
                "570ff5650ceb97c7"
            ]
        ]
    },
    {
        "id": "d031742d86265770",
        "type": "delay",
        "z": "33e7454071695bcc",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 110,
        "y": 360,
        "wires": [
            [
                "570ff5650ceb97c7"
            ]
        ]
    },
    {
        "id": "c3699c7fa6d2839b",
        "type": "function",
        "z": "33e7454071695bcc",
        "name": "Фильтр вывода графика итерации",
        "func": "let enabled = flow.get('iterationChartEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('iterationChartEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "6abf2f14394c2a47"
            ]
        ]
    },
    {
        "id": "37b9e57fd5f50dfd",
        "type": "function",
        "z": "33e7454071695bcc",
        "name": "Управление графиком итерации",
        "func": "const enabled = msg.payload === true;\nflow.set('iterationChartEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "6abf2f14394c2a47"
            ]
        ]
    },
    {
        "id": "96b8ee17321303ad",
        "type": "ui_switch",
        "z": "33e7454071695bcc",
        "name": "Переключатель графика итерации",
        "label": "Показывать график итерации",
        "tooltip": "",
        "group": "iteration_ui_group",
        "order": 3,
        "width": 8,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "iteration_chart_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "37b9e57fd5f50dfd"
            ]
        ]
    },
    {
        "id": "6fdd266fe20ba247",
        "type": "inject",
        "z": "33e7454071695bcc",
        "name": "Итерация: выключить график по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "iteration_chart_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "37b9e57fd5f50dfd"
            ]
        ]
    },
    {
        "id": "768ad1cdda668af0",
        "type": "function",
        "z": "33e7454071695bcc",
        "name": "Ожидание готовности UI",
        "func": "const cloneMessage = (source) => {\n    if (typeof RED !== 'undefined' && RED.util && RED.util.cloneMessage) {\n        return RED.util.cloneMessage(source);\n    }\n    return JSON.parse(JSON.stringify(source));\n};\n\nlet enabled = context.get('uiReady') === true;\nconst isStartSignal = msg && msg.topic === 'start';\n\nif (isStartSignal) {\n    return msg;\n}\n\nif (msg && msg.enable === true) {\n    if (!enabled) {\n        enabled = true;\n        context.set('uiReady', true);\n    }\n    const pending = context.get('pending');\n    if (pending) {\n        context.set('pending', null);\n        return pending;\n    }\n    return null;\n}\n\nif (!enabled) {\n    context.set('pending', cloneMessage(msg));\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "b6dde8359e5f6218"
            ]
        ]
    },
    {
        "id": "0561a972ceb6b1f6",
        "type": "link in",
        "z": "33e7454071695bcc",
        "name": "link in: UI Ready",
        "links": [
            "35f8cce28c86843b"
        ],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "768ad1cdda668af0"
            ]
        ]
    },
    {
        "id": "e15e8c6c6ebc4858",
        "type": "ADAM-write",
        "z": "2a7abf2a60427cf6",
        "name": "Канал 0 АО (6224)",
        "host": "192.168.2.2",
        "serialPortCfg": "",
        "unit_id": 1,
        "write_ch": 0,
        "write_ch_type": "write_ao_1",
        "reconnecttimeout": "1",
        "Series": "mbtcp",
        "advDevTypeTCP": "ADAM-6224",
        "advDevTypeRTU": "ADAM-4022T",
        "advDevType": "ADAM-6224",
        "x": 1130,
        "y": 140,
        "wires": []
    },
    {
        "id": "4b32906d19e2f74a",
        "type": "range",
        "z": "2a7abf2a60427cf6",
        "minin": "-5000",
        "maxin": "5000",
        "minout": "0",
        "maxout": "4095",
        "action": "clamp",
        "round": true,
        "property": "payload",
        "name": "Scale x to 0-4095",
        "x": 900,
        "y": 140,
        "wires": [
            [
                "e15e8c6c6ebc4858",
                "ce60f2d7f9a81770"
            ]
        ]
    },
    {
        "id": "625d68e8a21e4b17",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Get Global Var x",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "x",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "6a9b3a3423b03195"
            ]
        ]
    },
    {
        "id": "abdb3057bfef3eda",
        "type": "inject",
        "z": "2a7abf2a60427cf6",
        "name": "Periodic Trigger 0.1с",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "625d68e8a21e4b17",
                "85a4a12a3d7cffb1"
            ]
        ]
    },
    {
        "id": "6a9b3a3423b03195",
        "type": "rbe",
        "z": "2a7abf2a60427cf6",
        "name": "Filter unchanged x",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "x": 630,
        "y": 140,
        "wires": [
            [
                "4b32906d19e2f74a",
                "90dd7bf4424a07d6"
            ]
        ]
    },
    {
        "id": "ce60f2d7f9a81770",
        "type": "get-ai-value",
        "z": "2a7abf2a60427cf6",
        "name": "AI 6717 Read",
        "x": 500,
        "y": 500,
        "wires": [
            [
                "1f42a14ce13e8631"
            ],
            [
                "fac29a1e4ffbaae8"
            ],
            [
                "d6c2f82db7f64f1d"
            ],
            [
                "1c78a257d7c22948"
            ],
            [
                "8291472f4728b577"
            ],
            [
                "c21d62b7582fcb84"
            ],
            [
                "5c1d676703b93b0f"
            ],
            [
                "7e5b90b69ac2babc"
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "1f42a14ce13e8631",
        "type": "range",
        "z": "2a7abf2a60427cf6",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 0 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 320,
        "wires": [
            [
                "64babe39bd9abd06"
            ]
        ]
    },
    {
        "id": "fac29a1e4ffbaae8",
        "type": "range",
        "z": "2a7abf2a60427cf6",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 1 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 360,
        "wires": [
            [
                "5d177a3bbf4fcad9"
            ]
        ]
    },
    {
        "id": "d6c2f82db7f64f1d",
        "type": "range",
        "z": "2a7abf2a60427cf6",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 2 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 400,
        "wires": [
            [
                "be6713eb97f32c33"
            ]
        ]
    },
    {
        "id": "1c78a257d7c22948",
        "type": "range",
        "z": "2a7abf2a60427cf6",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 3 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 440,
        "wires": [
            [
                "aac7d145acfdff0a"
            ]
        ]
    },
    {
        "id": "8291472f4728b577",
        "type": "range",
        "z": "2a7abf2a60427cf6",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 4 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 480,
        "wires": [
            [
                "d89ad26f9a59373e"
            ]
        ]
    },
    {
        "id": "c21d62b7582fcb84",
        "type": "range",
        "z": "2a7abf2a60427cf6",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 5 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 520,
        "wires": [
            [
                "8749b3c7f89865b9"
            ]
        ]
    },
    {
        "id": "5c1d676703b93b0f",
        "type": "range",
        "z": "2a7abf2a60427cf6",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 6 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 560,
        "wires": [
            [
                "a6761e33e04983a6"
            ]
        ]
    },
    {
        "id": "7e5b90b69ac2babc",
        "type": "range",
        "z": "2a7abf2a60427cf6",
        "minin": "-10",
        "maxin": "10",
        "minout": "-10000",
        "maxout": "10000",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "Scale AI 7 (-10V..10V -> -10000..10000)",
        "x": 860,
        "y": 600,
        "wires": [
            [
                "4c888a4840d46e09"
            ]
        ]
    },
    {
        "id": "64babe39bd9abd06",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Set Topic AI_0",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 320,
        "wires": [
            [
                "0aa2dd44eeefd484",
                "86a9f0f1b35752cf"
            ]
        ]
    },
    {
        "id": "5d177a3bbf4fcad9",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Set Topic AI_1",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 360,
        "wires": [
            [
                "0aa2dd44eeefd484"
            ]
        ]
    },
    {
        "id": "be6713eb97f32c33",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Set Topic AI_2",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 400,
        "wires": [
            [
                "0aa2dd44eeefd484"
            ]
        ]
    },
    {
        "id": "aac7d145acfdff0a",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Set Topic AI_3",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_3",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 440,
        "wires": [
            [
                "0aa2dd44eeefd484"
            ]
        ]
    },
    {
        "id": "d89ad26f9a59373e",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Set Topic AI_4",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 480,
        "wires": [
            [
                "0aa2dd44eeefd484"
            ]
        ]
    },
    {
        "id": "8749b3c7f89865b9",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Set Topic AI_5",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_5",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 520,
        "wires": [
            [
                "0aa2dd44eeefd484"
            ]
        ]
    },
    {
        "id": "a6761e33e04983a6",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Set Topic AI_6",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_6",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "0aa2dd44eeefd484"
            ]
        ]
    },
    {
        "id": "4c888a4840d46e09",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Set Topic AI_7",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AI_7",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 600,
        "wires": [
            [
                "0aa2dd44eeefd484"
            ]
        ]
    },
    {
        "id": "a7426e94d0ab22bc",
        "type": "ui_chart",
        "z": "2a7abf2a60427cf6",
        "name": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 8,
        "width": "32",
        "height": "12",
        "label": "AI Каналы 6717 (мВ, масштабированные)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "-2000",
        "ymax": "2000",
        "removeOlder": "30",
        "removeOlderPoints": "100",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#d62728",
            "#9467bd",
            "#8c564b",
            "#e377c2",
            "#7f7f7f",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1310,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "85a4a12a3d7cffb1",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Get Global Var nh (Step)",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "nh",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 300,
        "wires": [
            [
                "b39a339a461c97d1"
            ]
        ]
    },
    {
        "id": "b39a339a461c97d1",
        "type": "rbe",
        "z": "2a7abf2a60427cf6",
        "name": "Filter unchanged nh",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "x": 260,
        "y": 420,
        "wires": [
            [
                "ce60f2d7f9a81770",
                "dd12e7ef9fdaa235"
            ]
        ]
    },
    {
        "id": "dd12e7ef9fdaa235",
        "type": "debug",
        "z": "2a7abf2a60427cf6",
        "name": "debug nh (Step)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 500,
        "wires": []
    },
    {
        "id": "0aa2dd44eeefd484",
        "type": "join",
        "z": "2a7abf2a60427cf6",
        "name": "Join AI_0-7",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "0.05",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1300,
        "y": 460,
        "wires": [
            [
                "e2a1891a2edc5b80",
                "57e16f82079f3352"
            ]
        ]
    },
    {
        "id": "e2a1891a2edc5b80",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Сбор данных AI для лога",
        "func": "// Этот узел собирает данные только если включено логирование\nlet isLogging = flow.get('isLogging') || false;\nif (!isLogging) {\n    return null; // Не собираем данные, если логирование выключено\n}\n\nlet loggedData = flow.get('loggedData') || [];\nconst timestamp = new Date().toISOString();\nconst dataPoint = { timestamp: timestamp };\nlet allChannelsValid = true;\n\n// Проверяем, что все 8 каналов пришли и являются числами\nfor (let i = 0; i < 8; i++) {\n    const key = `AI_${i}`;\n    const value = msg.payload[key];\n    if (typeof value === 'number') {\n        dataPoint[key] = value; // Добавляем только числовые значения\n    } else {\n        node.warn(`[LOG_COLLECT] Получены нечисловые данные от ${key}: ${value}, точка не будет записана полностью.`);\n        allChannelsValid = false;\n        break; // Прерываем, если хотя бы один канал невалиден\n    }\n}\n\n// Добавляем точку данных в массив, только если все каналы валидны\nif (allChannelsValid) {\n    loggedData.push(dataPoint);\n    flow.set('loggedData', loggedData);\n}\n\nreturn null; // Этот узел не передает сообщения дальше",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Инициализация переменных при развертывании потока\nflow.set('isLogging', false);       // Флаг активности логирования\nflow.set('loggedData', []);         // Массив для сбора данных\nflow.set('loggingRequested', false); // Флаг запроса на логирование\nflow.set('latestAIReadings', {});  // Последние считанные значения AI (до коэфф/конст)\nnode.log(\"Состояние записи и последние значения АИ инициализированы.\");",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c94028d4e3eb9d6e",
        "type": "link in",
        "z": "2a7abf2a60427cf6",
        "name": "Link In (Завершение Шага)",
        "links": [
            "9b73230004d23f1e"
        ],
        "x": 115,
        "y": 700,
        "wires": [
            [
                "0801270440e2af72"
            ]
        ]
    },
    {
        "id": "0801270440e2af72",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Управление записью лога",
        "func": "let isLogging = flow.get('isLogging') || false;\nlet loggingRequested = flow.get('loggingRequested') || false;\nlet loggedData = flow.get('loggedData') || [];\nlet statusMsg = null; // Сообщение для UI\nlet dataToSave = null; // Данные для сохранения в файл\n\n// Обработка нажатия кнопки \"Начать запись\"\nif (msg.topic === 'start_logging') {\n    if (isLogging) {\n        node.warn(\"Запись уже активна.\");\n        statusMsg = { payload: \"<font color='blue'>Запись уже идет...</font>\" };\n    } else if (loggingRequested) {\n        node.warn(\"Запрос на запись уже отправлен, ожидание шага 5.\");\n        statusMsg = { payload: \"<font color='orange'>Ожидание завершения цикла (Шаг 5)...</font>\" };\n    } else {\n        node.log(\"Запрос на начало записи следующего цикла итерации.\");\n        flow.set('loggingRequested', true);\n        statusMsg = { payload: \"<font color='orange'>Ожидание завершения цикла (Шаг 5)...</font>\" };\n    }\n} \n// Обработка сигнала завершения шага (предполагается, что payload - номер шага)\nelse if (typeof msg.payload === 'number') { \n    const step = msg.payload;\n    // Если был запрос и завершился шаг 5, начинаем запись\n    if (step === 5 && loggingRequested) {\n        node.log(\"Начало записи данных (после Шага 5).\");\n        flow.set('isLogging', true);\n        flow.set('loggingRequested', false);\n        flow.set('loggedData', []); // Очищаем массив перед началом новой записи\n        statusMsg = { payload: \"<font color='blue'>Идет запись...</font>\" };\n    }\n    // Если запись активна и завершился шаг 5, завершаем запись\n    else if (step === 5 && isLogging) {\n        node.log(`Завершение записи после шага ${step}. Собрано точек: ${loggedData.length}`);\n        flow.set('isLogging', false);\n        if (loggedData.length > 0) {\n            dataToSave = { payload: loggedData }; // Передаем собранные данные на выход 1\n            statusMsg = { payload: \"<font color='green'>Запись завершена, файл сохранен.</font>\" };\n        } else {\n            node.warn(\"Запись завершена, но данные не были собраны.\");\n            statusMsg = { payload: \"<font color='orange'>Запись завершена, но данных нет.</font>\" };\n        }\n        flow.set('loggedData', []); // Очищаем массив после завершения\n    }\n} else {\n    // Игнорируем другие сообщения\n    node.warn(`[LOG_CONTROL] Получено неожиданное сообщение: ${JSON.stringify(msg)}`);\n    return [null, null];\n}\n\n// Выход 1: данные для сохранения (или null)\n// Выход 2: сообщение статуса для UI (или null)\nreturn [dataToSave, statusMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 700,
        "wires": [
            [
                "f418697207b1bb4d"
            ],
            [
                "c21e162729cb7559"
            ]
        ]
    },
    {
        "id": "ff608bdd2b57cda7",
        "type": "ui_button",
        "z": "2a7abf2a60427cf6",
        "name": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Начать запись цикла",
        "tooltip": "Записать данные AI_0-7 за один полный цикл итерации (начиная после следующего завершения шага 5) в файл",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "play_arrow",
        "payload": "true",
        "payloadType": "bool",
        "topic": "start_logging",
        "topicType": "str",
        "x": 140,
        "y": 760,
        "wires": [
            [
                "0801270440e2af72"
            ]
        ]
    },
    {
        "id": "c21e162729cb7559",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "b5ad3d26d2dec3f7",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Статус записи:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 620,
        "y": 760,
        "wires": []
    },
    {
        "id": "f418697207b1bb4d",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Формат CSV (8 каналов)",
        "func": "const data = msg.payload;\n// Проверка, что пришли данные и это массив\nif (!Array.isArray(data) || data.length === 0) {\n    node.warn(\"Нет данных для форматирования в CSV.\");\n    return null; // Не продолжаем, если данных нет\n}\n\n// Заголовок CSV файла\nconst header = \"timestamp,AI_0,AI_1,AI_2,AI_3,AI_4,AI_5,AI_6,AI_7\";\n\n// Формирование строк CSV\nconst rows = data.map(row => {\n    const ts = row.timestamp || ''; // Временная метка\n    const values = [];\n    // Проходим по всем 8 каналам\n    for (let i = 0; i < 8; i++) {\n        const key = `AI_${i}`;\n        // Проверяем, что значение существует и является числом\n        const value = (typeof row[key] === 'number') ? row[key] : ''; // Пустая строка, если нет данных\n        values.push(value);\n    }\n    // Собираем строку: timestamp,val0,val1,...,val7\n    return `${ts},${values.join(',')}`;\n});\n\n// Собираем итоговую CSV строку\nconst csvString = header + \"\\n\" + rows.join(\"\\n\");\n\n// Помещаем CSV строку в payload для следующего узла\nmsg.payload = csvString;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 700,
        "wires": [
            [
                "70fb02be701e9d4c"
            ]
        ]
    },
    {
        "id": "70fb02be701e9d4c",
        "type": "file",
        "z": "2a7abf2a60427cf6",
        "name": "Запись лога в CSV",
        "filename": "/home/root/.node-red/save/ai_log.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 970,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "57e16f82079f3352",
        "type": "change",
        "z": "2a7abf2a60427cf6",
        "name": "Store Latest AI Readings (Raw)",
        "rules": [
            {
                "t": "set",
                "p": "latestAIReadings",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1450,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "71d55164f6d41566",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "9348979b18aad42e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 60,
        "wires": []
    },
    {
        "id": "0ffd728d71a85a32",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "9348979b18aad42e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 100,
        "wires": []
    },
    {
        "id": "cda9981ff8781132",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "9348979b18aad42e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 140,
        "wires": []
    },
    {
        "id": "ca46cea741e60101",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "9348979b18aad42e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 180,
        "wires": []
    },
    {
        "id": "dbb3a31c5fa35055",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "9348979b18aad42e",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 220,
        "wires": []
    },
    {
        "id": "1357a9a21a5deb62",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "1c9c669cfa71380c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 260,
        "wires": []
    },
    {
        "id": "bf3fae54dd4057a2",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "1c9c669cfa71380c",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 300,
        "wires": []
    },
    {
        "id": "291a233deea0b534",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "1c9c669cfa71380c",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 340,
        "wires": []
    },
    {
        "id": "28513af08e7ad30b",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "1c9c669cfa71380c",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 380,
        "wires": []
    },
    {
        "id": "bf70ee6c69740f7e",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "1c9c669cfa71380c",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 420,
        "wires": []
    },
    {
        "id": "48709d30c5fee154",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "78478d37299df3f2",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 460,
        "wires": []
    },
    {
        "id": "89246512da529202",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "78478d37299df3f2",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 500,
        "wires": []
    },
    {
        "id": "f7b44dd02c69a4c4",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "78478d37299df3f2",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 540,
        "wires": []
    },
    {
        "id": "5da2d2e33db01e1b",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "78478d37299df3f2",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 580,
        "wires": []
    },
    {
        "id": "1d6211889ab2bd59",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "78478d37299df3f2",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 620,
        "wires": []
    },
    {
        "id": "04026a46a4364d05",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "4ad62ba0c83b740b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 660,
        "wires": []
    },
    {
        "id": "99913083ef265f70",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "4ad62ba0c83b740b",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 700,
        "wires": []
    },
    {
        "id": "a784a57fa1a18687",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "4ad62ba0c83b740b",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 740,
        "wires": []
    },
    {
        "id": "db73f5dfb7405740",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "4ad62ba0c83b740b",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 780,
        "wires": []
    },
    {
        "id": "1d17e6b901c43221",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "4ad62ba0c83b740b",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 820,
        "wires": []
    },
    {
        "id": "aa497dda464af0c6",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "9eaeaa2ca534b09b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 860,
        "wires": []
    },
    {
        "id": "21ba79ac302a4bb5",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "9eaeaa2ca534b09b",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 900,
        "wires": []
    },
    {
        "id": "0bed81c5d2306e3a",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "9eaeaa2ca534b09b",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 940,
        "wires": []
    },
    {
        "id": "f3626b5edbd440ee",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "9eaeaa2ca534b09b",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 980,
        "wires": []
    },
    {
        "id": "f9cd794e30e0727f",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "9eaeaa2ca534b09b",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1020,
        "wires": []
    },
    {
        "id": "fd6cca6d399f0393",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "d513ea3bdc3c943e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1060,
        "wires": []
    },
    {
        "id": "7ca4464d61f5f7be",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "d513ea3bdc3c943e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1100,
        "wires": []
    },
    {
        "id": "d3c88db840a76f35",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "d513ea3bdc3c943e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1140,
        "wires": []
    },
    {
        "id": "497f9bf2feda9d1a",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "d513ea3bdc3c943e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8c9e41c0b609066f",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "d513ea3bdc3c943e",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1220,
        "wires": []
    },
    {
        "id": "854923c76b80877f",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "1c524b55f70bd43f",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1260,
        "wires": []
    },
    {
        "id": "019e86868f3003e4",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "1c524b55f70bd43f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1300,
        "wires": []
    },
    {
        "id": "c7bd6febb049e904",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "1c524b55f70bd43f",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1340,
        "wires": []
    },
    {
        "id": "965e580404f502f0",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "1c524b55f70bd43f",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1380,
        "wires": []
    },
    {
        "id": "fbe4f48349da3bbc",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "1c524b55f70bd43f",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1420,
        "wires": []
    },
    {
        "id": "fcbaf33dad0b6d3c",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "0f43dd3488f8235e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1460,
        "wires": []
    },
    {
        "id": "a66aba0f8cadb964",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "0f43dd3488f8235e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1500,
        "wires": []
    },
    {
        "id": "bb6fc9a64429f1b0",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "0f43dd3488f8235e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 3:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e08e532b15f2648e",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "0f43dd3488f8235e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 4:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1580,
        "wires": []
    },
    {
        "id": "da29395929fdf3f7",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "0f43dd3488f8235e",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Шаг 5:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1890,
        "y": 1620,
        "wires": []
    },
    {
        "id": "c40f15795d86b8c3",
        "type": "link in",
        "z": "2a7abf2a60427cf6",
        "name": "Link In (Начало Шага)",
        "links": [
            "b426cfb2c6777508"
        ],
        "x": 115,
        "y": 860,
        "wires": [
            [
                "1c42a88de18c71e3"
            ]
        ]
    },
    {
        "id": "1c42a88de18c71e3",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Сохранить AI пред. шага (с коэф/конст) и обновить UI",
        "func": "// Получаем номер НАЧИНАЮЩЕГОСЯ шага\nconst startingStep = msg.payload;\nif (typeof startingStep !== 'number' || startingStep < 1 || startingStep > 5) {\n    node.warn(`[AI_SAVE] Получено некорректное сообщение для начала шага: ${JSON.stringify(msg.payload)}`);\n    return null; // Игнорируем некорректные сообщения\n}\n\n// Определяем номер ПРЕДЫДУЩЕГО шага, данные которого мы сохраняем\nlet previousStep;\nif (startingStep === 1) {\n    previousStep = 5; // После 5-го идет 1-й\n} else {\n    previousStep = startingStep - 1;\n}\n\nnode.log(`[AI_SAVE] Начинается шаг ${startingStep}, сохраняем данные для предыдущего шага ${previousStep}`);\n\n// Получаем последние СЫРЫЕ (масштабированные) значения AI из переменной потока\nconst latestAI = flow.get('latestAIReadings');\n\n// Массив для хранения сообщений, которые будут отправлены на UI элементы\n// 40 выходов: 8 каналов * 5 шагов\nlet uiUpdateMessages = new Array(40).fill(null);\n\n// Проверяем, есть ли данные для сохранения\nif (latestAI && typeof latestAI === 'object' && Object.keys(latestAI).length > 0) {\n    node.log(`[AI_SAVE] Получены последние значения AI: ${JSON.stringify(latestAI)}`);\n    \n    // Обрабатываем каждый из 8 каналов\n    for (let i = 0; i < 8; i++) {\n        const aiChannelKey = `AI_${i}`; // Ключ в объекте latestAI (e.g., 'AI_0')\n        const globalVarKey = `ai${i + 1}h${previousStep}`; // Ключ для глобальной переменной (e.g., 'ai1h5')\n        const koefKey = `koef${i}`; // Ключ для коэффициента (e.g., 'koef0')\n        const konstKey = `konst${i}`; // Ключ для константы (e.g., 'konst0')\n        \n        const rawValue = latestAI[aiChannelKey]; // Получаем сырое значение\n        \n        // Определяем индекс выхода для UI элемента\n        // Выходы 0-4 для AI_0 (шаги 1-5), 5-9 для AI_1 (шаги 1-5), и т.д.\n        const uiOutputIndex = i * 5 + (previousStep - 1); \n\n        // Проверяем, что сырое значение - число\n        if (typeof rawValue === 'number') {\n            // Получаем коэффициент и константу из глобального контекста\n            // Используем значения по умолчанию (1 и 0), если они не найдены\n            const koef = global.get(koefKey) ?? 1;\n            const konst = global.get(konstKey) ?? 0;\n            \n            // Применяем преобразование\n            const transformedValue = rawValue * koef + konst;\n            \n            // Сохраняем преобразованное значение в глобальную переменную\n            global.set(globalVarKey, transformedValue);\n            node.log(`[AI_SAVE] Шаг ${previousStep}, Канал ${aiChannelKey}: Сохранено global.${globalVarKey} = ${transformedValue.toFixed(3)} (Raw: ${rawValue}, Koef: ${koef}, Konst: ${konst}). Индекс UI: ${uiOutputIndex}`);\n\n            // Готовим сообщение для обновления UI (с форматированием до 2 знаков)\n            if (uiOutputIndex >= 0 && uiOutputIndex < 40) {\n                 uiUpdateMessages[uiOutputIndex] = { payload: transformedValue.toFixed(2) };\n            } else {\n                 node.warn(`[AI_SAVE] Ошибка: Неверный индекс UI ${uiOutputIndex} для global.${globalVarKey}`);\n            }\n        } else {\n            // Если сырое значение не число, сохраняем null и 'N/A' в UI\n            global.set(globalVarKey, null); \n            if (uiOutputIndex >= 0 && uiOutputIndex < 40) {\n                uiUpdateMessages[uiOutputIndex] = { payload: \"N/A\" }; \n            }\n            node.warn(`[AI_SAVE] Нет числовых данных для ${aiChannelKey} при сохранении шага ${previousStep}. Индекс UI: ${uiOutputIndex}`);\n        }\n    }\n} else {\n    // Если нет последних данных AI, выводим предупреждение и 'N/A' во все поля UI для этого шага\n    node.warn(`[AI_SAVE] Не удалось получить последние значения AI ('flow.latestAIReadings' пуст или не объект) для сохранения шага ${previousStep}`);\n     for (let i = 0; i < 8; i++) {\n         let uiOutputIndex = i * 5 + (previousStep - 1);\n         if (uiOutputIndex >= 0 && uiOutputIndex < 40) {\n             uiUpdateMessages[uiOutputIndex] = { payload: \"N/A\" }; \n         }\n     }\n}\n\n// Возвращаем массив сообщений для обновления UI\n// Каждый элемент массива соответствует одному выходу узла\nreturn uiUpdateMessages;",
        "outputs": 40,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 720,
        "wires": [
            [
                "71d55164f6d41566"
            ],
            [
                "0ffd728d71a85a32"
            ],
            [
                "cda9981ff8781132"
            ],
            [
                "ca46cea741e60101"
            ],
            [
                "dbb3a31c5fa35055"
            ],
            [
                "1357a9a21a5deb62"
            ],
            [
                "bf3fae54dd4057a2"
            ],
            [
                "291a233deea0b534"
            ],
            [
                "28513af08e7ad30b"
            ],
            [
                "bf70ee6c69740f7e"
            ],
            [
                "48709d30c5fee154"
            ],
            [
                "89246512da529202"
            ],
            [
                "f7b44dd02c69a4c4"
            ],
            [
                "5da2d2e33db01e1b"
            ],
            [
                "1d6211889ab2bd59"
            ],
            [
                "04026a46a4364d05"
            ],
            [
                "99913083ef265f70"
            ],
            [
                "a784a57fa1a18687"
            ],
            [
                "db73f5dfb7405740"
            ],
            [
                "1d17e6b901c43221"
            ],
            [
                "aa497dda464af0c6"
            ],
            [
                "21ba79ac302a4bb5"
            ],
            [
                "0bed81c5d2306e3a"
            ],
            [
                "f3626b5edbd440ee"
            ],
            [
                "f9cd794e30e0727f"
            ],
            [
                "fd6cca6d399f0393"
            ],
            [
                "7ca4464d61f5f7be"
            ],
            [
                "d3c88db840a76f35"
            ],
            [
                "497f9bf2feda9d1a"
            ],
            [
                "8c9e41c0b609066f"
            ],
            [
                "854923c76b80877f"
            ],
            [
                "019e86868f3003e4"
            ],
            [
                "c7bd6febb049e904"
            ],
            [
                "965e580404f502f0"
            ],
            [
                "fbe4f48349da3bbc"
            ],
            [
                "fcbaf33dad0b6d3c"
            ],
            [
                "a66aba0f8cadb964"
            ],
            [
                "bb6fc9a64429f1b0"
            ],
            [
                "e08e532b15f2648e"
            ],
            [
                "da29395929fdf3f7"
            ]
        ]
    },
    {
        "id": "86a9f0f1b35752cf",
        "type": "rbe",
        "z": "2a7abf2a60427cf6",
        "name": "Filter unchanged AI_0",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 1260,
        "y": 320,
        "wires": [
            [
                "90dd7bf4424a07d6"
            ]
        ]
    },
    {
        "id": "047077946b0a9c79",
        "type": "inject",
        "z": "2a7abf2a60427cf6",
        "name": "Версия: инициализация",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "version",
        "payload": "011120251115",
        "payloadType": "str",
        "x": 160,
        "y": 40,
        "wires": [
            [
                "19d5d16d68aeb7c8"
            ]
        ]
    },
    {
        "id": "19d5d16d68aeb7c8",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Сформировать строку версии",
        "func": "const VERSION_PATTERN = /^\\d{12}$/;\nconst READABLE_PATTERN = /^\\d{4}-\\d{2}-\\d{2}_\\d{4}$/;\nconst FILE_NAME_PATTERN_ISO = /^flows_[A-Za-z0-9_-]+_ver_(\\d{4}-\\d{2}-\\d{2})_(\\d{12})$/;\nconst FILE_NAME_PATTERN_SHORT = /^flows_[A-Za-z0-9_-]+_ver_(\\d{4}-\\d{2}-\\d{2})_(\\d{4})$/;\nconst FILE_NAME_PATTERN_COMPACT = /^flows_[A-Za-z0-9_-]+_ver_(\\d{12})$/;\nconst DEFAULT_VERSION = '011120251115';\n\nconst fromReadable = (value) => {\n    const [datePart, buildPart] = value.split('_');\n    const [year, month, day] = datePart.split('-');\n    return `${day}${month}${year}${buildPart.slice(-4)}`;\n};\n\nconst fromFileName = (value) => {\n    if (typeof value !== 'string' || !value.length) {\n        return null;\n    }\n    const trimmed = value.endsWith('.json') ? value.slice(0, -5) : value;\n    const isoMatch = trimmed.match(FILE_NAME_PATTERN_ISO);\n    if (isoMatch) {\n        const [, datePart, buildPart] = isoMatch;\n        const [year, month, day] = datePart.split('-');\n        return `${day}${month}${year}${buildPart.slice(-4)}`;\n    }\n    const shortMatch = trimmed.match(FILE_NAME_PATTERN_SHORT);\n    if (shortMatch) {\n        const [, datePart, buildPart] = shortMatch;\n        const [year, month, day] = datePart.split('-');\n        return `${day}${month}${year}${buildPart.slice(-4)}`;\n    }\n    const compactMatch = trimmed.match(FILE_NAME_PATTERN_COMPACT);\n    if (compactMatch) {\n        return compactMatch[1];\n    }\n    return null;\n};\n\nconst toVersionString = (value) => {\n    if (typeof value === 'string') {\n        const trimmed = value.trim();\n        if (!trimmed.length) {\n            return DEFAULT_VERSION;\n        }\n        if (VERSION_PATTERN.test(trimmed)) {\n            return trimmed;\n        }\n        if (READABLE_PATTERN.test(trimmed)) {\n            return fromReadable(trimmed);\n        }\n        const fileNameVersion = fromFileName(trimmed);\n        if (fileNameVersion) {\n            return fileNameVersion;\n        }\n    } else if (typeof value === 'number' && Number.isFinite(value)) {\n        const asString = Math.trunc(value).toString();\n        if (VERSION_PATTERN.test(asString)) {\n            return asString;\n        }\n    }\n    return DEFAULT_VERSION;\n};\n\nmsg.payload = toVersionString(msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 40,
        "wires": [
            [
                "7f6f264aa30da5eb"
            ]
        ]
    },
    {
        "id": "7f6f264aa30da5eb",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Сохранить версию в контексте",
        "func": "const VERSION_PATTERN = /^\\d{12}$/;\nconst READABLE_PATTERN = /^\\d{4}-\\d{2}-\\d{2}_\\d{4}$/;\nconst FILE_NAME_PATTERN_READABLE = /^flows_[A-Za-z0-9_-]+_ver_(\\d{4}-\\d{2}-\\d{2})_(\\d{12})$/;\nconst FILE_NAME_PATTERN_SHORT = /^flows_[A-Za-z0-9_-]+_ver_(\\d{4}-\\d{2}-\\d{2})_(\\d{4})$/;\nconst FILE_NAME_PATTERN_COMPACT = /^flows_[A-Za-z0-9_-]+_ver_(\\d{12})$/;\nconst DEFAULT_VERSION = '011120251115';\nconst PROJECT_SLUG = 'AO6224_AI6717';\n\nconst fromReadable = (value) => {\n    const [datePart, buildPart] = value.split('_');\n    const [year, month, day] = datePart.split('-');\n    return `${day}${month}${year}${buildPart.slice(-4)}`;\n};\n\nconst versionFromFileName = (value) => {\n    if (typeof value !== 'string' || !value.length) {\n        return null;\n    }\n    const candidate = value.endsWith('.json') ? value.slice(0, -5) : value;\n    if (VERSION_PATTERN.test(candidate)) {\n        return candidate;\n    }\n    if (READABLE_PATTERN.test(candidate)) {\n        return fromReadable(candidate);\n    }\n    const readableMatch = candidate.match(FILE_NAME_PATTERN_READABLE);\n    if (readableMatch) {\n        const [, datePart, buildPart] = readableMatch;\n        const [year, month, day] = datePart.split('-');\n        return `${day}${month}${year}${buildPart.slice(-4)}`;\n    }\n    const compactMatch = candidate.match(FILE_NAME_PATTERN_COMPACT);\n    if (compactMatch) {\n        return compactMatch[1];\n    }\n    return null;\n};\n\nconst toVersionString = (value) => {\n    if (typeof value === 'string') {\n        const trimmed = value.trim();\n        if (!trimmed.length) {\n            return DEFAULT_VERSION;\n        }\n        if (VERSION_PATTERN.test(trimmed)) {\n            return trimmed;\n        }\n        if (READABLE_PATTERN.test(trimmed)) {\n            return fromReadable(trimmed);\n        }\n        const fromFile = versionFromFileName(trimmed);\n        if (fromFile) {\n            return fromFile;\n        }\n    }\n    if (typeof value === 'number' && Number.isFinite(value)) {\n        const asString = Math.trunc(value).toString();\n        if (VERSION_PATTERN.test(asString)) {\n            return asString;\n        }\n    }\n    return DEFAULT_VERSION;\n};\n\nconst toReadableVersion = (value) => {\n    if (VERSION_PATTERN.test(value)) {\n        const day = value.slice(0, 2);\n        const month = value.slice(2, 4);\n        const year = value.slice(4, 8);\n        const build = value.slice(8);\n        return `${year}-${month}-${day}_${build}`;\n    }\n    if (READABLE_PATTERN.test(value)) {\n        return value;\n    }\n    const fromFile = versionFromFileName(value);\n    if (fromFile) {\n        return toReadableVersion(fromFile);\n    }\n    return '1970-01-01_0000';\n};\n\nconst normalizeStoredVersion = (value) => {\n    if (typeof value === 'number' && Number.isFinite(value)) {\n        return toVersionString(String(Math.trunc(value)));\n    }\n    if (typeof value === 'string' && value.length) {\n        if (VERSION_PATTERN.test(value)) {\n            return value;\n        }\n        if (READABLE_PATTERN.test(value)) {\n            return fromReadable(value);\n        }\n        const fromFile = versionFromFileName(value);\n        if (fromFile) {\n            return fromFile;\n        }\n    }\n    return null;\n};\n\nlet version = toVersionString(msg.payload);\n\nif (!VERSION_PATTERN.test(version)) {\n    const fallback = normalizeStoredVersion(flow.get('versionRaw'))\n        || normalizeStoredVersion(flow.get('version'))\n        || normalizeStoredVersion(global.get('currentVersion'))\n        || versionFromFileName(flow.get('flowFileName'))\n        || versionFromFileName(global.get('flowFileName'))\n        || DEFAULT_VERSION;\n    version = fallback;\n    msg.payload = version;\n}\n\nconst versionNumber = Number(version);\nconst readableVersion = toReadableVersion(version);\nconst flowFileName = (() => {\n    const datePart = `${version.slice(4, 8)}-${version.slice(2, 4)}-${version.slice(0, 2)}`;\n    return `flows_${PROJECT_SLUG}_ver_${datePart}_${version}.json`;\n})();\n\nif (Number.isFinite(versionNumber)) {\n    if (global.get('VER') !== versionNumber) {\n        global.set('VER', versionNumber);\n    }\n} else {\n    node.warn(`Невозможно преобразовать версию \"${version}\" в число. Значение VER не обновлено.`);\n}\n\nif (flow.get('versionRaw') !== version) {\n    flow.set('versionRaw', version);\n}\n\nif (flow.get('version') !== readableVersion) {\n    flow.set('version', readableVersion);\n}\n\nif (flow.get('flowFileName') !== flowFileName) {\n    flow.set('flowFileName', flowFileName);\n}\n\nif (global.get('currentVersion') !== version) {\n    global.set('currentVersion', version);\n}\n\nif (global.get('flowFileName') !== flowFileName) {\n    global.set('flowFileName', flowFileName);\n}\n\nconst uiStateMeta = global.get('uiState_meta') || {};\nlet metaChanged = false;\n\nif (uiStateMeta.version !== version) {\n    uiStateMeta.version = version;\n    metaChanged = true;\n}\n\nif (uiStateMeta.versionNumber !== versionNumber && Number.isFinite(versionNumber)) {\n    uiStateMeta.versionNumber = versionNumber;\n    metaChanged = true;\n}\n\nif (uiStateMeta.fileName !== flowFileName) {\n    uiStateMeta.fileName = flowFileName;\n    metaChanged = true;\n}\n\nif (uiStateMeta.readableVersion !== readableVersion) {\n    uiStateMeta.readableVersion = readableVersion;\n    metaChanged = true;\n}\n\nif (metaChanged) {\n    global.set('uiState_meta', uiStateMeta);\n}\n\nmsg.versionNumber = Number.isFinite(versionNumber) ? versionNumber : null;\nmsg.filename = flowFileName;\nmsg.projectVersion = version;\nmsg.readableVersion = readableVersion;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 40,
        "wires": [
            [
                "ed2710f9e53b7360",
                "785a180599210e41"
            ]
        ]
    },
    {
        "id": "ed2710f9e53b7360",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "b5ad3d26d2dec3f7",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "Version",
        "label": "Version",
        "format": "Текущая версия: {{msg.payload}}.",
        "layout": "row-left",
        "className": "",
        "style": "",
        "font": "",
        "fontSize": "",
        "color": "",
        "x": 700,
        "y": 40,
        "wires": []
    },
    {
        "id": "785a180599210e41",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Сформировать историю изменений",
        "func": "const VERSION_PATTERN = /^(\\d{2})(\\d{2})(\\d{4})(\\d{2})(\\d{2})$/;\nconst currentVersion = msg.payload;\nlet parsedDate = '';\nlet parsedTime = '';\n\nif (typeof currentVersion === 'string') {\n    const match = currentVersion.match(VERSION_PATTERN);\n    if (match) {\n        const [, day, month, year, hour, minute] = match;\n        parsedDate = `${year}-${month}-${day}`;\n        parsedTime = `${hour}:${minute}`;\n    }\n}\n\nconst formattedDate = parsedTime ? `${parsedDate} ${parsedTime}` : parsedDate || '2025-11-01';\n\nconst history = [\n    {\n        version: currentVersion,\n        date: formattedDate,\n        changes: [\n            'Обновлена команда открытия вкладок: ui_control.tab теперь принимает строку ID вместо объекта.',\n            'Синхронизировано имя файла экспорта с новой версией flows_AO6224_AI6717_ver_2025-11-01_011120251115.json.'\n        ]\n    },\n\n    {\n        version: '011120251100',\n        date: '2025-11-01 11:00',\n        changes: [\n            'Автозапуск итерации без ожидания подключения Dashboard.',\n            'Меню «Перейти к вкладке» раскрывает скрытые вкладки и активирует выбранную.',\n            'Обновлена версия проекта и имя файла экспорта на flows_AO6224_AI6717_ver_2025-11-01_011120251100.json.'\n        ]\n    },\n\n    {\n        version: '011120251000',\n        date: '2025-11-01 10:00',\n        changes: [\n            'Скрыта автозагрузка всех вторичных вкладок; добавлено меню навигации через Dashboard.',\n            'Графики pH, Redox, AO LC и ПИД загружаются по требованию через переключатели и flow-контекст.',\n            'Запуск Modbus-пулов и архиваторов перенесён до готовности UI; обновлён опрос глобальных переменных до 100 мс.',\n            'Отключена пересборка UI при деплое; обновлён формат имени файла экспорта на flows_AO6224_AI6717_ver_2025-11-01_011120251000.json.'\n        ]\n    },\n\n    {\n        version: '311020251659',\n        date: '2025-10-31 16:59',\n        changes: [\n            'Добавлены переключатели для отображения графиков \"AI Каналы 6717 (мВ, масштабированные)\" и \"График и Управление Итерацией\".',\n            'Отображение обоих графиков по умолчанию отключено.',\n            'Обновлена версия проекта и имя файла экспорта на 311020251659.'\n        ]\n    },\n    {\n        version: '311020251510',\n        date: '2025-10-31 15:10',\n        changes: [\n            'Увеличена ширина графика \"График и Управление Итерацией\" до 32 плиток для унификации с графиком AI.',\n            'Обновлена версия проекта и имя файла экспорта на 311020251510.',\n            'Актуализирован перечень изменений на главном экране.'\n        ]\n    },\n    {\n        version: '311020251448',\n        date: '2025-10-31 14:48',\n        changes: [\n            'Приведён график \"График и Управление Итерацией\" к размеру графика \"AI Каналы 6717 (мВ, масштабированные)\".',\n            'Обновлена версия проекта и имя файла экспорта на 311020251448.',\n            'Актуализирован перечень изменений на главном экране.'\n        ]\n    },\n    {\n        version: '311020251433',\n        date: '2025-10-31 14:33',\n        changes: [\n            'Добавлены на вкладку Home элементы с текущими датой, временем и днём недели.',\n            'Реализовано ежесекундное обновление отображения даты и времени.',\n            'Обновлена версия проекта и имя файла экспорта на 311020251433.',\n            'Актуализирован перечень изменений на главном экране.'\n        ]\n    },\n    {\n        version: '231020251107',\n        date: '2025-10-23',\n        changes: [\n            'Зафиксирован формат имени файла и версии DDMMYYYYHHmm (пример: 231020251107).',\n            'Главная панель Dashboard отображает строку \"Текущая версия: 231020251107.\" и синхронизрована с глобальной переменной VER.'\n        ]\n    },\n    {\n        version: '231020251001',\n        date: '2025-10-23',\n        changes: [\n            'Обновлён формат версии на DDMMYYYYHHmm и синхронизировано имя файла проекта.',\n            'Добавлена глобальная переменная VER и экспорт версии в Modbus для отображения на панели оператора.'\n        ]\n    },\n    {\n        version: '2025-10-23_1',\n        date: '2025-10-23',\n        changes: [\n            'Добавлен дашборд \"История версий\" с отображением актуальной версии и списка изменений.',\n            'Обновлён механизм сохранения версии в контекст (flow.version и global.currentVersion) с форматом YYYY-MM-DD_build.'\n        ]\n    },\n    {\n        version: '2025-10-22_1',\n        date: '2025-10-22',\n        changes: [\n            'Базовая конфигурация проекта.'\n        ]\n    }\n];\n\nmsg.history = history;\nmsg.currentVersion = currentVersion;\nconst parsedNumber = Number(currentVersion);\nif (!Number.isFinite(msg.versionNumber)) {\n    msg.versionNumber = Number.isFinite(parsedNumber) ? parsedNumber : null;\n}\nlet readableVersion = msg.readableVersion;\nif (!readableVersion) {\n    if (VERSION_PATTERN.test(currentVersion)) {\n        const [, day, month, year, hour, minute] = currentVersion.match(VERSION_PATTERN);\n        readableVersion = `${year}-${month}-${day}_${hour}${minute}`;\n    } else if (typeof currentVersion === 'string') {\n        readableVersion = currentVersion;\n    }\n    if (readableVersion) {\n        msg.readableVersion = readableVersion;\n    }\n}\nif (!msg.filename && typeof currentVersion === 'string') {\n    msg.filename = 'flows_AO6224_AI6717_ver_2025-11-01_011120251115.json';\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "71d8db66f41b53af"
            ]
        ]
    },
    {
        "id": "71d8db66f41b53af",
        "type": "ui_template",
        "z": "2a7abf2a60427cf6",
        "group": "e9abdc54dcb621b3",
        "name": "История версий",
        "order": 1,
        "width": "12",
        "height": "0",
        "format": "<div class=\"version-history\">\n  <style>\n    .version-history h3 {\n      margin: 0 0 12px;\n    }\n    .version-history p {\n      margin: 0 0 16px;\n    }\n    .version-history .version-entry {\n      margin-bottom: 18px;\n      padding-bottom: 12px;\n      border-bottom: 1px solid #ccc;\n    }\n    .version-history .version-entry:last-child {\n      border-bottom: none;\n    }\n    .version-history .version-entry h4 {\n      margin: 0 0 8px;\n    }\n    .version-history .version-entry ul {\n      margin: 0 0 0 20px;\n      padding: 0;\n    }\n  </style>\n  <h3>История версий</h3>\n  <p><strong>Текущая версия:</strong> {{msg.currentVersion}}.</p>\n  <div class=\"version-entry\" ng-repeat=\"entry in msg.history\">\n    <h4>{{entry.version}}<span ng-if=\"entry.date\"> ({{entry.date}})</span></h4>\n    <ul>\n      <li ng-repeat=\"item in entry.changes track by $index\">{{item}}</li>\n    </ul>\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "927e08aefcaa301c",
        "type": "inject",
        "z": "2a7abf2a60427cf6",
        "name": "Обновление даты/времени",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "home/datetime",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "8580e6a89eb417c3"
            ]
        ]
    },
    {
        "id": "8580e6a89eb417c3",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Форматировать дату/время для Home",
        "func": "const input = (typeof msg.payload === 'number' && Number.isFinite(msg.payload)) ? new Date(msg.payload) : new Date();\nconst now = Number.isNaN(input.getTime()) ? new Date() : input;\nconst pad = (value) => String(value).padStart(2, '0');\nconst date = `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())}`;\nconst time = `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(now.getSeconds())}`;\nconst weekdays = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\nconst weekday = weekdays[now.getDay()];\nreturn [\n    { payload: date },\n    { payload: time },\n    { payload: weekday.charAt(0).toUpperCase() + weekday.slice(1) }\n];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "1aef59b25a6cc9e6"
            ],
            [
                "030dabbcafb00433"
            ],
            [
                "be143f6a2175282d"
            ]
        ]
    },
    {
        "id": "1aef59b25a6cc9e6",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "b5ad3d26d2dec3f7",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "Home Date",
        "label": "Дата",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": "",
        "font": "",
        "fontSize": "",
        "color": "",
        "x": 700,
        "y": 80,
        "wires": []
    },
    {
        "id": "030dabbcafb00433",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "b5ad3d26d2dec3f7",
        "order": 5,
        "width": 6,
        "height": 1,
        "name": "Home Time",
        "label": "Время",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": "",
        "font": "",
        "fontSize": "",
        "color": "",
        "x": 700,
        "y": 120,
        "wires": []
    },
    {
        "id": "be143f6a2175282d",
        "type": "ui_text",
        "z": "2a7abf2a60427cf6",
        "group": "b5ad3d26d2dec3f7",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "Home Weekday",
        "label": "День недели",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": "",
        "font": "",
        "fontSize": "",
        "color": "",
        "x": 700,
        "y": 160,
        "wires": []
    },
    {
        "id": "90dd7bf4424a07d6",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Фильтр вывода графика AI",
        "func": "let enabled = flow.get('ai6717ChartEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('ai6717ChartEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 220,
        "wires": [
            [
                "a7426e94d0ab22bc"
            ]
        ]
    },
    {
        "id": "1a89621b499562ec",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Управление графиком AI",
        "func": "const enabled = msg.payload === true;\nflow.set('ai6717ChartEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 220,
        "wires": [
            [
                "a7426e94d0ab22bc"
            ]
        ]
    },
    {
        "id": "cf15ff6e90c9fc88",
        "type": "ui_switch",
        "z": "2a7abf2a60427cf6",
        "name": "Переключатель графика AI",
        "label": "Показывать график AI 6717",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "ai6717_chart_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 220,
        "wires": [
            [
                "1a89621b499562ec"
            ]
        ]
    },
    {
        "id": "2824e4e548b0111b",
        "type": "inject",
        "z": "2a7abf2a60427cf6",
        "name": "AI график: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "ai6717_chart_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "1a89621b499562ec"
            ]
        ]
    },
    {
        "id": "0471f9f0d6fb204a",
        "type": "ui_dropdown",
        "z": "2a7abf2a60427cf6",
        "name": "Навигация по вкладкам",
        "label": "Перейти к вкладке",
        "tooltip": "Открыть скрытую вкладку",
        "group": "b5ad3d26d2dec3f7",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Результаты по Шагам",
                "value": "890b934665542552",
                "type": "str"
            },
            {
                "label": "Переменные Расчета",
                "value": "1ca429ef1c54e053",
                "type": "str"
            },
            {
                "label": "Переменные 1 2 3 4 5",
                "value": "a1eb237deeed4f68",
                "type": "str"
            },
            {
                "label": "Переменные Расчета PH",
                "value": "448d421088f328d4",
                "type": "str"
            },
            {
                "label": "Redox Потенциал",
                "value": "314b7de6c01e1f5b",
                "type": "str"
            },
            {
                "label": "Redox Потенциал 2",
                "value": "a0b71270a6b25db2",
                "type": "str"
            },
            {
                "label": "Аналоговые Выходы LC",
                "value": "1d5f2aa7532ab803",
                "type": "str"
            },
            {
                "label": "Настройки ПИД",
                "value": "a00ae3d085ad4c70",
                "type": "str"
            },
            {
                "label": "История версий",
                "value": "f865e3b9a8326d9a",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "ui_navigation",
        "topicType": "str",
        "className": "",
        "x": 360,
        "y": 280,
        "wires": [
            [
                "a43df930c0fbb374"
            ]
        ]
    },
    {
        "id": "a43df930c0fbb374",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Открыть выбранную вкладку",
        "func": "const raw = msg?.payload;\nconst target = typeof raw === 'string' ? raw : (raw && typeof raw === 'object' && raw.hasOwnProperty('value') ? raw.value : null);\nif (!target) {\n    return null;\n}\nconst command = {\n    tabs: {\n        show: [target]\n    },\n    tab: target\n};\nmsg.ui_control = command;\nmsg.payload = command;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "99557c208b9f6f4c"
            ]
        ]
    },
    {
        "id": "99557c208b9f6f4c",
        "type": "ui_ui_control",
        "z": "2a7abf2a60427cf6",
        "name": "UI Control",
        "events": "all",
        "x": 920,
        "y": 160,
        "wires": [
            [
                "e271da8ebcfe0ee2"
            ]
        ]
    },
    {
        "id": "e271da8ebcfe0ee2",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "UI готов → включить тяжёлые потоки",
        "func": "const payload = msg && typeof msg === 'object' ? msg.payload || {} : {};\nconst event = payload.event || msg.event;\nif (event === 'disconnect') {\n    context.set('uiReady', false);\n    return null;\n}\nif (event === 'connect') {\n    if (!context.get('uiReady')) {\n        context.set('uiReady', true);\n        return { enable: true, topic: 'ui_ready' };\n    }\n    return null;\n}\nconst tabCandidate = payload.tab || payload.name || payload.id;\nconst isHomeTab = tabCandidate === 'Home' || tabCandidate === 'bf598e27688ff446';\nif (isHomeTab && !context.get('uiReady')) {\n    context.set('uiReady', true);\n    return { enable: true, topic: 'ui_ready' };\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 160,
        "wires": [
            [
                "35f8cce28c86843b"
            ]
        ]
    },
    {
        "id": "35f8cce28c86843b",
        "type": "link out",
        "z": "2a7abf2a60427cf6",
        "name": "link out: UI Ready",
        "mode": "link",
        "links": [
            "816b01c178bb893d",
            "94e3bd5ddc07eae0",
            "0561a972ceb6b1f6",
            "a70c99138118df07",
            "652112f83f70b1e1"
        ],
        "x": 1410,
        "y": 160,
        "wires": []
    },
    {
        "id": "f92b4206687e547b",
        "type": "ui_switch",
        "z": "2a7abf2a60427cf6",
        "name": "Переключатель графиков PH",
        "label": "Показывать графики pH",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "ph_charts_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "a505ef61255a5ebe"
            ]
        ]
    },
    {
        "id": "a505ef61255a5ebe",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Подготовить сигнал PH",
        "func": "const enabled = msg.payload === true;\nmsg.enabled = enabled;\nmsg.payload = enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "0d18cf0dddbfc3c5"
            ]
        ]
    },
    {
        "id": "0d18cf0dddbfc3c5",
        "type": "link out",
        "z": "2a7abf2a60427cf6",
        "name": "link out: PH charts toggle",
        "mode": "link",
        "links": [
            "a0ef9801b1dfadf9"
        ],
        "x": 910,
        "y": 320,
        "wires": []
    },
    {
        "id": "cb95f0146cb0899a",
        "type": "ui_switch",
        "z": "2a7abf2a60427cf6",
        "name": "Переключатель графиков Redox",
        "label": "Показывать графики Redox",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 10,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "redox_charts_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 360,
        "wires": [
            [
                "5bd0d755a9bb4c38"
            ]
        ]
    },
    {
        "id": "5bd0d755a9bb4c38",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Подготовить сигнал Redox",
        "func": "const enabled = msg.payload === true;\nmsg.enabled = enabled;\nmsg.payload = enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "d8c965ca7fb007c4"
            ]
        ]
    },
    {
        "id": "d8c965ca7fb007c4",
        "type": "link out",
        "z": "2a7abf2a60427cf6",
        "name": "link out: Redox charts toggle",
        "mode": "link",
        "links": [
            "86a139d2ab3d9c18"
        ],
        "x": 910,
        "y": 360,
        "wires": []
    },
    {
        "id": "07fb8b8b7043da3a",
        "type": "ui_switch",
        "z": "2a7abf2a60427cf6",
        "name": "Переключатель графиков Redox 2",
        "label": "Показывать графики Redox 2",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 11,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "redox2_charts_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 400,
        "wires": [
            [
                "4ad68e74e05adc1e"
            ]
        ]
    },
    {
        "id": "4ad68e74e05adc1e",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Подготовить сигнал Redox 2",
        "func": "const enabled = msg.payload === true;\nmsg.enabled = enabled;\nmsg.payload = enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 400,
        "wires": [
            [
                "1392e3b2a6d737f4"
            ]
        ]
    },
    {
        "id": "1392e3b2a6d737f4",
        "type": "link out",
        "z": "2a7abf2a60427cf6",
        "name": "link out: Redox 2 charts toggle",
        "mode": "link",
        "links": [
            "cda760583b7bdfee"
        ],
        "x": 910,
        "y": 400,
        "wires": []
    },
    {
        "id": "27282ef6ada22753",
        "type": "ui_switch",
        "z": "2a7abf2a60427cf6",
        "name": "Переключатель графиков AO LC",
        "label": "Показывать графики AO LC",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 12,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "ao_lc_charts_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 440,
        "wires": [
            [
                "9e47ba4545325c33"
            ]
        ]
    },
    {
        "id": "9e47ba4545325c33",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Подготовить сигнал AO LC",
        "func": "const enabled = msg.payload === true;\nmsg.enabled = enabled;\nmsg.payload = enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "fd6f780872fa444d"
            ]
        ]
    },
    {
        "id": "fd6f780872fa444d",
        "type": "link out",
        "z": "2a7abf2a60427cf6",
        "name": "link out: AO LC charts toggle",
        "mode": "link",
        "links": [
            "4c1c9ab8808b0bdc"
        ],
        "x": 910,
        "y": 440,
        "wires": []
    },
    {
        "id": "45a62b96f9a9a8ae",
        "type": "ui_switch",
        "z": "2a7abf2a60427cf6",
        "name": "Переключатель графиков ПИД",
        "label": "Показывать графики ПИД",
        "tooltip": "",
        "group": "b5ad3d26d2dec3f7",
        "order": 13,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "pid_charts_enabled",
        "topicType": "str",
        "style": "",
        "onvalue": true,
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": false,
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 480,
        "wires": [
            [
                "6a7b69b423cd0eed"
            ]
        ]
    },
    {
        "id": "6a7b69b423cd0eed",
        "type": "function",
        "z": "2a7abf2a60427cf6",
        "name": "Подготовить сигнал ПИД",
        "func": "const enabled = msg.payload === true;\nmsg.enabled = enabled;\nmsg.payload = enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 480,
        "wires": [
            [
                "931a8249edb87845"
            ]
        ]
    },
    {
        "id": "931a8249edb87845",
        "type": "link out",
        "z": "2a7abf2a60427cf6",
        "name": "link out: ПИД charts toggle",
        "mode": "link",
        "links": [
            "3636f60bbbb113d9"
        ],
        "x": 910,
        "y": 480,
        "wires": []
    },
    {
        "id": "fd37de6196eabb7d",
        "type": "inject",
        "z": "bbb73f6abca22b12",
        "name": "При старте потока  1.5c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1.5",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "0a5c39f6ef7a3d0b"
            ]
        ]
    },
    {
        "id": "ecbdac89e2b3ef27",
        "type": "link in",
        "z": "bbb73f6abca22b12",
        "name": "link in: trigger-read-ph",
        "links": [
            "5c926fd4e9ebd583",
            "86b9fc9de9d45503"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "0a5c39f6ef7a3d0b"
            ]
        ]
    },
    {
        "id": "0a5c39f6ef7a3d0b",
        "type": "file in",
        "z": "bbb73f6abca22b12",
        "name": "Прочитать файл переменных PH",
        "filename": "/home/root/.node-red/save/ph_calc_variables.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "478fdfe987b85d7e"
            ]
        ]
    },
    {
        "id": "447bbb141df316d2",
        "type": "catch",
        "z": "bbb73f6abca22b12",
        "name": "Перехват ошибки чтения файла",
        "scope": [
            "0a5c39f6ef7a3d0b"
        ],
        "uncaught": false,
        "x": 430,
        "y": 280,
        "wires": [
            [
                "194c1c7bfb99b088"
            ]
        ]
    },
    {
        "id": "478fdfe987b85d7e",
        "type": "json",
        "z": "bbb73f6abca22b12",
        "name": "Разобрать JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 140,
        "wires": [
            [
                "194c1c7bfb99b088"
            ]
        ]
    },
    {
        "id": "194c1c7bfb99b088",
        "type": "function",
        "z": "bbb73f6abca22b12",
        "name": "Init/Read State & Globals (PH)",
        "func": "const defaultVars = {\n    ai2t1h1: 0.000,\n    ai2t2h2: 0.000,\n    ai2t1h1koef1: 0.100,\n    ai2t2h2koef2: 0.100,\n    ai2t1h1konst1: 0.000,\n    ai2t2h2konst2: 0.000,\n    ai2t1t2h1h2: 0.000,\n    ai2t1t2h1h2koef: 0.100,\n    ai2t1t2h1h2konst: 0.000,\n    camm: 0.000,\n    ckisl: 0.000,\n    cammkisl: 0.000,\n    cammkisl_smus: null,\n    ph: 7.000,\n    phkonstamm: 0.500,\n    phkonstkisl: 0.500,\n    phneitr: 7.000,\n    phminkisl: 1.000,\n    phminamm: 1.000,\n    window_smus: 10 \n};\n\nconst savableVars = [\n    'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm',\n    'window_smus' \n];\n\nconst nonSavableVars = [\n    'ai2t1h1', 'ai2t2h2', 'ai2t1t2h1h2', 'camm', 'ckisl', 'cammkisl', 'ph', 'cammkisl_smus'\n];\n\nlet currentGlobalState = {};\nlet source = msg.topic === 'init' ? '[INIT_PH]' : '[READ_BTN_PH]';\n\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && savableVars.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    node.warn(source + \" Данные для сохраняемых переменных PH загружены из файла.\");\n    for (const key of savableVars) {\n        currentGlobalState[key] = msg.payload[key];\n    }\n    for (const key of nonSavableVars) {\n        currentGlobalState[key] = defaultVars[key];\n    }\n} else {\n    currentGlobalState = { ...defaultVars };\n    if (msg.error) {\n        node.warn(source + \" Ошибка чтения файла переменных PH: \" + msg.error.message + \". Используются значения по умолчанию для всех переменных.\");\n    } else if (msg.topic !== 'init') {\n         node.warn(source + \" Файл переменных PH не найден/поврежден/неполный. Используются значения по умолчанию для всех переменных.\");\n    } else {\n        node.log(source + \" Файл переменных PH не найден. Используются значения по умолчанию для всех переменных.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key in defaultVars) {\n    let currentVal = currentGlobalState.hasOwnProperty(key) ? currentGlobalState[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n\n    if (isNaN(numValue)) {\n        node.warn(`Invalid number format for ${key}: ${currentVal}. Using default.`);\n        currentVal = defaultVars[key];\n        currentGlobalState[key] = currentVal;\n    } else {\n         currentVal = numValue;\n    }\n\n    \n    if (key === 'ph' || key === 'phneitr') {\n        if (currentVal < 0) currentVal = 0;\n        if (currentVal > 14) currentVal = 14;\n    } else if (key === 'window_smus') {\n        if (currentVal < 1) currentVal = 1;\n        if (currentVal > 1000) currentVal = 1000;\n        currentVal = Math.round(currentVal); \n    } else {\n        \n        if (currentVal < -10000) currentVal = -10000; \n        if (currentVal > 10000) currentVal = 10000;\n    }\n    currentGlobalState[key] = currentVal;\n\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\n\nglobal.set('cammkisl_history', []);\n\nglobal.set('savedState_ph', { ...currentGlobalState }); \nglobal.set('uiState_ph', { ...currentGlobalState });\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные PH установлены/обновлены: \" + JSON.stringify(currentGlobalState));\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные PH уже были установлены.\");\n}\n\nreturn { payload: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            [
                "c7a0d2aab0c3a2c2"
            ]
        ]
    },
    {
        "id": "c7a0d2aab0c3a2c2",
        "type": "link out",
        "z": "bbb73f6abca22b12",
        "name": "link out: trigger-ph-ui-update",
        "mode": "link",
        "links": [
            "28e53b9cbb68405c"
        ],
        "x": 1050,
        "y": 140,
        "wires": []
    },
    {
        "id": "9668ac078fb75df3",
        "type": "link in",
        "z": "a2ee9fb80f70c813",
        "name": "link in: trigger-save-ph",
        "links": [
            "7a15d325ab1bf8e5",
            "1ee00c0cfeadb19b"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "2f79ea7fae090266"
            ]
        ]
    },
    {
        "id": "2f79ea7fae090266",
        "type": "function",
        "z": "a2ee9fb80f70c813",
        "name": "Apply Globals, Save State & File (PH)",
        "func": "const uiState = global.get('uiState_ph') || {};\nlet savedState = global.get('savedState_ph') || {};\n\nlet globalsChanged = false;\n\n\nconst savableVars = [\n    'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm',\n    'window_smus' \n];\n\nconst stateToSave = {};\n\n\nfor (const key of savableVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : null;\n    \n    const numValue = Number(valueToSet);\n    if (valueToSet === null || isNaN(numValue)){\n         node.warn(`Attempted to set global for ${key} with invalid value: ${valueToSet}. Using last saved value or default.`);\n         \n         const defaultValue = global.get('savedState_ph') ? global.get('savedState_ph')[key] : undefined; \n         valueToSet = defaultValue !== undefined ? defaultValue : 0; \n    } else {\n         valueToSet = numValue;\n        \n        if (key === 'phneitr') {\n            if (valueToSet < 0) valueToSet = 0;\n            if (valueToSet > 14) valueToSet = 14;\n        } else if (key === 'window_smus') { \n            if (valueToSet < 1) valueToSet = 1;\n            if (valueToSet > 1000) valueToSet = 1000;\n            valueToSet = Math.round(valueToSet);\n        } else {\n            if (valueToSet < -1000) valueToSet = -1000;\n            if (valueToSet > 1000) valueToSet = 1000;\n        }\n    }\n    \n    \n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChanged = true;\n    }\n    \n    \n    stateToSave[key] = valueToSet;\n    \n    \n    uiState[key] = valueToSet;\n}\n\n\nlet fullSavedState = global.get('savedState_ph') || {};\nfor(const key of savableVars) {\n    fullSavedState[key] = uiState[key];\n}\n\n\nconst nonSavableVars = [\n    'ai2t1h1', 'ai2t2h2', 'ai2t1t2h1h2', 'camm', 'ckisl', 'cammkisl', 'ph', 'cammkisl_smus'\n];\nfor(const key of nonSavableVars) {\n    fullSavedState[key] = global.get(key);\n}\n\nglobal.set('savedState_ph', fullSavedState);\n\n\nglobal.set('uiState_ph', { ...uiState, ...fullSavedState }); \n\nif (globalsChanged) {\n    node.log(\"[WRITE_BTN_PH] Сохраняемые глобальные переменные PH обновлены из UI.\");\n} else {\n    node.log(\"[WRITE_BTN_PH] Сохраняемые глобальные переменные PH не требовали обновления.\");\n}\nnode.log(\"[WRITE_BTN_PH] global.savedState_ph и global.uiState_ph обновлены.\");\n\n\nconst filePayload = { payload: stateToSave }; \n\n\nconst statusMessage = { payload: \"<font color='green'>Все изменения сохранены</font>\" };\n\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "3ff34b7969c5cc79"
            ],
            [
                "d34b5d371125a1bc"
            ]
        ]
    },
    {
        "id": "3ff34b7969c5cc79",
        "type": "json",
        "z": "a2ee9fb80f70c813",
        "name": "Объект в JSON",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "1c1d108a34a7b5bb"
            ]
        ]
    },
    {
        "id": "1c1d108a34a7b5bb",
        "type": "file",
        "z": "a2ee9fb80f70c813",
        "name": "Сохранить файл переменных PH",
        "filename": "/home/root/.node-red/save/ph_calc_variables.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "68b12f1a71ffb3ea"
            ]
        ]
    },
    {
        "id": "68b12f1a71ffb3ea",
        "type": "ui_toast",
        "z": "a2ee9fb80f70c813",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение PH",
        "name": "Уведомление о сохранении",
        "x": 460,
        "y": 340,
        "wires": []
    },
    {
        "id": "d34b5d371125a1bc",
        "type": "link out",
        "z": "a2ee9fb80f70c813",
        "name": "link out: update-ph-status-text",
        "mode": "link",
        "links": [
            "02f4744b5e34208f"
        ],
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "28e53b9cbb68405c",
        "type": "link in",
        "z": "94ff508d12ea2f6d",
        "name": "link in: trigger-ph-ui-update",
        "links": [
            "c7a0d2aab0c3a2c2",
            "0f8591dbfb63d224"
        ],
        "x": 115,
        "y": 400,
        "wires": [
            [
                "dd09105f2a996984"
            ]
        ]
    },
    {
        "id": "dd09105f2a996984",
        "type": "function",
        "z": "94ff508d12ea2f6d",
        "name": "Update UI Elements (PH)",
        "func": "const uiState = global.get('uiState_ph') || {};\nconst savedState = global.get('savedState_ph') || {};\nconst uiMessages = [];\n\n\nconst allVars = [\n    'ai2t1h1', 'ai2t2h2', 'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2', 'ai2t1t2h1h2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'camm', 'ckisl', 'cammkisl', 'cammkisl_smus', \n    'ph',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm',\n    'window_smus' \n];\n\n\nconst savableVars = [\n    'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm',\n    'window_smus'\n];\n\n\nfor (const key of allVars) {\n    const value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : 0;\n    \n    let formattedValue = (typeof value === 'number') ? value.toFixed(3) : 'N/A'; \n    \n    // Corrected formatting for integer values\n    if (['phneitr', 'window_smus'].includes(key) && Number.isInteger(value)) {\n         formattedValue = value.toString();\n    }\n    // Keep 3 decimal places for these specific savable vars\n    if (['phminkisl', 'phminamm', 'phkonstamm', 'phkonstkisl', 'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2', 'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst'].includes(key)){\n         formattedValue = (typeof value === 'number') ? value.toFixed(3) : 'N/A';\n    }    \n    if (key === 'ph') {\n        formattedValue = (typeof value === 'number') ? value.toFixed(3) : 'N/A';\n    }\n    uiMessages.push({ payload: formattedValue, topic: key });\n}\n\n\nlet hasUnsavedChanges = false;\n\nfor (const key of savableVars) {\n    \n    const savedNum = Number(savedState[key]);\n    const uiNum = Number(uiState[key]);\n    \n    // Use toFixed to compare values consistently with how they might be entered/displayed\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(3) : null;\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(3) : null;\n\n    if (savedStr !== uiStr) { \n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\nuiMessages.push({ payload: statusMessage });\n\n\nreturn uiMessages;",
        "outputs": 21,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "46030d2d65311cdd"
            ],
            [
                "89fa92a5c6850044"
            ],
            [
                "39459e5b7f177cee"
            ],
            [
                "96368eddd71288d1"
            ],
            [
                "8ee30234da3e9b0f"
            ],
            [
                "2f02df5912ac5b19"
            ],
            [
                "69154dcd7b060a8a"
            ],
            [
                "8d5220c7a8ca6f1a"
            ],
            [
                "9edfa6d71299998e"
            ],
            [
                "943001427cab5c1b"
            ],
            [
                "17be085f91d85d7e"
            ],
            [
                "f7b4e159563386a8"
            ],
            [
                "ade40b0e332de1d0"
            ],
            [
                "b7eab93c0648c5d4"
            ],
            [
                "72c440170f39618a"
            ],
            [
                "0fabdc245e4862c1"
            ],
            [
                "1bdd713015d2b321"
            ],
            [
                "002a3850410ed457"
            ],
            [
                "1560b264df710b11"
            ],
            [
                "08ab104c83cd7058"
            ],
            [
                "b180e8a73a7f46b2"
            ]
        ]
    },
    {
        "id": "bfd52db2c4c014ea",
        "type": "function",
        "z": "94ff508d12ea2f6d",
        "name": "Handle UI Input & Update Status (PH)",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\n\nlet uiState = global.get('uiState_ph') || {};\nconst savedState = global.get('savedState_ph') || {};\n\n// Все редактируемые в UI и сохраняемые переменные для PH\nconst savableVars = [\n    'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm',\n    'window_smus'\n];\n\n// Переменные, не имеющие прямого отношения к истории, но которые тоже можно обновлять глобально сразу\nconst otherSavableVars = [\n    'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2',\n    'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst',\n    'phkonstamm', 'phkonstkisl', 'phneitr', 'phminkisl', 'phminamm'\n];\n\n\nif (savableVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    let clampedValue = newValue;\n\n    // Применение ограничений и специфической логики\n    if (varName === 'window_smus') {\n        if (clampedValue < 1) clampedValue = 1;\n        if (clampedValue > 1000) clampedValue = 1000; // Примерный максимум\n        clampedValue = Math.round(clampedValue);\n\n        // >>> Немедленное обновление глобальной переменной и сброс истории концентраций <<<\n        if (global.get('window_smus') !== clampedValue) {\n            global.set('window_smus', clampedValue);\n            global.set('cammkisl_history', []); // <<< СБРОС ИСТОРИИ ДЛЯ КОНЦЕНТРАЦИЙ\n            node.log(`[UI_PH_INPUT] Global 'window_smus' обновлен на: ${clampedValue}. История cammkisl сброшена.`);\n        }\n    } else if (varName === 'phneitr') {\n        if (clampedValue < 0) clampedValue = 0;\n        if (clampedValue > 14) clampedValue = 14;\n        // Немедленное обновление\n        if (global.get(varName) !== clampedValue) {\n            global.set(varName, clampedValue);\n            node.log(`[UI_PH_INPUT] Global '${varName}' обновлен на: ${clampedValue.toFixed(3)}`);\n        }\n    } else if (otherSavableVars.includes(varName)) {\n        // Общие ограничения для остальных числовых параметров PH\n        if (clampedValue < -10000) clampedValue = -10000; // Примерный диапазон\n        if (clampedValue > 10000) clampedValue = 10000;\n        // Немедленное обновление\n        if (global.get(varName) !== clampedValue) {\n            global.set(varName, clampedValue);\n            node.log(`[UI_PH_INPUT] Global '${varName}' обновлен на: ${clampedValue.toFixed(3)}`);\n        }\n    }\n\n    uiState[varName] = clampedValue; // Обновляем значение в uiState\n    global.set('uiState_ph', uiState);\n\n} else {\n    node.warn(\"[UI_PH_INPUT] Получено некорректное сообщение от UI: \" + JSON.stringify(msg));\n    return null;\n}\n\n// Проверка несохраненных изменений для статуса\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    const savedValRaw = savedState.hasOwnProperty(key) ? savedState[key] : null;\n    const uiValRaw = uiState.hasOwnProperty(key) ? uiState[key] : null;\n\n    const savedNum = Number(savedValRaw);\n    const uiNum = Number(uiValRaw);\n\n    let precision = (key === 'window_smus' || key === 'phneitr') ? 0 : 3; // Целые для window, phneitr\n    if (['phminkisl', 'phminamm', 'phkonstamm', 'phkonstkisl', 'ai2t1h1koef1', 'ai2t2h2koef2', 'ai2t1h1konst1', 'ai2t2h2konst2', 'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst'].includes(key)) {\n        precision = 3;\n    }\n\n\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(precision) : String(savedValRaw);\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(precision) : String(uiValRaw);\n\n    if (savedStr !== uiStr) {\n        hasUnsavedChanges = true;\n        node.log(`[UI_PH_INPUT] Unsaved change for ${key}: saved (${savedStr}), ui (${uiStr})`);\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\n\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 380,
        "wires": [
            [
                "b180e8a73a7f46b2"
            ]
        ]
    },
    {
        "id": "02f4744b5e34208f",
        "type": "link in",
        "z": "94ff508d12ea2f6d",
        "name": "link in: update-ph-status-text",
        "links": [
            "d34b5d371125a1bc"
        ],
        "x": 875,
        "y": 500,
        "wires": [
            [
                "b180e8a73a7f46b2"
            ]
        ]
    },
    {
        "id": "9ddd6050040e5c2b",
        "type": "ui_button",
        "z": "94ff508d12ea2f6d",
        "name": "Чтение PH из файла",
        "group": "a691580503936b70",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение",
        "tooltip": "Прочитать значения переменных PH из файла, обновить поля и ГЛОБАЛЬНЫЕ переменные",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-download",
        "payload": "read_request",
        "payloadType": "str",
        "topic": "read_request",
        "topicType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "5c926fd4e9ebd583"
            ]
        ]
    },
    {
        "id": "5c926fd4e9ebd583",
        "type": "link out",
        "z": "94ff508d12ea2f6d",
        "name": "link out: trigger-read-ph",
        "mode": "link",
        "links": [
            "ecbdac89e2b3ef27"
        ],
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "e73e9d4afefa84fd",
        "type": "ui_button",
        "z": "94ff508d12ea2f6d",
        "name": "Запись PH в файл",
        "group": "a691580503936b70",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись",
        "tooltip": "Применить изменения к ГЛОБАЛЬНЫМ переменным PH и сохранить текущие значения в файл",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-upload",
        "payload": "write_request",
        "payloadType": "str",
        "topic": "write_request",
        "topicType": "str",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "7a15d325ab1bf8e5"
            ]
        ]
    },
    {
        "id": "7a15d325ab1bf8e5",
        "type": "link out",
        "z": "94ff508d12ea2f6d",
        "name": "link out: trigger-save-ph",
        "mode": "link",
        "links": [
            "9668ac078fb75df3"
        ],
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "46030d2d65311cdd",
        "type": "ui_text",
        "z": "94ff508d12ea2f6d",
        "group": "7543e63693320913",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "ai2t1h1_display",
        "label": "ai2t1h1:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 80,
        "wires": []
    },
    {
        "id": "89fa92a5c6850044",
        "type": "ui_text",
        "z": "94ff508d12ea2f6d",
        "group": "7543e63693320913",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "ai2t2h2_display",
        "label": "ai2t2h2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 120,
        "wires": []
    },
    {
        "id": "39459e5b7f177cee",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "ai2t1h1koef1",
        "label": "ai2t1h1koef1:",
        "group": "7543e63693320913",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t1h1koef1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 160,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "96368eddd71288d1",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "ai2t2h2koef2",
        "label": "ai2t2h2koef2:",
        "group": "7543e63693320913",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t2h2koef2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 200,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "8ee30234da3e9b0f",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "ai2t1h1konst1",
        "label": "ai2t1h1konst1:",
        "group": "7543e63693320913",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t1h1konst1",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 240,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "2f02df5912ac5b19",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "ai2t2h2konst2",
        "label": "ai2t2h2konst2:",
        "group": "7543e63693320913",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t2h2konst2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 280,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "69154dcd7b060a8a",
        "type": "ui_text",
        "z": "94ff508d12ea2f6d",
        "group": "7543e63693320913",
        "order": 7,
        "width": 6,
        "height": 1,
        "name": "ai2t1t2h1h2_display",
        "label": "ai2t1t2h1h2:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 320,
        "wires": []
    },
    {
        "id": "8d5220c7a8ca6f1a",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "ai2t1t2h1h2koef",
        "label": "ai2t1t2h1h2koef:",
        "group": "7543e63693320913",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t1t2h1h2koef",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "9edfa6d71299998e",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "ai2t1t2h1h2konst",
        "label": "ai2t1t2h1h2konst:",
        "group": "7543e63693320913",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai2t1t2h1h2konst",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 400,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "943001427cab5c1b",
        "type": "ui_text",
        "z": "94ff508d12ea2f6d",
        "group": "0d9a46cbdb160a3c",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "camm_display",
        "label": "camm:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 440,
        "wires": []
    },
    {
        "id": "17be085f91d85d7e",
        "type": "ui_text",
        "z": "94ff508d12ea2f6d",
        "group": "0d9a46cbdb160a3c",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "ckisl_display",
        "label": "ckisl:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 480,
        "wires": []
    },
    {
        "id": "f7b4e159563386a8",
        "type": "ui_text",
        "z": "94ff508d12ea2f6d",
        "group": "0d9a46cbdb160a3c",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "cammkisl_display",
        "label": "cammkisl:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 520,
        "wires": []
    },
    {
        "id": "ade40b0e332de1d0",
        "type": "ui_text",
        "z": "94ff508d12ea2f6d",
        "group": "0d9a46cbdb160a3c",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "cammkisl_smus_display",
        "label": "cammkisl (сглаж.) (cammkisl_smus):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 560,
        "wires": []
    },
    {
        "id": "08ab104c83cd7058",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "window_smus",
        "label": "Окно сглаж. (window_smus):",
        "group": "0d9a46cbdb160a3c",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "window_smus",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 1,
        "max": 1000,
        "step": 1,
        "x": 610,
        "y": 600,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "b7eab93c0648c5d4",
        "type": "ui_text",
        "z": "94ff508d12ea2f6d",
        "group": "0d9a46cbdb160a3c",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "ph_display",
        "label": "ph:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 640,
        "wires": []
    },
    {
        "id": "72c440170f39618a",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "phkonstamm",
        "label": "phkonstamm:",
        "group": "ed8475d4594aa685",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "phkonstamm",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 680,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "0fabdc245e4862c1",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "phkonstkisl",
        "label": "phkonstkisl:",
        "group": "ed8475d4594aa685",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "phkonstkisl",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 720,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "1bdd713015d2b321",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "phneitr",
        "label": "phneitr:",
        "group": "ed8475d4594aa685",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "phneitr",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": 14,
        "step": 0.001,
        "x": 610,
        "y": 760,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "002a3850410ed457",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "phminkisl",
        "label": "phminkisl:",
        "group": "ed8475d4594aa685",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "phminkisl",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 800,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "1560b264df710b11",
        "type": "ui_numeric",
        "z": "94ff508d12ea2f6d",
        "name": "phminamm",
        "label": "phminamm:",
        "group": "ed8475d4594aa685",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "phminamm",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -1000,
        "max": 1000,
        "step": 0.001,
        "x": 610,
        "y": 840,
        "wires": [
            [
                "bfd52db2c4c014ea"
            ]
        ]
    },
    {
        "id": "b180e8a73a7f46b2",
        "type": "ui_text",
        "z": "94ff508d12ea2f6d",
        "group": "a691580503936b70",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус сохранения PH",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1110,
        "y": 450,
        "wires": []
    },
    {
        "id": "6bb7b4ce3b869591",
        "type": "ui_chart",
        "z": "94ff508d12ea2f6d",
        "name": "График PH и Концентраций",
        "group": "82af0032683719ae",
        "order": 1,
        "width": "12",
        "height": "8",
        "label": "Динамика PH / Концентрации",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#d62728",
            "#9467bd"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "x": 390,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "7ca3893bc391e486",
        "type": "ui_chart",
        "z": "94ff508d12ea2f6d",
        "name": "График PH (0-10)",
        "group": "82af0032683719ae",
        "order": 2,
        "width": "12",
        "height": "8",
        "label": "PH (Шкала 0-10)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "0",
        "ymax": "10",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 390,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "cdc7b9ea04451faf",
        "type": "ui_chart",
        "z": "94ff508d12ea2f6d",
        "name": "График Входов (ai2h1, ai2h2)",
        "group": "82af0032683719ae",
        "order": 3,
        "width": "12",
        "height": "8",
        "label": "Входы ai2t1h1 / ai2t2h2",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#aec7e8",
            "#ffbb78"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "x": 390,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "4a35af7f2f42d21f",
        "type": "link in",
        "z": "94ff508d12ea2f6d",
        "name": "link in: chart ph",
        "links": [
            "5d08a75384af96b0"
        ],
        "x": 195,
        "y": 560,
        "wires": [
            [
                "49582f4025a86adb"
            ]
        ]
    },
    {
        "id": "ca55d6057d929a5a",
        "type": "link in",
        "z": "94ff508d12ea2f6d",
        "name": "link in: chart camm",
        "links": [
            "0c9b8cb6baa73377"
        ],
        "x": 195,
        "y": 600,
        "wires": [
            [
                "3e7172fd0ecf0d58"
            ]
        ]
    },
    {
        "id": "c68f44694c440d33",
        "type": "link in",
        "z": "94ff508d12ea2f6d",
        "name": "link in: chart ckisl",
        "links": [
            "607f9e8adc2738a8"
        ],
        "x": 195,
        "y": 640,
        "wires": [
            [
                "97dae0185ffc7929"
            ]
        ]
    },
    {
        "id": "c75775070ea253ba",
        "type": "link in",
        "z": "94ff508d12ea2f6d",
        "name": "link in: chart cammkisl",
        "links": [
            "491865dc349242e7"
        ],
        "x": 195,
        "y": 680,
        "wires": [
            [
                "e1c821f68a680d51"
            ]
        ]
    },
    {
        "id": "52508a8ba20c08c2",
        "type": "link in",
        "z": "94ff508d12ea2f6d",
        "name": "link in: chart cammkisl_smus",
        "links": [
            "c1e8b181384d820b"
        ],
        "x": 195,
        "y": 720,
        "wires": [
            [
                "aff8141378c1237b"
            ]
        ]
    },
    {
        "id": "a671b4d05ee4cfb4",
        "type": "link in",
        "z": "94ff508d12ea2f6d",
        "name": "link in: chart ai2t1h1",
        "links": [
            "8d8c6977f3ef5e4c"
        ],
        "x": 195,
        "y": 760,
        "wires": [
            [
                "911084ced0c3eded"
            ]
        ]
    },
    {
        "id": "fe97ddc5a254f9d6",
        "type": "link in",
        "z": "94ff508d12ea2f6d",
        "name": "link in: chart ai2t2h2",
        "links": [
            "40b29c05d04b785a"
        ],
        "x": 195,
        "y": 800,
        "wires": [
            [
                "cf7db2a1a2034b88"
            ]
        ]
    },
    {
        "id": "850c3475ea2d5297",
        "type": "inject",
        "z": "94ff508d12ea2f6d",
        "d": true,
        "name": "При старте потока 12с",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "12",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "9ddd6050040e5c2b"
            ]
        ]
    },
    {
        "id": "49582f4025a86adb",
        "type": "rbe",
        "z": "94ff508d12ea2f6d",
        "name": "Filter unchanged ph",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 560,
        "wires": [
            [
                "2bb014c67deddb40",
                "32dab58472346343"
            ]
        ]
    },
    {
        "id": "3e7172fd0ecf0d58",
        "type": "rbe",
        "z": "94ff508d12ea2f6d",
        "name": "Filter unchanged camm",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 600,
        "wires": [
            [
                "2bb014c67deddb40"
            ]
        ]
    },
    {
        "id": "97dae0185ffc7929",
        "type": "rbe",
        "z": "94ff508d12ea2f6d",
        "name": "Filter unchanged ckisl",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 640,
        "wires": [
            [
                "2bb014c67deddb40"
            ]
        ]
    },
    {
        "id": "e1c821f68a680d51",
        "type": "rbe",
        "z": "94ff508d12ea2f6d",
        "name": "Filter unchanged cammkisl",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 680,
        "wires": [
            [
                "2bb014c67deddb40"
            ]
        ]
    },
    {
        "id": "aff8141378c1237b",
        "type": "rbe",
        "z": "94ff508d12ea2f6d",
        "name": "Filter unchanged cammkisl_smus",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 720,
        "wires": [
            [
                "2bb014c67deddb40"
            ]
        ]
    },
    {
        "id": "911084ced0c3eded",
        "type": "rbe",
        "z": "94ff508d12ea2f6d",
        "name": "Filter unchanged ai2t1h1",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 760,
        "wires": [
            [
                "1144be75870e7b0b"
            ]
        ]
    },
    {
        "id": "cf7db2a1a2034b88",
        "type": "rbe",
        "z": "94ff508d12ea2f6d",
        "name": "Filter unchanged ai2t2h2",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 800,
        "wires": [
            [
                "1144be75870e7b0b"
            ]
        ]
    },
    {
        "id": "a0ef9801b1dfadf9",
        "type": "link in",
        "z": "94ff508d12ea2f6d",
        "name": "link in: PH charts toggle",
        "links": [
            "0d18cf0dddbfc3c5"
        ],
        "x": 120,
        "y": 40,
        "wires": [
            [
                "8e822932a77c12bc"
            ]
        ]
    },
    {
        "id": "8e822932a77c12bc",
        "type": "function",
        "z": "94ff508d12ea2f6d",
        "name": "Управление графиками PH",
        "func": "const enabled = msg.payload === true || msg.enabled === true;\nflow.set('phChartsEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "6bb7b4ce3b869591",
                "7ca3893bc391e486",
                "cdc7b9ea04451faf"
            ]
        ]
    },
    {
        "id": "8d8d81ca5c1fef2e",
        "type": "inject",
        "z": "94ff508d12ea2f6d",
        "name": "PH графики: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "ph_charts_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "8e822932a77c12bc"
            ]
        ]
    },
    {
        "id": "2bb014c67deddb40",
        "type": "function",
        "z": "94ff508d12ea2f6d",
        "name": "Фильтр графика PH",
        "func": "let enabled = flow.get('phChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('phChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 600,
        "wires": [
            [
                "6bb7b4ce3b869591"
            ]
        ]
    },
    {
        "id": "32dab58472346343",
        "type": "function",
        "z": "94ff508d12ea2f6d",
        "name": "Фильтр графика PH",
        "func": "let enabled = flow.get('phChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('phChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 660,
        "wires": [
            [
                "7ca3893bc391e486"
            ]
        ]
    },
    {
        "id": "1144be75870e7b0b",
        "type": "function",
        "z": "94ff508d12ea2f6d",
        "name": "Фильтр графика PH",
        "func": "let enabled = flow.get('phChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('phChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 720,
        "wires": [
            [
                "cdc7b9ea04451faf"
            ]
        ]
    },
    {
        "id": "fea937eca933f994",
        "type": "inject",
        "z": "c7ddd775817ac60f",
        "name": "Каждую секунду",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "calculate_ph",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "b14480bcc2aecc10"
            ]
        ]
    },
    {
        "id": "b7387780cda31592",
        "type": "function",
        "z": "c7ddd775817ac60f",
        "name": "Расчет camm/ckisl/ai2t1t2h1h2/ph + Входы",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\n// --- БЛОК 1: Получение данных (без изменений) ---\nconst ai2h1 = Number(g(\"ai2h1\") || 0);\nconst ai2h2 = Number(g(\"ai2h2\") || 0);\ns(\"ai2t1h1\", ai2h1);\ns(\"ai2t2h2\", ai2h2);\n\nconst koef1 = Number(g(\"ai2t1h1koef1\") || 0);\nconst konst1 = Number(g(\"ai2t1h1konst1\") || 0);\nconst koef2 = Number(g(\"ai2t2h2koef2\") || 0);\nconst konst2 = Number(g(\"ai2t2h2konst2\") || 0);\nconst koef_h1h2 = Number(g(\"ai2t1t2h1h2koef\") || 0);\nconst konst_h1h2 = Number(g(\"ai2t1t2h1h2konst\") || 0);\nconst phminamm = Number(g(\"phminamm\") || 0);\nconst phminkisl = Number(g(\"phminkisl\") || 0);\nconst phkonstamm = Number(g(\"phkonstamm\") || 0);\nconst phkonstkisl = Number(g(\"phkonstkisl\") || 0);\nconst phneitr = Number(g(\"phneitr\") || 7);\n\n// --- БЛОК 2: ИЗМЕНЕННАЯ ЛОГИКА ---\n// Получаем сглаженное значение. Теперь оно может быть null.\nconst cammkisl_smus_val = g('cammkisl_smus');\n\n// Расчитываем НЕсглаженное значение cammkisl в любом случае\nlet ai2t1t2h1h2_calc = (ai2h1 * koef1 + konst1) + (ai2h2 * koef2 + konst2);\nlet cammkisl_calc = ai2t1t2h1h2_calc * koef_h1h2 + konst_h1h2;\n\nlet new_camm = 0;\nlet new_ckisl = 0;\nlet new_ph = phneitr; // По умолчанию pH нейтральный\n\n// **КЛЮЧЕВАЯ ПРОВЕРКА!** Если сглаженное значение еще не рассчитано (равно null)\nif (cammkisl_smus_val === null) {\n    node.warn(\"Расчет PH пропущен, т.к. сглаженное значение cammkisl_smus еще не готово (null).\");\n    // Оставляем new_camm, new_ckisl нулями, а new_ph - нейтральным.\n} else {\n    // Если cammkisl_smus_val - число, выполняем расчеты как и раньше.\n    if (cammkisl_smus_val > 0) {\n        new_camm = cammkisl_smus_val;\n        new_ckisl = 0;\n    } else if (cammkisl_smus_val < 0) {\n        new_ckisl = Math.abs(cammkisl_smus_val);\n        new_camm = 0;\n    }\n\n    if (new_camm > phminamm) {\n        if (new_camm > 0) {\n            try {\n                new_ph = Math.log10(new_camm / 100) + phkonstamm;\n            } catch (e) {\n                node.error(\"Error calculating log10 for camm: \" + e.message);\n                new_ph = phneitr;\n            }\n        } else {\n            new_ph = phneitr;\n        }\n    } else if (new_ckisl > phminkisl) {\n        if (new_ckisl > 0) {\n            try {\n                new_ph = -Math.log10(new_ckisl / 10) + phkonstkisl;\n            } catch (e) {\n                node.error(\"Error calculating log10 for ckisl: \" + e.message);\n                new_ph = phneitr;\n            }\n        } else {\n            new_ph = phneitr;\n        }\n    }\n}\n\n// Ограничиваем PH\nif (new_ph < 0) new_ph = 0;\nif (new_ph > 14) new_ph = 14;\n\n// --- БЛОК 3: Обновление глобальных переменных и UI (без изменений) ---\ns(\"ai2t1t2h1h2\", ai2t1t2h1h2_calc);\ns(\"cammkisl\", cammkisl_calc);\ns(\"camm\", new_camm);\ns(\"ckisl\", new_ckisl);\ns(\"ph\", new_ph);\n\nlet uiState = g('uiState_ph') || {};\nuiState['ai2t1h1'] = ai2h1;\nuiState['ai2t2h2'] = ai2h2;\nuiState['ai2t1t2h1h2'] = ai2t1t2h1h2_calc;\nuiState['cammkisl'] = cammkisl_calc;\nuiState['camm'] = new_camm;\nuiState['ckisl'] = new_ckisl;\nuiState['ph'] = new_ph;\nuiState['cammkisl_smus'] = cammkisl_smus_val;\ns('uiState_ph', uiState);\n\nconst msg_ph = { topic: \"ph\", payload: new_ph };\nconst msg_camm = { topic: \"camm\", payload: new_camm };\nconst msg_ckisl = { topic: \"ckisl\", payload: new_ckisl };\nconst msg_cammkisl = { topic: \"cammkisl\", payload: cammkisl_calc };\nconst msg_ai2t1h1 = { topic: \"ai2t1h1\", payload: ai2h1 };\nconst msg_ai2t2h2 = { topic: \"ai2t2h2\", payload: ai2h2 };\nconst msg_trigger_ui_update = { payload: true };\n\nreturn [msg_trigger_ui_update, msg_ph, msg_camm, msg_ckisl, msg_cammkisl, msg_ai2t1h1, msg_ai2t2h2];",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "0f8591dbfb63d224"
            ],
            [
                "5d08a75384af96b0"
            ],
            [
                "0c9b8cb6baa73377"
            ],
            [
                "607f9e8adc2738a8"
            ],
            [
                "491865dc349242e7"
            ],
            [
                "8d8c6977f3ef5e4c"
            ],
            [
                "40b29c05d04b785a"
            ]
        ]
    },
    {
        "id": "0f8591dbfb63d224",
        "type": "link out",
        "z": "c7ddd775817ac60f",
        "name": "link out: trigger-ph-ui-update",
        "mode": "link",
        "links": [
            "28e53b9cbb68405c"
        ],
        "x": 630,
        "y": 40,
        "wires": []
    },
    {
        "id": "5d08a75384af96b0",
        "type": "link out",
        "z": "c7ddd775817ac60f",
        "name": "link out: chart ph",
        "mode": "link",
        "links": [
            "4a35af7f2f42d21f"
        ],
        "x": 630,
        "y": 80,
        "wires": []
    },
    {
        "id": "0c9b8cb6baa73377",
        "type": "link out",
        "z": "c7ddd775817ac60f",
        "name": "link out: chart camm",
        "mode": "link",
        "links": [
            "ca55d6057d929a5a"
        ],
        "x": 630,
        "y": 120,
        "wires": []
    },
    {
        "id": "607f9e8adc2738a8",
        "type": "link out",
        "z": "c7ddd775817ac60f",
        "name": "link out: chart ckisl",
        "mode": "link",
        "links": [
            "c68f44694c440d33"
        ],
        "x": 630,
        "y": 160,
        "wires": []
    },
    {
        "id": "491865dc349242e7",
        "type": "link out",
        "z": "c7ddd775817ac60f",
        "name": "link out: chart cammkisl",
        "mode": "link",
        "links": [
            "c75775070ea253ba"
        ],
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "8d8c6977f3ef5e4c",
        "type": "link out",
        "z": "c7ddd775817ac60f",
        "name": "link out: chart ai2t1h1",
        "mode": "link",
        "links": [
            "a671b4d05ee4cfb4"
        ],
        "x": 630,
        "y": 240,
        "wires": []
    },
    {
        "id": "40b29c05d04b785a",
        "type": "link out",
        "z": "c7ddd775817ac60f",
        "name": "link out: chart ai2t2h2",
        "mode": "link",
        "links": [
            "fe97ddc5a254f9d6"
        ],
        "x": 630,
        "y": 280,
        "wires": []
    },
    {
        "id": "2615b3dc67948e53",
        "type": "link in",
        "z": "c7ddd775817ac60f",
        "name": "link in: step_complete_for_smus",
        "links": [
            "9b73230004d23f1e"
        ],
        "x": 175,
        "y": 340,
        "wires": [
            [
                "0a66c58b1fbecdb7"
            ]
        ]
    },
    {
        "id": "0a66c58b1fbecdb7",
        "type": "function",
        "z": "c7ddd775817ac60f",
        "name": "Update Smoothing on Cycle End",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\n// Запускаемся только если завершился шаг 5\nif (msg.payload === 5) {\n\n    const last_cammkisl = g('cammkisl') || 0;\n    let history = g('cammkisl_history') || [];\n    const window_smus = Math.max(1, Math.round(Number(g(\"window_smus\") || 10)));\n\n    // --- НАЧАЛО ИЗМЕНЕНИЙ ---\n\n    // ФИЛЬТР: Добавляем значение в историю, только если оно не равно нулю.\n    // Это отсечет тот самый первый, некорректный ноль при старте системы.\n    if (last_cammkisl !== 0) {\n        history.push(last_cammkisl);\n        node.log(`PH Smoothing: Добавлено значение ${last_cammkisl.toFixed(3)} в историю.`);\n    } else {\n        node.warn(`PH Smoothing: Нулевое значение cammkisl проигнорировано и не добавлено в историю сглаживания.`);\n    }\n\n    // --- КОНЕЦ ИЗМЕНЕНИЙ ---\n\n    // Если массив стал длиннее окна, удаляем самый старый элемент (с начала)\n    if (history.length > window_smus) {\n        history.shift();\n    }\n    s('cammkisl_history', history); // Сохраняем обновленную историю\n\n    // Считаем сумму всех элементов в ТЕКУЩЕМ массиве\n    let sum = 0;\n    for (let val of history) {\n        sum += val;\n    }\n\n    // Делим сумму на РЕАЛЬНОЕ количество элементов в массиве.\n    let new_cammkisl_smus = (history.length > 0) ? (sum / history.length) : null; // Если история пуста, вернем null\n\n    // Обновляем глобальную переменную сглаженного значения\n    // Если new_cammkisl_smus равен null (история пуста), то и в global запишется null\n    s(\"cammkisl_smus\", new_cammkisl_smus);\n\n    // Обновляем значение в состоянии UI\n    let uiState = g('uiState_ph') || {};\n    uiState['cammkisl_smus'] = new_cammkisl_smus;\n    s('uiState_ph', uiState);\n\n    if (new_cammkisl_smus !== null) {\n        node.log(`PH Smoothing Updated: cammkisl_smus=${new_cammkisl_smus.toFixed(3)} based on ${history.length} values.`);\n    }\n\n    // Подготовка сообщения для графика\n    const msg_smus_chart = { topic: \"cammkisl_smus\", payload: new_cammkisl_smus };\n    // Сообщение для обновления UI\n    const msg_trigger_ui_update = { payload: true };\n\n    // Возвращаем: [0]=trigger UI, [1]=smus для графика\n    return [msg_trigger_ui_update, msg_smus_chart];\n\n} else {\n    // Если шаг не 5, ничего не делаем\n    return null;\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "0f8591dbfb63d224"
            ],
            [
                "c1e8b181384d820b"
            ]
        ]
    },
    {
        "id": "c1e8b181384d820b",
        "type": "link out",
        "z": "c7ddd775817ac60f",
        "name": "link out: chart cammkisl_smus",
        "mode": "link",
        "links": [
            "52508a8ba20c08c2"
        ],
        "x": 630,
        "y": 340,
        "wires": []
    },
    {
        "id": "b14480bcc2aecc10",
        "type": "function",
        "z": "c7ddd775817ac60f",
        "name": "Ожидание готовности UI",
        "func": "const cloneMessage = (source) => {\n    if (typeof RED !== 'undefined' && RED.util && RED.util.cloneMessage) {\n        return RED.util.cloneMessage(source);\n    }\n    return JSON.parse(JSON.stringify(source));\n};\nlet enabled = context.get('uiReady') === true;\nif (msg && msg.enable === true) {\n    if (!enabled) {\n        enabled = true;\n        context.set('uiReady', true);\n    }\n    const pending = context.get('pending');\n    if (pending) {\n        context.set('pending', null);\n        return pending;\n    }\n    return null;\n}\nif (!enabled) {\n    context.set('pending', cloneMessage(msg));\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "b7387780cda31592"
            ]
        ]
    },
    {
        "id": "a70c99138118df07",
        "type": "link in",
        "z": "c7ddd775817ac60f",
        "name": "link in: UI Ready",
        "links": [
            "35f8cce28c86843b"
        ],
        "x": 150,
        "y": 40,
        "wires": [
            [
                "b14480bcc2aecc10"
            ]
        ]
    },
    {
        "id": "194f915a22653353",
        "type": "inject",
        "z": "17485bfdc47fc3ef",
        "name": "При старте потока 2.5c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2.5",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "150dd7afc7290ca8"
            ]
        ]
    },
    {
        "id": "3bc967f31c9e3a95",
        "type": "link in",
        "z": "17485bfdc47fc3ef",
        "name": "link in: trigger-read-redox",
        "links": [
            "ab81880e2610f2db",
            "35a8e51325004943"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "150dd7afc7290ca8"
            ]
        ]
    },
    {
        "id": "150dd7afc7290ca8",
        "type": "file in",
        "z": "17485bfdc47fc3ef",
        "name": "Прочитать файл Redox",
        "filename": "/home/root/.node-red/save/redox_variables.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "098f62c94b7c796d"
            ]
        ]
    },
    {
        "id": "1f9611b6c3f41537",
        "type": "catch",
        "z": "17485bfdc47fc3ef",
        "name": "Ошибка чтения файла Redox",
        "scope": [
            "150dd7afc7290ca8"
        ],
        "uncaught": false,
        "x": 590,
        "y": 280,
        "wires": [
            [
                "3776f8150fcb5758"
            ]
        ]
    },
    {
        "id": "098f62c94b7c796d",
        "type": "json",
        "z": "17485bfdc47fc3ef",
        "name": "Разобрать JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 140,
        "wires": [
            [
                "3776f8150fcb5758"
            ]
        ]
    },
    {
        "id": "3776f8150fcb5758",
        "type": "function",
        "z": "17485bfdc47fc3ef",
        "name": "Init/Read Redox Globals",
        "func": "const defaultVars = {\n    ai3ph5koef: 1.0,    // Коэффициент по умолчанию\n    ai3ph5konst: 0.0,   // Константа по умолчанию\n    window_smusp: 10,    // Окно сглаживания по умолчанию\n    ai3ph5: 0.0,       // Начальное расчетное значение\n    ai3ph5smus: null   // Начальное сглаженное значение\n};\n\nconst savableVars = [\n    'ai3ph5koef', \n    'ai3ph5konst',\n    'window_smusp'\n];\n\nconst nonSavableVars = [\n    'ai3ph5', \n    'ai3ph5smus'\n];\n\nlet currentGlobalState = {};\nlet source = msg.topic === 'init' ? '[INIT_REDOX]' : '[READ_BTN_REDOX]';\n\n// Проверяем только наличие сохраняемых переменных\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && savableVars.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    node.warn(source + \" Параметры Redox загружены из файла.\");\n    for (const key of savableVars) {\n        currentGlobalState[key] = msg.payload[key];\n    }\n    // Несохраняемые инициализируем по умолчанию\n    for (const key of nonSavableVars) {\n        currentGlobalState[key] = defaultVars[key];\n    }\n} else {\n    currentGlobalState = { ...defaultVars };\n    if (msg.error) {\n        node.warn(source + \" Ошибка чтения файла Redox: \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init') {\n         node.warn(source + \" Файл Redox не найден/поврежден/неполный. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл Redox не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key in defaultVars) {\n    let currentVal = currentGlobalState.hasOwnProperty(key) ? currentGlobalState[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n\n    if (isNaN(numValue)) {\n        node.warn(`[${source}] Invalid number format for ${key}: ${currentVal}. Using default: ${defaultVars[key]}`);\n        currentVal = defaultVars[key];\n        currentGlobalState[key] = currentVal;\n    } else {\n         currentVal = numValue;\n         // Ограничения\n         if (key === 'window_smusp') {\n             if (currentVal < 1) currentVal = 1;\n             if (currentVal > 1000) currentVal = 1000;\n             currentVal = Math.round(currentVal); \n         } else if (key === 'ai3ph5koef' || key === 'ai3ph5konst') {\n             if (currentVal < -100000) currentVal = -100000;\n             if (currentVal > 100000) currentVal = 100000;\n         }\n         currentGlobalState[key] = currentVal;\n    }\n\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\n// Инициализируем историю для сглаживания\nglobal.set('redox_history', []);\n\n// Устанавливаем состояния\nglobal.set('savedState_redox', { ...currentGlobalState }); \nglobal.set('uiState_redox', { ...currentGlobalState });\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные Redox установлены/обновлены.\");\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные Redox уже были установлены.\");\n}\n\nreturn { payload: true }; // Триггер для UI",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 140,
        "wires": [
            [
                "ea78212a710afd06"
            ]
        ]
    },
    {
        "id": "ea78212a710afd06",
        "type": "link out",
        "z": "17485bfdc47fc3ef",
        "name": "link out: trigger-redox-ui-update",
        "mode": "link",
        "links": [
            "32e563ea5013d5ae"
        ],
        "x": 1110,
        "y": 140,
        "wires": []
    },
    {
        "id": "32e563ea5013d5ae",
        "type": "link in",
        "z": "7e9c6641b16de585",
        "name": "link in: trigger-redox-ui-update",
        "links": [
            "ea78212a710afd06",
            "b80cf3348a73921c",
            "d3484b563df7340a"
        ],
        "x": 195,
        "y": 220,
        "wires": [
            [
                "becb5b4706acde18"
            ]
        ]
    },
    {
        "id": "becb5b4706acde18",
        "type": "function",
        "z": "7e9c6641b16de585",
        "name": "Update Redox UI Elements",
        "func": "const uiState = global.get('uiState_redox') || {};\nconst savedState = global.get('savedState_redox') || {};\nconst uiMessages = [];\n\n// Переменные для отображения/ввода\nconst vars_to_update = [\n    'ai3h5', // Входное значение (только чтение)\n    'ai3ph5koef',\n    'ai3ph5konst',\n    'window_smusp',\n    'ai3ph5', // Расчетное (только чтение)\n    'ai3ph5smus' // Сглаженное (только чтение)\n];\n\nconst savableVars = [\n    'ai3ph5koef', \n    'ai3ph5konst',\n    'window_smusp'\n];\n\n// Обновляем текстовые поля и поля ввода\nfor (const key of vars_to_update) {\n    let value;\n    // ai3h5 берем напрямую из global, т.к. оно может обновляться из другого потока\n    if (key === 'ai3h5') {\n        value = global.get(key) || 0;\n    } else {\n        value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : 0;\n    }\n    \n    let formattedValue = (typeof value === 'number') ? value.toFixed(3) : 'N/A';\n    if (key === 'window_smusp' && Number.isInteger(value)){\n        formattedValue = value.toString();\n    }\n    uiMessages.push({ payload: formattedValue, topic: key });\n}\n\n// Проверяем наличие несохраненных изменений\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    const savedNum = Number(savedState[key]);\n    const uiNum = Number(uiState[key]);\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(3) : null;\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(3) : null;\n    if (savedStr !== uiStr) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\nuiMessages.push({ payload: statusMessage });\n\nreturn uiMessages;",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "704aa52ece418621"
            ],
            [
                "4480f00e52ba321a"
            ],
            [
                "7de22a5c0dce461e"
            ],
            [
                "d82d1f962ddab5c9"
            ],
            [
                "3d1f215cb05cb0b6"
            ],
            [
                "11628230376cd2af"
            ],
            [
                "9ef8e39d6f5290e4"
            ]
        ]
    },
    {
        "id": "055a65b740d29ad0",
        "type": "function",
        "z": "7e9c6641b16de585",
        "name": "Handle Redox UI Input",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\n\nlet uiState = global.get('uiState_redox') || {};\nconst savedState = global.get('savedState_redox') || {};\n\n// Только те переменные, которые можно редактировать в UI и сохранять\nconst savableVars = [\n    'ai3ph5koef',\n    'ai3ph5konst',\n    'window_smusp'\n];\n\nif (savableVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    let clampedValue = newValue;\n\n    if (varName === 'window_smusp') {\n        if (clampedValue < 1) clampedValue = 1;\n        if (clampedValue > 1000) clampedValue = 1000; // Максимальное окно, например\n        clampedValue = Math.round(clampedValue); // Окно должно быть целым\n\n        // Немедленное обновление глобальной переменной и сброс истории\n        if (global.get('window_smusp') !== clampedValue) {\n            global.set('window_smusp', clampedValue);\n            global.set('redox_history', []); // <<< СБРОС ИСТОРИИ СГЛАЖИВАНИЯ\n            node.log(`[UI_REDOX_INPUT] Global 'window_smusp' обновлен на: ${clampedValue}. История Redox сброшена.`);\n        }\n    } else if (varName === 'ai3ph5koef' || varName === 'ai3ph5konst') {\n        // Ограничения для коэффициента и константы\n        if (clampedValue < -100000) clampedValue = -100000;\n        if (clampedValue > 100000) clampedValue = 100000;\n\n        // Немедленное обновление глобальных переменных для koef/konst\n        if (global.get(varName) !== clampedValue) {\n            global.set(varName, clampedValue);\n            node.log(`[UI_REDOX_INPUT] Global '${varName}' обновлен на: ${clampedValue.toFixed(3)}`);\n        }\n    }\n\n    uiState[varName] = clampedValue; // Обновляем значение в uiState\n    global.set('uiState_redox', uiState);\n\n} else {\n    node.warn(\"[UI_REDOX_INPUT] Получено некорректное сообщение от UI: \" + JSON.stringify(msg));\n    // Важно: если значение некорректно, не обновляем UI, чтобы пользователь видел ошибку ввода\n    // и не обновляем глобальную переменную. Статус тоже не меняем.\n    return null;\n}\n\n// Проверка несохраненных изменений для статуса\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    // Убедимся, что оба значения существуют перед сравнением\n    const savedValRaw = savedState.hasOwnProperty(key) ? savedState[key] : (key.includes('koef') ? 1.0 : (key.includes('konst') ? 0.0 : 10)); // Значения по умолчанию для сравнения\n    const uiValRaw = uiState.hasOwnProperty(key) ? uiState[key] : (key.includes('koef') ? 1.0 : (key.includes('konst') ? 0.0 : 10));\n\n    const savedNum = Number(savedValRaw);\n    const uiNum = Number(uiValRaw);\n\n    let precision = (key === 'window_smusp') ? 0 : 3;\n\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(precision) : String(savedValRaw);\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(precision) : String(uiValRaw);\n\n    if (savedStr !== uiStr) {\n        hasUnsavedChanges = true;\n        node.log(`[UI_REDOX_INPUT] Unsaved change detected for ${key}: saved (${savedStr}), ui (${uiStr})`);\n        break;\n    }\n}\n\nlet statusMessage = \"\";\nif (hasUnsavedChanges) {\n    statusMessage = \"<font color='orange'>Есть несохраненные изменения!</font>\";\n} else {\n    statusMessage = \"<font color='green'>Все изменения сохранены</font>\";\n}\n\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "9ef8e39d6f5290e4"
            ]
        ]
    },
    {
        "id": "550c986a2e4c1716",
        "type": "link in",
        "z": "7e9c6641b16de585",
        "name": "link in: update-redox-status",
        "links": [
            "f5282358f75e871f"
        ],
        "x": 875,
        "y": 340,
        "wires": [
            [
                "9ef8e39d6f5290e4"
            ]
        ]
    },
    {
        "id": "c9c5061eede2e911",
        "type": "ui_button",
        "z": "7e9c6641b16de585",
        "name": "Чтение Redox из файла",
        "group": "8e3db00ee18295d3",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение Redox",
        "tooltip": "Прочитать параметры Redox из файла",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-download",
        "payload": "read_request",
        "payloadType": "str",
        "topic": "read_request",
        "topicType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "ab81880e2610f2db"
            ]
        ]
    },
    {
        "id": "ab81880e2610f2db",
        "type": "link out",
        "z": "7e9c6641b16de585",
        "name": "link out: trigger-read-redox",
        "mode": "link",
        "links": [
            "3bc967f31c9e3a95"
        ],
        "x": 390,
        "y": 60,
        "wires": []
    },
    {
        "id": "eb1cc7eecad40691",
        "type": "ui_button",
        "z": "7e9c6641b16de585",
        "name": "Запись Redox в файл",
        "group": "8e3db00ee18295d3",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись Redox",
        "tooltip": "Применить и сохранить параметры Redox в файл",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-upload",
        "payload": "write_request",
        "payloadType": "str",
        "topic": "write_request",
        "topicType": "str",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "80b3b78a03ca4306"
            ]
        ]
    },
    {
        "id": "80b3b78a03ca4306",
        "type": "link out",
        "z": "7e9c6641b16de585",
        "name": "link out: trigger-save-redox",
        "mode": "link",
        "links": [
            "fb532bafbf742f1c"
        ],
        "x": 390,
        "y": 120,
        "wires": []
    },
    {
        "id": "9ef8e39d6f5290e4",
        "type": "ui_text",
        "z": "7e9c6641b16de585",
        "group": "8e3db00ee18295d3",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус Redox",
        "label": "Статус:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 760,
        "y": 480,
        "wires": []
    },
    {
        "id": "704aa52ece418621",
        "type": "ui_text",
        "z": "7e9c6641b16de585",
        "group": "83884bb4e452c2f5",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "ai3h5_display",
        "label": "Вход (ai3h5):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 610,
        "y": 100,
        "wires": []
    },
    {
        "id": "4480f00e52ba321a",
        "type": "ui_numeric",
        "z": "7e9c6641b16de585",
        "name": "ai3ph5koef",
        "label": "Коэфф. (ai3ph5koef):",
        "group": "83884bb4e452c2f5",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai3ph5koef",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -100000,
        "max": 100000,
        "step": 0.001,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "055a65b740d29ad0"
            ]
        ]
    },
    {
        "id": "7de22a5c0dce461e",
        "type": "ui_numeric",
        "z": "7e9c6641b16de585",
        "name": "ai3ph5konst",
        "label": "Конст. (ai3ph5konst):",
        "group": "83884bb4e452c2f5",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai3ph5konst",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": -100000,
        "max": 100000,
        "step": 0.001,
        "x": 640,
        "y": 200,
        "wires": [
            [
                "055a65b740d29ad0"
            ]
        ]
    },
    {
        "id": "d82d1f962ddab5c9",
        "type": "ui_numeric",
        "z": "7e9c6641b16de585",
        "name": "window_smusp",
        "label": "Окно сглаж. (window_smusp):",
        "group": "83884bb4e452c2f5",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "window_smusp",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 1,
        "max": 1000,
        "step": 1,
        "x": 610,
        "y": 240,
        "wires": [
            [
                "055a65b740d29ad0"
            ]
        ]
    },
    {
        "id": "3d1f215cb05cb0b6",
        "type": "ui_text",
        "z": "7e9c6641b16de585",
        "group": "83884bb4e452c2f5",
        "order": 5,
        "width": 6,
        "height": 1,
        "name": "ai3ph5_display",
        "label": "Redox (ai3ph5):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 630,
        "y": 280,
        "wires": []
    },
    {
        "id": "11628230376cd2af",
        "type": "ui_text",
        "z": "7e9c6641b16de585",
        "group": "83884bb4e452c2f5",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "ai3ph5smus_display",
        "label": "Redox (сглаж.) (ai3ph5smus):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 640,
        "y": 360,
        "wires": []
    },
    {
        "id": "281b3858d25b1082",
        "type": "ui_chart",
        "z": "7e9c6641b16de585",
        "name": "График Redox",
        "group": "fbb2ba6afc0947d3",
        "order": 1,
        "width": "12",
        "height": "8",
        "label": "Redox Потенциал",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff7f0e",
            "#aec7e8"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "x": 390,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "1f1d88f6ae878a40",
        "type": "link in",
        "z": "7e9c6641b16de585",
        "name": "link in: chart redox raw",
        "links": [
            "6cac719ff372c231"
        ],
        "x": 195,
        "y": 460,
        "wires": [
            [
                "7366f7dd9aab61db"
            ]
        ]
    },
    {
        "id": "a21e0b31c0c677d1",
        "type": "link in",
        "z": "7e9c6641b16de585",
        "name": "link in: chart redox smus",
        "links": [
            "788bac910c9c8871"
        ],
        "x": 195,
        "y": 500,
        "wires": [
            [
                "b1b1acf9a11df3fe"
            ]
        ]
    },
    {
        "id": "7366f7dd9aab61db",
        "type": "rbe",
        "z": "7e9c6641b16de585",
        "name": "Filter unchanged redox_raw",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 460,
        "wires": [
            [
                "5d839a705c2d1a1d"
            ]
        ]
    },
    {
        "id": "b1b1acf9a11df3fe",
        "type": "rbe",
        "z": "7e9c6641b16de585",
        "name": "Filter unchanged redox_smus",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 355,
        "y": 500,
        "wires": [
            [
                "5d839a705c2d1a1d"
            ]
        ]
    },
    {
        "id": "86a139d2ab3d9c18",
        "type": "link in",
        "z": "7e9c6641b16de585",
        "name": "link in: Redox charts toggle",
        "links": [
            "d8c965ca7fb007c4"
        ],
        "x": 120,
        "y": 40,
        "wires": [
            [
                "98203198c099bf49"
            ]
        ]
    },
    {
        "id": "98203198c099bf49",
        "type": "function",
        "z": "7e9c6641b16de585",
        "name": "Управление графиками Redox",
        "func": "const enabled = msg.payload === true || msg.enabled === true;\nflow.set('redoxChartsEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "281b3858d25b1082"
            ]
        ]
    },
    {
        "id": "750aef9373e04951",
        "type": "inject",
        "z": "7e9c6641b16de585",
        "name": "Redox графики: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "redox_charts_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "98203198c099bf49"
            ]
        ]
    },
    {
        "id": "5d839a705c2d1a1d",
        "type": "function",
        "z": "7e9c6641b16de585",
        "name": "Фильтр графика Redox",
        "func": "let enabled = flow.get('redoxChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('redoxChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 480,
        "wires": [
            [
                "281b3858d25b1082"
            ]
        ]
    },
    {
        "id": "592ed12eaeb72f14",
        "type": "link in",
        "z": "7398ed9d3bdd1adb",
        "name": "link in: step_complete (From Iteration)",
        "links": [
            "9b73230004d23f1e"
        ],
        "x": 135,
        "y": 140,
        "wires": [
            [
                "36cdbf4765c0c096"
            ]
        ]
    },
    {
        "id": "36cdbf4765c0c096",
        "type": "function",
        "z": "7398ed9d3bdd1adb",
        "name": "Calculate Redox & Smoothing",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\n// Запускаемся только по завершению шага 5\nif (msg.payload !== 5) {\n    return null; \n}\n\nnode.log(\"[REDOX_CALC] Step 5 detected, calculating Redox...\");\n\n// Получаем входное значение и параметры\nconst ai3h5 = Number(g(\"ai3h5\") || 0); \nconst koef = Number(g(\"ai3ph5koef\") || 1);\nconst konst = Number(g(\"ai3ph5konst\") || 0);\nconst window_smusp = Math.max(1, Math.round(Number(g(\"window_smusp\") || 10)));\nlet history = g('redox_history') || [];\n\n// Рассчитываем \"сырое\" значение Redox\nconst new_ai3ph5 = ai3h5 * koef + konst;\ns(\"ai3ph5\", new_ai3ph5);\n\n// --- НАЧАЛО ИЗМЕНЕНИЙ ---\n// ФИЛЬТР ОТ НУЛЯ: Добавляем значение в историю, только если оно не равно нулю.\nif (new_ai3ph5 !== 0) {\n    history.push(new_ai3ph5);\n} else {\n    node.warn(`[REDOX_CALC] Нулевое значение new_ai3ph5 проигнорировано и не добавлено в историю.`);\n}\n// --- КОНЕЦ ИЗМЕНЕНИЙ ---\n\n// Обрезаем историю, если она превышает размер окна\nif (history.length > window_smusp) {\n    history.shift(); \n}\ns('redox_history', history); \n\n// Считаем сумму и среднее\nlet sum = 0;\nfor (let val of history) { sum += val; }\n\n// Если история пуста (например, на первом шаге пришел ноль), сглаженное значение будет null\nconst new_ai3ph5smus = (history.length > 0) ? (sum / history.length) : null;\ns(\"ai3ph5smus\", new_ai3ph5smus);\n\n// Обновляем состояние UI\nlet uiState = g('uiState_redox') || {};\nuiState['ai3h5'] = ai3h5;\nuiState['ai3ph5'] = new_ai3ph5;\nuiState['ai3ph5smus'] = new_ai3ph5smus;\ns('uiState_redox', uiState);\n\nif(new_ai3ph5smus !== null) {\n    node.log(`[REDOX_CALC] Calculated: ai3ph5=${new_ai3ph5.toFixed(3)}, ai3ph5smus=${new_ai3ph5smus.toFixed(3)} based on ${history.length} values.`);\n}\n\n// Готовим сообщения для выходов\nconst msg_trigger_ui_update = { payload: true };\nconst msg_chart_raw = { topic: \"ai3ph5\", payload: new_ai3ph5 };\nconst msg_chart_smus = { topic: \"ai3ph5smus\", payload: new_ai3ph5smus };\n\nreturn [msg_trigger_ui_update, msg_chart_raw, msg_chart_smus];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "b80cf3348a73921c"
            ],
            [
                "6cac719ff372c231"
            ],
            [
                "788bac910c9c8871"
            ]
        ]
    },
    {
        "id": "b80cf3348a73921c",
        "type": "link out",
        "z": "7398ed9d3bdd1adb",
        "name": "link out: trigger redox ui",
        "mode": "link",
        "links": [
            "32e563ea5013d5ae"
        ],
        "x": 610,
        "y": 100,
        "wires": []
    },
    {
        "id": "6cac719ff372c231",
        "type": "link out",
        "z": "7398ed9d3bdd1adb",
        "name": "link out: chart redox raw",
        "mode": "link",
        "links": [
            "1f1d88f6ae878a40"
        ],
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "788bac910c9c8871",
        "type": "link out",
        "z": "7398ed9d3bdd1adb",
        "name": "link out: chart redox smus",
        "mode": "link",
        "links": [
            "a21e0b31c0c677d1"
        ],
        "x": 610,
        "y": 180,
        "wires": []
    },
    {
        "id": "fb532bafbf742f1c",
        "type": "link in",
        "z": "e72998e6615cd690",
        "name": "link in: trigger-save-redox",
        "links": [
            "80b3b78a03ca4306",
            "225e8068031d1bd5"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "6816eefb184f92fa"
            ]
        ]
    },
    {
        "id": "6816eefb184f92fa",
        "type": "function",
        "z": "e72998e6615cd690",
        "name": "Apply & Save Redox",
        "func": "const uiState = global.get('uiState_redox') || {};\nlet savedState = global.get('savedState_redox') || {};\n\nlet globalsChanged = false;\n\nconst savableVars = [\n    'ai3ph5koef', \n    'ai3ph5konst',\n    'window_smusp'\n];\n\nconst stateToSave = {}; // Только сохраняемые переменные для файла\n\nfor (const key of savableVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : null;\n    const numValue = Number(valueToSet);\n\n    if (valueToSet === null || isNaN(numValue)) {\n        node.warn(`[REDOX_SAVE] Invalid/missing UI value for ${key}: ${valueToSet}. Using last saved value or default.`);\n        const defaultValue = savedState.hasOwnProperty(key) ? savedState[key] : (key === 'window_smusp' ? 10 : (key === 'ai3ph5koef' ? 1 : 0) );\n        valueToSet = defaultValue;\n    } else {\n        valueToSet = numValue;\n        // Ограничения\n         if (key === 'window_smusp') {\n             if (valueToSet < 1) valueToSet = 1;\n             if (valueToSet > 1000) valueToSet = 1000;\n             valueToSet = Math.round(valueToSet);\n         } else {\n             if (valueToSet < -100000) valueToSet = -100000;\n             if (valueToSet > 100000) valueToSet = 100000;\n         }\n    }\n    \n    // Обновляем global, если нужно\n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChanged = true;\n    }\n    \n    stateToSave[key] = valueToSet;\n    uiState[key] = valueToSet; // Обновляем uiState на случай корректировки\n}\n\n// Обновляем savedState_redox (включая не сохраняемые в файл переменные)\nlet fullSavedState = { ...savedState }; // Копируем старое\nfor(const key of savableVars) {\n    fullSavedState[key] = stateToSave[key]; // Обновляем сохраняемые\n}\n// Несохраняемые берем из global (они должны быть актуальны)\nconst nonSavableVars = ['ai3ph5', 'ai3ph5smus'];\nfor(const key of nonSavableVars) {\n    fullSavedState[key] = global.get(key); // Берем актуальное из global\n}\nglobal.set('savedState_redox', fullSavedState);\n\n// Синхронизируем uiState с сохраненным состоянием\nglobal.set('uiState_redox', { ...uiState, ...fullSavedState }); \n\nif (globalsChanged) {\n    node.log(\"[WRITE_BTN_REDOX] Параметры Redox обновлены и сохранены.\");\n} else {\n    node.log(\"[WRITE_BTN_REDOX] Параметры Redox не требовали обновления.\");\n}\n\nconst filePayload = { payload: stateToSave }; \nconst statusMessage = { payload: \"<font color='green'>Параметры Redox сохранены</font>\" };\n\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "663c4c5bd5bf74c0"
            ],
            [
                "f5282358f75e871f"
            ]
        ]
    },
    {
        "id": "663c4c5bd5bf74c0",
        "type": "json",
        "z": "e72998e6615cd690",
        "name": "Объект в JSON",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "09026e91f3cf4e5a"
            ]
        ]
    },
    {
        "id": "09026e91f3cf4e5a",
        "type": "file",
        "z": "e72998e6615cd690",
        "name": "Сохранить файл Redox",
        "filename": "/home/root/.node-red/save/redox_variables.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 430,
        "y": 260,
        "wires": [
            [
                "73e76ae6a9426e7f"
            ]
        ]
    },
    {
        "id": "73e76ae6a9426e7f",
        "type": "ui_toast",
        "z": "e72998e6615cd690",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение Redox",
        "name": "Уведомление Redox",
        "x": 440,
        "y": 340,
        "wires": []
    },
    {
        "id": "f5282358f75e871f",
        "type": "link out",
        "z": "e72998e6615cd690",
        "name": "link out: update-redox-status",
        "mode": "link",
        "links": [
            "550c986a2e4c1716"
        ],
        "x": 690,
        "y": 100,
        "wires": []
    },
    {
        "id": "8af73409de8f53a4",
        "type": "inject",
        "z": "fa26a889a6480f8c",
        "name": "При старте потока (AO LC) 1.3c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1.3",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "3ba47c6bc9e07d5a"
            ]
        ]
    },
    {
        "id": "4f859da4ee156b8c",
        "type": "link in",
        "z": "fa26a889a6480f8c",
        "name": "link in: trigger-read-aolc",
        "links": [
            "d2f315b4fe5b7fb3"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "3ba47c6bc9e07d5a"
            ]
        ]
    },
    {
        "id": "3ba47c6bc9e07d5a",
        "type": "file in",
        "z": "fa26a889a6480f8c",
        "name": "Прочитать файл AO LC Config",
        "filename": "/home/root/.node-red/save/ao_lc_config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "47b99586f855556b"
            ]
        ]
    },
    {
        "id": "385ec825f2f0a414",
        "type": "catch",
        "z": "fa26a889a6480f8c",
        "name": "Ошибка чтения файла AO LC",
        "scope": [
            "3ba47c6bc9e07d5a"
        ],
        "uncaught": false,
        "x": 520,
        "y": 220,
        "wires": [
            [
                "522afc13795d8541"
            ]
        ]
    },
    {
        "id": "47b99586f855556b",
        "type": "json",
        "z": "fa26a889a6480f8c",
        "name": "Разобрать JSON (AO LC)",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 680,
        "y": 60,
        "wires": [
            [
                "522afc13795d8541"
            ]
        ]
    },
    {
        "id": "522afc13795d8541",
        "type": "function",
        "z": "fa26a889a6480f8c",
        "name": "Init/Read AO LC Globals",
        "func": "const defaultVars = {\n    ao_lc_key_ch2: 200, ao_lc_k_ch2: 1.0, ao_lc_c_ch2: 0.0,\n    ao_lc_key_ch3: 300, ao_lc_k_ch3: 1.0, ao_lc_c_ch3: 0.0,\n    ao_lc_key_ch4: 400, ao_lc_k_ch4: 1.0, ao_lc_c_ch4: 0.0\n};\n\nconst savableVars = Object.keys(defaultVars);\nlet currentGlobalState = {};\nlet source = msg.topic === 'init' ? '[INIT_AO_LC]' : '[READ_BTN_AO_LC]';\n\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && savableVars.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    node.warn(source + \" Конфигурация AO LC загружена из файла.\");\n    currentGlobalState = { ...msg.payload };\n} else {\n    currentGlobalState = { ...defaultVars };\n    if (msg.error) {\n        node.warn(source + \" Ошибка чтения файла AO LC: \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init'){\n         node.warn(source + \" Файл AO LC не найден/поврежден. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл AO LC не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key of savableVars) {\n    let currentVal = currentGlobalState.hasOwnProperty(key) ? currentGlobalState[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n\n    if (isNaN(numValue)) {\n        node.warn(`[${source}] Некорректный формат числа для ${key}: ${currentVal}. Используется значение по умолчанию: ${defaultVars[key]}`);\n        currentVal = defaultVars[key];\n        currentGlobalState[key] = currentVal;\n    } else {\n         currentVal = numValue;\n         if (key.startsWith('ao_lc_key_ch')) {\n            // Можно добавить валидацию для ключей, если необходимо\n         }\n         currentGlobalState[key] = currentVal;\n    }\n\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\nglobal.set('savedState_aolc', { ...currentGlobalState }); \nglobal.set('uiState_aolc', { ...currentGlobalState });\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные AO LC установлены/обновлены.\");\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные AO LC уже были установлены.\");\n}\n\nreturn { payload: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "ab87de4279646fad"
            ]
        ]
    },
    {
        "id": "ab87de4279646fad",
        "type": "link out",
        "z": "fa26a889a6480f8c",
        "name": "link out: trigger-aolc-ui-update",
        "mode": "link",
        "links": [
            "788f0fd8f6c24ef9"
        ],
        "x": 1150,
        "y": 140,
        "wires": []
    },
    {
        "id": "05d8d549dd084005",
        "type": "link in",
        "z": "31fb96ba681293b1",
        "name": "link in: trigger-save-aolc",
        "links": [
            "be7e763239dd4fe2",
            "4f9d0f95bac82b9a"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "830c1667729e3161"
            ]
        ]
    },
    {
        "id": "830c1667729e3161",
        "type": "function",
        "z": "31fb96ba681293b1",
        "name": "Apply & Save AO LC Globals",
        "func": "const uiState = global.get('uiState_aolc') || {};\nconst defaultVars = {\n    ao_lc_key_ch2: 200, ao_lc_k_ch2: 1.0, ao_lc_c_ch2: 0.0,\n    ao_lc_key_ch3: 300, ao_lc_k_ch3: 1.0, ao_lc_c_ch3: 0.0,\n    ao_lc_key_ch4: 400, ao_lc_k_ch4: 1.0, ao_lc_c_ch4: 0.0\n};\nconst savableVars = Object.keys(defaultVars);\nlet stateToSave = {};\nlet globalsChanged = false;\n\nfor (const key of savableVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : defaultVars[key];\n    const numValue = Number(valueToSet);\n    if (isNaN(numValue)) {\n        node.warn(`[SAVE_AO_LC] Некорректное значение для ${key} в uiState: ${valueToSet}. Используется значение по умолчанию.`);\n        valueToSet = defaultVars[key];\n    } else {\n        valueToSet = numValue;\n    }\n    stateToSave[key] = valueToSet;\n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChanged = true;\n    }\n}\n\nglobal.set('savedState_aolc', { ...stateToSave });\n\nif (globalsChanged) {\n    node.log(\"[SAVE_AO_LC] Глобальные переменные AO LC обновлены и сохранены в файл.\");\n} else {\n    node.log(\"[SAVE_AO_LC] Глобальные переменные AO LC не требовали обновления перед сохранением.\");\n}\n\nconst filePayload = { payload: stateToSave };\nconst statusUpdateMsg = { payload: \"<font color='green'>Все изменения сохранены</font>\" };\n\nreturn [filePayload, statusUpdateMsg];",
        "outputs": 2,
        "noerr": 0,
        "x": 450,
        "y": 100,
        "wires": [
            [
                "3476b53de44debee"
            ],
            [
                "3c09a6f998385ab4"
            ]
        ]
    },
    {
        "id": "3476b53de44debee",
        "type": "json",
        "z": "31fb96ba681293b1",
        "name": "Объект в JSON (AO LC)",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "02b032053b960b6a"
            ]
        ]
    },
    {
        "id": "02b032053b960b6a",
        "type": "file",
        "z": "31fb96ba681293b1",
        "name": "Сохранить файл AO LC Config",
        "filename": "/home/root/.node-red/save/ao_lc_config.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "44970badbd520d67"
            ]
        ]
    },
    {
        "id": "44970badbd520d67",
        "type": "ui_toast",
        "z": "31fb96ba681293b1",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение AO LC",
        "name": "Уведомление о сохранении AO LC",
        "x": 500,
        "y": 340,
        "wires": []
    },
    {
        "id": "3c09a6f998385ab4",
        "type": "link out",
        "z": "31fb96ba681293b1",
        "name": "link out: aolc-ui-status-after-save",
        "links": [
            "788f0fd8f6c24ef9"
        ],
        "x": 730,
        "y": 100,
        "wires": []
    },
    {
        "id": "5650f3d429f72c30",
        "type": "inject",
        "z": "8110848381ab0154",
        "name": "Каждые 16c 2c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "16",
        "topic": "periodic_update",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "7abf95f7f5cde443"
            ]
        ]
    },
    {
        "id": "7abf95f7f5cde443",
        "type": "function",
        "z": "8110848381ab0154",
        "name": "Process Analog Outputs (4-20mA)",
        "func": "// --- НАЧАЛО: Секция для твоей таблицы переменных ---\n// Тебе нужно будет заполнить этот объект userVariableMap всеми парами \"Номер: ИмяПеременной\"\n// из твоей таблицы. Номер - это часть NN из ключа CNN.\n// Пример: если ключ 2482, и переменная с номером 482 называется global.x,\n// то запись будет: 482: \"x\"\nconst userVariableMap = {\n    // Пример записей из твоей таблицы (дополни или измени по необходимости):\n    400: \"ai1h1\", 402: \"ai1h2\", 404: \"ai1h3\", 406: \"ai1h4\", 408: \"ai1h5\",\n    410: \"ai2h1\", 412: \"ai2h2\", 414: \"ai2h3\", 416: \"ai2h4\", 418: \"ai2h5\",\n    420: \"ai3h1\", 422: \"ai3h2\", 424: \"ai3h3\", 426: \"ai3h4\", 428: \"ai3h5\",\n    430: \"ai4h1\", 432: \"ai4h2\", 434: \"ai4h3\", 436: \"ai4h4\", 438: \"ai4h5\",\n    440: \"ai5h1\", 442: \"ai5h2\", 444: \"ai5h3\", 446: \"ai5h4\", 448: \"ai5h5\",\n    450: \"ai6h1\", 452: \"ai6h2\", 454: \"ai6h3\", 456: \"ai6h4\", 458: \"ai6h5\",\n    460: \"ai7h1\", 462: \"ai7h2\", 464: \"ai7h3\", 466: \"ai7h4\", 468: \"ai7h5\",\n    470: \"ai8h1\", 472: \"ai8h2\", 474: \"ai8h3\", 476: \"ai8h4\", 478: \"ai8h5\",\n    480: \"nh\",\n    482: \"x\",\n    484: \"ai2t1h1\",\n    486: \"ai2t1t2h1h2\",\n    488: \"ai2t2h2\",\n    490: \"cammkisl\",\n    492: \"camm\",\n    494: \"ckisl\",\n    496: \"cammkisl_smus\",\n    498: \"ph\",\n    500: \"ai3ph5\",\n    502: \"ai3ph5smus\",\n   // 510: \"ai4h5\",       // Входное значение для Redox2\n    510:\"ai4p2h5\",      // Рассчитанный Redox2\n    512:\"ai4p2h5smus\",  // Сглаженный Redox2\n    514: \"pid_valve_command_final\" // Новая переменная от ПИД\n\n\n\n    // ... и так далее для ВСЕХ переменных, которые ты планируешь выводить\n};\n// --- КОНЕЦ: Секция для твоей таблицы переменных ---\n\nconst channelConfigs = {\n    '2': { // Логический канал 2\n        physicalAoIndex: 1, // Номер физического канала на ADAM (1 для AO1, 2 для AO2, и т.д.)\n        keyVar: \"ao_lc_key_ch2\",\n        kVar: \"ao_lc_k_ch2\",\n        cVar: \"ao_lc_c_ch2\",\n        globalCalculatedMaVar: \"ao_lc_calculated_mA_ch2\", // Глобальная переменная для рассчитанного тока\n        uiSourceTopic: \"AO_LC_SourceValue_Ch2_Display\", // Топик для ui_text (исходное значение)\n        uiCurrentTopic: \"AO_LC_Current_Ch2_Display\"  // Топик для ui_text (ток в мА)\n    },\n    '3': { // Логический канал 3\n        physicalAoIndex: 2,\n        keyVar: \"ao_lc_key_ch3\",\n        kVar: \"ao_lc_k_ch3\",\n        cVar: \"ao_lc_c_ch3\",\n        globalCalculatedMaVar: \"ao_lc_calculated_mA_ch3\",\n        uiSourceTopic: \"AO_LC_SourceValue_Ch3_Display\",\n        uiCurrentTopic: \"AO_LC_Current_Ch3_Display\"\n    },\n    '4': { // Логический канал 4\n        physicalAoIndex: 3,\n        keyVar: \"ao_lc_key_ch4\",\n        kVar: \"ao_lc_k_ch4\",\n        cVar: \"ao_lc_c_ch4\",\n        globalCalculatedMaVar: \"ao_lc_calculated_mA_ch4\",\n        uiSourceTopic: \"AO_LC_SourceValue_Ch4_Display\",\n        uiCurrentTopic: \"AO_LC_Current_Ch4_Display\"\n    }\n};\n\n// Инициализация массива выходов (3 для ADAM, 6 для UI)\n// Узел должен иметь 9 выходов\nlet outputs = new Array(9).fill(null);\n\nfor (const logicalChannelStr in channelConfigs) {\n    const config = channelConfigs[logicalChannelStr];\n    const logicalChannelNum = parseInt(logicalChannelStr);\n\n    let dacValue = 0; // Значение по умолчанию для ЦАП (0 соответствует 4 мА для диапазона 4-20мА на ADAM)\n    let sourceValForUI = \"N/A\";\n    let currentMaForUI = \"4.000\"; // Отображаемое значение по умолчанию\n    let calculatedCurrentForGlobal = 4.0; // Числовое значение тока для global переменной\n\n    const keyCNN = global.get(config.keyVar);\n    const K_coeff = global.get(config.kVar);\n    const C_offset = global.get(config.cVar);\n\n    // Проверка, что все конфигурационные параметры являются числами\n    if (typeof keyCNN === 'number' && typeof K_coeff === 'number' && typeof C_offset === 'number' &&\n        !isNaN(keyCNN) && !isNaN(K_coeff) && !isNaN(C_offset)) {\n\n        const cnnStr = String(Math.floor(keyCNN)); // Убираем дробную часть, если есть\n        let keyChannelPart = NaN;\n        let varNumNN = NaN;\n\n        if (cnnStr.length >= 2) { // Минимальная длина ключа CNN (например, C=2, NN=0 -> \"20\")\n            keyChannelPart = parseInt(cnnStr.substring(0, 1), 10);\n            varNumNN = parseInt(cnnStr.substring(1), 10);\n        } else {\n            // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Ключ ${keyCNN} слишком короткий для формата CNN.`);\n        }\n\n        if (keyChannelPart !== logicalChannelNum) {\n            // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Префикс ключа ${keyCNN} (=${keyChannelPart}) не соответствует ожидаемому ${logicalChannelNum}. Вывод будет 4мА.`);\n        } else if (isNaN(varNumNN)) {\n            // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Неверный номер переменной NN из ключа ${keyCNN}. Вывод будет 4мА.`);\n        } else {\n            const sourceGlobalVarName = userVariableMap[varNumNN];\n            if (!sourceGlobalVarName) {\n                // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Номер переменной ${varNumNN} (из ключа ${keyCNN}) не найден в userVariableMap. Вывод будет 4мА.`);\n            } else {\n                const sourceValue = global.get(sourceGlobalVarName);\n                if (typeof sourceValue === 'number' && !isNaN(sourceValue)) {\n                    sourceValForUI = sourceValue.toFixed(3);\n                    let currentValue_mA = sourceValue * K_coeff + C_offset;\n\n                    currentValue_mA = Math.max(4.0, Math.min(20.0, currentValue_mA)); // Ограничение 4-20 мА\n                    calculatedCurrentForGlobal = currentValue_mA;\n                    currentMaForUI = currentValue_mA.toFixed(3);\n\n                    dacValue = Math.round(((currentValue_mA - 4.0) / (20.0 - 4.0)) * 4095.0);\n                    dacValue = Math.max(0, Math.min(4095, dacValue));\n                } else {\n                    // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Значение global.${sourceGlobalVarName} (для NN=${varNumNN}) не число: ${sourceValue}. Вывод будет 4мА.`);\n                }\n            }\n        }\n    } else {\n        // node.warn(`[AO_LC] Канал ${logicalChannelNum}: Неполная или нечисловая конфигурация (ключ: ${keyCNN}, K: ${K_coeff}, C: ${C_offset}). Вывод будет 4мА.`);\n    }\n\n    // Установка новой глобальной переменной для рассчитанного тока\n    global.set(config.globalCalculatedMaVar, calculatedCurrentForGlobal);\n\n    // Выход для модуля ADAM: Индекс 0 для AO1, 1 для AO2, 2 для AO3\n    // (config.physicalAoIndex у нас 1, 2, 3)\n    outputs[config.physicalAoIndex - 1] = { payload: dacValue };\n\n    // Выходы для обновления текстовых полей в UI\n    // Базовый индекс для UI выходов: Канал 2 (uiSourceTopic/uiCurrentTopic) -> выходы 3,4\n    // Канал 3 -> выходы 5,6\n    // Канал 4 -> выходы 7,8\n    let uiOutputBaseIndex = 3 + (logicalChannelNum - 2) * 2;\n    outputs[uiOutputBaseIndex] = { topic: config.uiSourceTopic, payload: sourceValForUI };\n    outputs[uiOutputBaseIndex + 1] = { topic: config.uiCurrentTopic, payload: currentMaForUI };\n}\n\nreturn outputs;",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "c1b9e11a7063c3d0"
            ],
            [
                "023557b0984aafb7"
            ],
            [
                "7d699a41e6254d18"
            ],
            [
                "d64e83efdf3cbb21"
            ],
            [
                "da071253b80b3f43",
                "90c1a94538f6c49a"
            ],
            [
                "3eda9bd9f0ab2f07"
            ],
            [
                "70e3c7a9daee5ff6"
            ],
            [
                "e5214fed88d0bdcf"
            ],
            [
                "40014a56427e26cf"
            ]
        ]
    },
    {
        "id": "c1b9e11a7063c3d0",
        "type": "ADAM-write",
        "z": "8110848381ab0154",
        "name": "ADAM AO1 (Лог.Ch2)",
        "host": "192.168.2.2",
        "serialPortCfg": "",
        "unit_id": 1,
        "write_ch": 1,
        "write_ch_type": "write_ao_1",
        "reconnecttimeout": "",
        "Series": "mbtcp",
        "advDevTypeTCP": "ADAM-6224",
        "advDevType": "ADAM-6224",
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "023557b0984aafb7",
        "type": "ADAM-write",
        "z": "8110848381ab0154",
        "name": "ADAM AO2 (Лог.Ch3)",
        "host": "192.168.2.2",
        "serialPortCfg": "",
        "unit_id": 1,
        "write_ch": 2,
        "write_ch_type": "write_ao_1",
        "reconnecttimeout": "",
        "Series": "mbtcp",
        "advDevTypeTCP": "ADAM-6224",
        "advDevType": "ADAM-6224",
        "x": 750,
        "y": 120,
        "wires": []
    },
    {
        "id": "7d699a41e6254d18",
        "type": "ADAM-write",
        "z": "8110848381ab0154",
        "name": "ADAM AO3 (Лог.Ch4)",
        "host": "192.168.2.2",
        "serialPortCfg": "",
        "unit_id": 1,
        "write_ch": 3,
        "write_ch_type": "write_ao_1",
        "reconnecttimeout": "",
        "Series": "mbtcp",
        "advDevTypeTCP": "ADAM-6224",
        "advDevType": "ADAM-6224",
        "x": 750,
        "y": 180,
        "wires": []
    },
    {
        "id": "d64e83efdf3cbb21",
        "type": "link out",
        "z": "8110848381ab0154",
        "name": "To UI Src Ch2",
        "links": [
            "d23bdd5e84eb8734"
        ],
        "x": 750,
        "y": 260,
        "wires": []
    },
    {
        "id": "da071253b80b3f43",
        "type": "link out",
        "z": "8110848381ab0154",
        "name": "To UI mA Ch2",
        "links": [
            "b9fa184100a50a30"
        ],
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "3eda9bd9f0ab2f07",
        "type": "link out",
        "z": "8110848381ab0154",
        "name": "To UI Src Ch3",
        "links": [
            "b00f7aab29f9cc5e"
        ],
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "70e3c7a9daee5ff6",
        "type": "link out",
        "z": "8110848381ab0154",
        "name": "To UI mA Ch3",
        "links": [
            "9da0db7f5c0da452"
        ],
        "x": 750,
        "y": 380,
        "wires": []
    },
    {
        "id": "e5214fed88d0bdcf",
        "type": "link out",
        "z": "8110848381ab0154",
        "name": "To UI Src Ch4",
        "mode": "link",
        "links": [
            "671c1d8ade871767"
        ],
        "x": 750,
        "y": 420,
        "wires": []
    },
    {
        "id": "40014a56427e26cf",
        "type": "link out",
        "z": "8110848381ab0154",
        "name": "To UI mA Ch4",
        "links": [
            "1af192c2cca71098"
        ],
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "90c1a94538f6c49a",
        "type": "change",
        "z": "8110848381ab0154",
        "name": "Set Topic for AO LC Ch2 mA",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "PID_Valve_mA_Ch2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 520,
        "wires": [
            [
                "f3975a8e11025935"
            ]
        ]
    },
    {
        "id": "f3975a8e11025935",
        "type": "link out",
        "z": "8110848381ab0154",
        "name": "link out: AO LC Ch2 mA for Chart",
        "mode": "link",
        "links": [
            "3084fffd1249faba"
        ],
        "x": 860,
        "y": 520,
        "wires": []
    },
    {
        "id": "dd6140abe91bfcba",
        "type": "inject",
        "z": "179f80e858d2e6d2",
        "name": "При старте потока (Redox2) 2.2c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2.2",
        "topic": "init",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "fe333a24f0aac416"
            ]
        ]
    },
    {
        "id": "1d83ce1bd0bd4b83",
        "type": "link in",
        "z": "179f80e858d2e6d2",
        "name": "link in: trigger-read-redox2",
        "links": [
            "fa77c0825aa58d8a",
            "a4c14e4a4e99c131"
        ],
        "x": 195,
        "y": 180,
        "wires": [
            [
                "fe333a24f0aac416"
            ]
        ]
    },
    {
        "id": "fe333a24f0aac416",
        "type": "file in",
        "z": "179f80e858d2e6d2",
        "name": "Прочитать файл Redox2",
        "filename": "/home/root/.node-red/save/redox_variables2.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 510,
        "y": 160,
        "wires": [
            [
                "0436058abe0229f0"
            ]
        ]
    },
    {
        "id": "b66696c2518213b6",
        "type": "catch",
        "z": "179f80e858d2e6d2",
        "name": "Ошибка чтения файла Redox2",
        "scope": [
            "fe333a24f0aac416"
        ],
        "uncaught": false,
        "x": 610,
        "y": 220,
        "wires": [
            [
                "d6e5fa2990a47270"
            ]
        ]
    },
    {
        "id": "0436058abe0229f0",
        "type": "json",
        "z": "179f80e858d2e6d2",
        "name": "Разобрать JSON (Redox2)",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 660,
        "y": 60,
        "wires": [
            [
                "d6e5fa2990a47270"
            ]
        ]
    },
    {
        "id": "d6e5fa2990a47270",
        "type": "function",
        "z": "179f80e858d2e6d2",
        "name": "Init/Read Redox2 Globals",
        "func": "const defaultVars = {\n    ai4p2h5koef: 1.0,\n    ai4p2h5konst: 0.0,\n    window_smusp2: 10,\n    ai4h5: 0.0, // Начальное значение для \"входной\" переменной\n    ai4p2h5: 0.0, // Начальное расчетное значение\n    ai4p2h5smus: null // Начальное сглаженное значение\n};\n\nconst savableVars = [\n    'ai4p2h5koef',\n    'ai4p2h5konst',\n    'window_smusp2'\n];\n\nconst nonSavableVars = [\n    'ai4h5',\n    'ai4p2h5',\n    'ai4p2h5smus'\n];\n\nlet currentGlobalState = {};\nlet source = msg.topic === 'init' ? '[INIT_REDOX2]' : '[READ_BTN_REDOX2]';\n\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && savableVars.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    node.warn(source + \" Параметры Redox2 загружены из файла.\");\n    for (const key of savableVars) {\n        currentGlobalState[key] = msg.payload[key];\n    }\n    for (const key of nonSavableVars) {\n        currentGlobalState[key] = defaultVars[key]; // Несохраняемые инициализируем по умолчанию\n    }\n} else {\n    currentGlobalState = { ...defaultVars };\n    if (msg.error) {\n        node.warn(source + \" Ошибка чтения файла Redox2: \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init'){\n         node.warn(source + \" Файл Redox2 не найден/поврежден/неполный. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл Redox2 не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChanged = false;\nfor (const key in defaultVars) {\n    let currentVal = currentGlobalState.hasOwnProperty(key) ? currentGlobalState[key] : defaultVars[key];\n    const numValue = Number(currentVal);\n\n    if (isNaN(numValue)) {\n        node.warn(`[${source}] Invalid number format for ${key}: ${currentVal}. Using default: ${defaultVars[key]}`);\n        currentVal = defaultVars[key];\n        currentGlobalState[key] = currentVal;\n    } else {\n         currentVal = numValue;\n         if (key === 'window_smusp2') {\n             if (currentVal < 1) currentVal = 1;\n             if (currentVal > 1000) currentVal = 1000;\n             currentVal = Math.round(currentVal); \n         } else if (key === 'ai4p2h5koef' || key === 'ai4p2h5konst') {\n             if (currentVal < -100000) currentVal = -100000;\n             if (currentVal > 100000) currentVal = 100000;\n         }\n         currentGlobalState[key] = currentVal;\n    }\n\n    if (global.get(key) !== currentVal) {\n        global.set(key, currentVal);\n        globalsChanged = true;\n    }\n}\n\nglobal.set('redox2_history', []); // Инициализация истории для Redox2\n\nglobal.set('savedState_redox2', { ...currentGlobalState }); \nglobal.set('uiState_redox2', { ...currentGlobalState });\n\nif (globalsChanged) {\n    node.log(source + \" Глобальные переменные Redox2 установлены/обновлены.\");\n} else if (msg.topic === 'init') {\n    node.log(source + \" Глобальные переменные Redox2 уже были установлены.\");\n}\n\nreturn { payload: true };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 80,
        "wires": [
            [
                "eb03485c97ef5ea5"
            ]
        ]
    },
    {
        "id": "eb03485c97ef5ea5",
        "type": "link out",
        "z": "179f80e858d2e6d2",
        "name": "link out: trigger-redox2-ui-update",
        "mode": "link",
        "links": [
            "9f400a8399ef39f0"
        ],
        "x": 1130,
        "y": 140,
        "wires": []
    },
    {
        "id": "9f400a8399ef39f0",
        "type": "link in",
        "z": "581cd0ee506b12fb",
        "name": "link in: trigger-redox2-ui-update",
        "links": [
            "eb03485c97ef5ea5",
            "afe2a8a8eaf9cc43",
            "3036a640887c6c0f",
            "8037559386027da7"
        ],
        "x": 195,
        "y": 220,
        "wires": [
            [
                "2a658337ab31a082"
            ]
        ]
    },
    {
        "id": "2a658337ab31a082",
        "type": "function",
        "z": "581cd0ee506b12fb",
        "name": "Update Redox2 UI Elements",
        "func": "const uiState = global.get('uiState_redox2') || {};\nconst savedState = global.get('savedState_redox2') || {};\nconst uiMessages = [];\n\nconst vars_to_update = [\n    'ai4h5', // Входное значение (только чтение)\n    'ai4p2h5koef',\n    'ai4p2h5konst',\n    'window_smusp2',\n    'ai4p2h5', // Расчетное (только чтение)\n    'ai4p2h5smus' // Сглаженное (только чтение)\n];\n\nconst savableVars = [\n    'ai4p2h5koef',\n    'ai4p2h5konst',\n    'window_smusp2'\n];\n\nfor (const key of vars_to_update) {\n    let value;\n    if (key === 'ai4h5') {\n        value = global.get(key) || 0; // ai4h5 берем напрямую из global\n    } else {\n        value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : 0;\n    }\n    let formattedValue = (typeof value === 'number') ? value.toFixed(3) : 'N/A';\n    if (key === 'window_smusp2' && Number.isInteger(value)){\n        formattedValue = value.toString();\n    }\n    uiMessages.push({ payload: formattedValue, topic: key });\n}\n\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    const savedNum = Number(savedState[key]);\n    const uiNum = Number(uiState[key]);\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(3) : null;\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(3) : null;\n    if (savedStr !== uiStr) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\nlet statusMessage = hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\";\nuiMessages.push({ payload: statusMessage });\n\nreturn uiMessages;",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "9b098540e6d2840a"
            ],
            [
                "12bfbc84acb5ad32"
            ],
            [
                "6fb46aae9a3ec635"
            ],
            [
                "c941f6019efd47cc"
            ],
            [
                "353c714438462baf"
            ],
            [
                "29a1bac547f76f3c"
            ],
            [
                "a0e4778855bd033b"
            ]
        ]
    },
    {
        "id": "ba6d7ecfa48898a4",
        "type": "function",
        "z": "581cd0ee506b12fb",
        "name": "Handle Redox2 UI Input",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\nlet uiState = global.get('uiState_redox2') || {};\nconst savedState = global.get('savedState_redox2') || {};\n\nconst savableVars = ['ai4p2h5koef', 'ai4p2h5konst', 'window_smusp2'];\n\nif (savableVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    let clampedValue = newValue;\n    if (varName === 'window_smusp2') {\n        if (clampedValue < 1) clampedValue = 1;\n        if (clampedValue > 1000) clampedValue = 1000;\n        clampedValue = Math.round(clampedValue);\n        if (global.get('window_smusp2') !== clampedValue) {\n            global.set('window_smusp2', clampedValue);\n            global.set('redox2_history', []); \n            node.log(`[UI_REDOX2_INPUT] Global 'window_smusp2' обновлен на: ${clampedValue}. История Redox2 сброшена.`);\n        }\n    } else if (varName === 'ai4p2h5koef' || varName === 'ai4p2h5konst') {\n        if (clampedValue < -100000) clampedValue = -100000;\n        if (clampedValue > 100000) clampedValue = 100000;\n        if (global.get(varName) !== clampedValue) {\n            global.set(varName, clampedValue);\n            node.log(`[UI_REDOX2_INPUT] Global '${varName}' обновлен на: ${clampedValue.toFixed(3)}`);\n        }\n    }\n    uiState[varName] = clampedValue;\n    global.set('uiState_redox2', uiState);\n} else {\n    node.warn(\"[UI_REDOX2_INPUT] Получено некорректное сообщение от UI: \" + JSON.stringify(msg));\n    return null;\n}\n\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    const savedValRaw = savedState.hasOwnProperty(key) ? savedState[key] : (key.includes('koef') ? 1.0 : (key.includes('konst') ? 0.0 : 10));\n    const uiValRaw = uiState.hasOwnProperty(key) ? uiState[key] : (key.includes('koef') ? 1.0 : (key.includes('konst') ? 0.0 : 10));\n    const savedNum = Number(savedValRaw);\n    const uiNum = Number(uiValRaw);\n    let precision = (key === 'window_smusp2') ? 0 : 3;\n    const savedStr = !isNaN(savedNum) ? savedNum.toFixed(precision) : String(savedValRaw);\n    const uiStr = !isNaN(uiNum) ? uiNum.toFixed(precision) : String(uiValRaw);\n    if (savedStr !== uiStr) {\n        hasUnsavedChanges = true; break;\n    }\n}\n\nlet statusMessage = hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\";\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "a0e4778855bd033b"
            ]
        ]
    },
    {
        "id": "b277676a75d166b6",
        "type": "link in",
        "z": "581cd0ee506b12fb",
        "name": "link in: update-redox2-status",
        "links": [
            "3036a640887c6c0f"
        ],
        "x": 1015,
        "y": 360,
        "wires": [
            [
                "a0e4778855bd033b"
            ]
        ]
    },
    {
        "id": "868fb649a33977aa",
        "type": "ui_button",
        "z": "581cd0ee506b12fb",
        "name": "Чтение Redox2 из файла",
        "group": "714d420805937ade",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение Redox2",
        "tooltip": "Прочитать параметры Redox2 из файла",
        "icon": "fa-download",
        "payload": "read_request",
        "payloadType": "str",
        "topic": "read_request_redox2",
        "topicType": "str",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "fa77c0825aa58d8a"
            ]
        ]
    },
    {
        "id": "fa77c0825aa58d8a",
        "type": "link out",
        "z": "581cd0ee506b12fb",
        "name": "link out: trigger-read-redox2",
        "links": [
            "1d83ce1bd0bd4b83"
        ],
        "x": 410,
        "y": 60,
        "wires": []
    },
    {
        "id": "47c90a4f37aa54e5",
        "type": "ui_button",
        "z": "581cd0ee506b12fb",
        "name": "Запись Redox2 в файл",
        "group": "714d420805937ade",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись Redox2",
        "tooltip": "Применить и сохранить параметры Redox2 в файл",
        "icon": "fa-upload",
        "payload": "write_request",
        "payloadType": "str",
        "topic": "write_request_redox2",
        "topicType": "str",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "05f10182f80f9af8"
            ]
        ]
    },
    {
        "id": "05f10182f80f9af8",
        "type": "link out",
        "z": "581cd0ee506b12fb",
        "name": "link out: trigger-save-redox2",
        "links": [
            "e6265335edd58a1e"
        ],
        "x": 410,
        "y": 120,
        "wires": []
    },
    {
        "id": "a0e4778855bd033b",
        "type": "ui_text",
        "z": "581cd0ee506b12fb",
        "group": "714d420805937ade",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус Redox2",
        "label": "Статус:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 780,
        "y": 480,
        "wires": []
    },
    {
        "id": "9b098540e6d2840a",
        "type": "ui_text",
        "z": "581cd0ee506b12fb",
        "group": "0ad4d1324f6a6e7e",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "ai4h5_display",
        "label": "Вход (ai4h5):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 630,
        "y": 100,
        "wires": []
    },
    {
        "id": "12bfbc84acb5ad32",
        "type": "ui_numeric",
        "z": "581cd0ee506b12fb",
        "name": "ai4p2h5koef",
        "label": "Коэфф. (ai4p2h5koef):",
        "group": "0ad4d1324f6a6e7e",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai4p2h5koef",
        "format": "{{msg.payload}}",
        "min": -100000,
        "max": 100000,
        "step": 0.001,
        "x": 660,
        "y": 160,
        "wires": [
            [
                "ba6d7ecfa48898a4"
            ]
        ]
    },
    {
        "id": "6fb46aae9a3ec635",
        "type": "ui_numeric",
        "z": "581cd0ee506b12fb",
        "name": "ai4p2h5konst",
        "label": "Конст. (ai4p2h5konst):",
        "group": "0ad4d1324f6a6e7e",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "ai4p2h5konst",
        "format": "{{msg.payload}}",
        "min": -100000,
        "max": 100000,
        "step": 0.001,
        "x": 660,
        "y": 200,
        "wires": [
            [
                "ba6d7ecfa48898a4"
            ]
        ]
    },
    {
        "id": "c941f6019efd47cc",
        "type": "ui_numeric",
        "z": "581cd0ee506b12fb",
        "name": "window_smusp2",
        "label": "Окно сглаж. (Redox2) (window_smusp2):",
        "tooltip": "",
        "group": "0ad4d1324f6a6e7e",
        "order": 4,
        "width": 6,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "window_smusp2",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": 1,
        "max": 1000,
        "step": 1,
        "className": "",
        "x": 690,
        "y": 260,
        "wires": [
            [
                "ba6d7ecfa48898a4"
            ]
        ]
    },
    {
        "id": "353c714438462baf",
        "type": "ui_text",
        "z": "581cd0ee506b12fb",
        "group": "0ad4d1324f6a6e7e",
        "order": 5,
        "width": 6,
        "height": 1,
        "name": "ai4p2h5_display",
        "label": "Redox2 (ai4p2h5):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "29a1bac547f76f3c",
        "type": "ui_text",
        "z": "581cd0ee506b12fb",
        "group": "0ad4d1324f6a6e7e",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "ai4p2h5smus_display",
        "label": "Redox2 (сглаж.) (ai4p2h5smus):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 700,
        "y": 360,
        "wires": []
    },
    {
        "id": "07c071b59c75628e",
        "type": "ui_chart",
        "z": "581cd0ee506b12fb",
        "name": "График Redox2",
        "group": "81c05338f8b2229b",
        "order": 1,
        "width": "12",
        "height": "8",
        "label": "Redox Потенциал 2",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff9896",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "x": 410,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "4eb6704e691ee3af",
        "type": "link in",
        "z": "581cd0ee506b12fb",
        "name": "link in: chart redox2 raw",
        "links": [
            "748eedb6825b7ec6"
        ],
        "x": 215,
        "y": 460,
        "wires": [
            [
                "7c3fcead1dc6a3e3"
            ]
        ]
    },
    {
        "id": "f6f3f83440a7bcfa",
        "type": "link in",
        "z": "581cd0ee506b12fb",
        "name": "link in: chart redox2 smus",
        "links": [
            "b6df3732717ddcc5"
        ],
        "x": 215,
        "y": 500,
        "wires": [
            [
                "54e5e13e4f779881"
            ]
        ]
    },
    {
        "id": "7c3fcead1dc6a3e3",
        "type": "rbe",
        "z": "581cd0ee506b12fb",
        "name": "Filter unchanged redox2_raw",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 375,
        "y": 460,
        "wires": [
            [
                "5fedddcc330529fd"
            ]
        ]
    },
    {
        "id": "54e5e13e4f779881",
        "type": "rbe",
        "z": "581cd0ee506b12fb",
        "name": "Filter unchanged redox2_smus",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 375,
        "y": 500,
        "wires": [
            [
                "5fedddcc330529fd"
            ]
        ]
    },
    {
        "id": "cda760583b7bdfee",
        "type": "link in",
        "z": "581cd0ee506b12fb",
        "name": "link in: Redox 2 charts toggle",
        "links": [
            "1392e3b2a6d737f4"
        ],
        "x": 120,
        "y": 40,
        "wires": [
            [
                "640d24fe141f211d"
            ]
        ]
    },
    {
        "id": "640d24fe141f211d",
        "type": "function",
        "z": "581cd0ee506b12fb",
        "name": "Управление графиками Redox 2",
        "func": "const enabled = msg.payload === true || msg.enabled === true;\nflow.set('redox2ChartsEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "07c071b59c75628e"
            ]
        ]
    },
    {
        "id": "f18a9ee7aa5226cf",
        "type": "inject",
        "z": "581cd0ee506b12fb",
        "name": "Redox 2 графики: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "redox2_charts_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "640d24fe141f211d"
            ]
        ]
    },
    {
        "id": "5fedddcc330529fd",
        "type": "function",
        "z": "581cd0ee506b12fb",
        "name": "Фильтр графика Redox 2",
        "func": "let enabled = flow.get('redox2ChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('redox2ChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 480,
        "wires": [
            [
                "07c071b59c75628e"
            ]
        ]
    },
    {
        "id": "1091f62cd3fa9352",
        "type": "link in",
        "z": "8c6eeff428328b9d",
        "name": "link in: step_complete (From Iteration)",
        "links": [
            "9b73230004d23f1e"
        ],
        "x": 155,
        "y": 140,
        "wires": [
            [
                "fe17eececa4de6a4"
            ]
        ]
    },
    {
        "id": "fe17eececa4de6a4",
        "type": "function",
        "z": "8c6eeff428328b9d",
        "name": "Calculate Redox2 & Smoothing",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\nif (msg.payload !== 5) { return null; }\nnode.log(\"[REDOX2_CALC] Step 5 detected, calculating Redox2...\");\n\n// Получаем входное значение и параметры\nconst ai4h5 = Number(g(\"ai4h5\") || 0);\nconst koef = Number(g(\"ai4p2h5koef\") || 1);\nconst konst = Number(g(\"ai4p2h5konst\") || 0);\nconst window_smusp2 = Math.max(1, Math.round(Number(g(\"window_smusp2\") || 10)));\nlet history = g('redox2_history') || [];\n\n// Рассчитываем \"сырое\" значение Redox2\nconst new_ai4p2h5 = ai4h5 * koef + konst;\ns(\"ai4p2h5\", new_ai4p2h5);\n\n// --- НАЧАЛО ИЗМЕНЕНИЙ ---\n// ФИЛЬТР ОТ НУЛЯ: Добавляем значение в историю, только если оно не равно нулю.\nif (new_ai4p2h5 !== 0) {\n    history.push(new_ai4p2h5);\n} else {\n    node.warn(`[REDOX2_CALC] Нулевое значение new_ai4p2h5 проигнорировано и не добавлено в историю.`);\n}\n// --- КОНЕЦ ИЗМЕНЕНИЙ ---\n\n// Обрезаем историю\nif (history.length > window_smusp2) { history.shift(); }\ns('redox2_history', history);\n\n// Считаем сумму и среднее\nlet sum = 0;\nfor (let val of history) { sum += val; }\n\n// Если история пуста, сглаженное значение будет null\nconst new_ai4p2h5smus = (history.length > 0) ? (sum / history.length) : null;\ns(\"ai4p2h5smus\", new_ai4p2h5smus);\n\n// Обновляем состояние UI\nlet uiState = g('uiState_redox2') || {};\nuiState['ai4h5'] = ai4h5;\nuiState['ai4p2h5'] = new_ai4p2h5;\nuiState['ai4p2h5smus'] = new_ai4p2h5smus;\ns('uiState_redox2', uiState);\n\nif (new_ai4p2h5smus !== null) {\n    node.log(`[REDOX2_CALC] Calculated: ai4p2h5=${new_ai4p2h5.toFixed(3)}, ai4p2h5smus=${new_ai4p2h5smus.toFixed(3)} based on ${history.length} values.`);\n}\n\n// Готовим сообщения для выходов\nconst msg_trigger_ui_update = { payload: true };\nconst msg_chart_raw = { topic: \"ai4p2h5\", payload: new_ai4p2h5 };\nconst msg_chart_smus = { topic: \"ai4p2h5smus\", payload: new_ai4p2h5smus };\n\nreturn [msg_trigger_ui_update, msg_chart_raw, msg_chart_smus];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "afe2a8a8eaf9cc43"
            ],
            [
                "748eedb6825b7ec6"
            ],
            [
                "b6df3732717ddcc5"
            ]
        ]
    },
    {
        "id": "afe2a8a8eaf9cc43",
        "type": "link out",
        "z": "8c6eeff428328b9d",
        "name": "link out: trigger redox2 ui",
        "links": [
            "9f400a8399ef39f0"
        ],
        "x": 630,
        "y": 100,
        "wires": []
    },
    {
        "id": "748eedb6825b7ec6",
        "type": "link out",
        "z": "8c6eeff428328b9d",
        "name": "link out: chart redox2 raw",
        "links": [
            "4eb6704e691ee3af"
        ],
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "b6df3732717ddcc5",
        "type": "link out",
        "z": "8c6eeff428328b9d",
        "name": "link out: chart redox2 smus",
        "links": [
            "f6f3f83440a7bcfa"
        ],
        "x": 630,
        "y": 180,
        "wires": []
    },
    {
        "id": "e6265335edd58a1e",
        "type": "link in",
        "z": "319252b7e0410b2b",
        "name": "link in: trigger-save-redox2",
        "links": [
            "05f10182f80f9af8",
            "923d1b5993c3174f"
        ],
        "x": 195,
        "y": 100,
        "wires": [
            [
                "5916d7a63e48ef03"
            ]
        ]
    },
    {
        "id": "5916d7a63e48ef03",
        "type": "function",
        "z": "319252b7e0410b2b",
        "name": "Apply & Save Redox2",
        "func": "const uiState = global.get('uiState_redox2') || {};\nconst defaultVars = { ai4p2h5koef: 1.0, ai4p2h5konst: 0.0, window_smusp2: 10 };\nconst savableVars = ['ai4p2h5koef', 'ai4p2h5konst', 'window_smusp2'];\nlet stateToSave = {};\nlet globalsChanged = false;\n\nfor (const key of savableVars) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : defaultVars[key];\n    const numValue = Number(valueToSet);\n    if (isNaN(numValue)) {\n        node.warn(`[REDOX2_SAVE] Invalid UI value for ${key}: ${valueToSet}. Using default.`);\n        valueToSet = defaultVars[key];\n    } else {\n        valueToSet = numValue;\n        if (key === 'window_smusp2') {\n             if (valueToSet < 1) valueToSet = 1; if (valueToSet > 1000) valueToSet = 1000; valueToSet = Math.round(valueToSet);\n        } else {\n             if (valueToSet < -100000) valueToSet = -100000; if (valueToSet > 100000) valueToSet = 100000;\n        }\n    }\n    stateToSave[key] = valueToSet;\n    if (global.get(key) !== valueToSet) { global.set(key, valueToSet); globalsChanged = true; }\n    uiState[key] = valueToSet; // Update uiState with validated/clamped value\n}\n\nlet fullSavedState = { ...(global.get('savedState_redox2') || {}), ...stateToSave };\nconst nonSavableVars = ['ai4h5', 'ai4p2h5', 'ai4p2h5smus'];\nfor(const key of nonSavableVars) { fullSavedState[key] = global.get(key) || defaultVars[key]; }\nglobal.set('savedState_redox2', fullSavedState);\nglobal.set('uiState_redox2', { ...uiState, ...fullSavedState});\n\nif (globalsChanged) { node.log(\"[WRITE_BTN_REDOX2] Параметры Redox2 обновлены и сохранены.\"); }\nelse { node.log(\"[WRITE_BTN_REDOX2] Параметры Redox2 не требовали обновления.\"); }\n\nconst filePayload = { payload: stateToSave };\nconst statusMessage = { payload: \"<font color='green'>Параметры Redox2 сохранены</font>\" };\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "dba7903ec90a62ca"
            ],
            [
                "3036a640887c6c0f"
            ]
        ]
    },
    {
        "id": "dba7903ec90a62ca",
        "type": "json",
        "z": "319252b7e0410b2b",
        "name": "Объект в JSON (Redox2)",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "9ee3c2fbe1682a34"
            ]
        ]
    },
    {
        "id": "9ee3c2fbe1682a34",
        "type": "file",
        "z": "319252b7e0410b2b",
        "name": "Сохранить файл Redox2",
        "filename": "/home/root/.node-red/save/redox_variables2.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "2253b1152225153e"
            ]
        ]
    },
    {
        "id": "2253b1152225153e",
        "type": "ui_toast",
        "z": "319252b7e0410b2b",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение Redox2",
        "name": "Уведомление Redox2",
        "x": 460,
        "y": 340,
        "wires": []
    },
    {
        "id": "3036a640887c6c0f",
        "type": "link out",
        "z": "319252b7e0410b2b",
        "name": "link out: update-redox2-status",
        "links": [
            "b277676a75d166b6"
        ],
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "574001dcc2713387",
        "type": "modbus-server",
        "z": "4f802f288b4a6b48",
        "name": "ModbusTCPServerForWeintek",
        "logEnabled": true,
        "hostname": "192.168.0.214",
        "serverPort": "502",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": "0",
        "holdingBufferSize": "1200",
        "inputBufferSize": "0",
        "discreteBufferSize": "0",
        "showErrors": true,
        "x": 570,
        "y": 80,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "a34bc939b318f9f9",
        "type": "inject",
        "z": "4f802f288b4a6b48",
        "name": "Инициализация HR Буфера 1c",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "214127ee77fa16f1"
            ]
        ]
    },
    {
        "id": "214127ee77fa16f1",
        "type": "function",
        "z": "4f802f288b4a6b48",
        "name": "Создание и инициализация HR 1200",
        "func": "const hrContextVar = 'holdingregisters';\nconst numHoldingRegisters = 1200; // Увеличено для покрытия адресов до 710+ \n\nlet hrBuffer = flow.get(hrContextVar) || Buffer.alloc(numHoldingRegisters * 2);\n\nflow.set(hrContextVar, hrBuffer);\nnode.status({text: `Initialized ${numHoldingRegisters} holding registers`});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b3a06e17727d0f9f",
        "type": "inject",
        "z": "4f802f288b4a6b48",
        "name": "Цикл обновления Global->Modbus (10c 2сек)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "8b6ca52d0dcbce33"
            ]
        ]
    },
    {
        "id": "634c520c332dfa39",
        "type": "function",
        "z": "4f802f288b4a6b48",
        "name": "Обновление Global в Modbus HR (Основные адреса)",
        "func": "// Карта переменных для чтения HMI (основные адреса)\n\n// Карта переменных для чтения HMI (основные адреса)\nconst variableMap = [ // Расчетные koef0-7, konst0-7\n    { globalName: \"koef0\", modbusAddress: 0 }, { globalName: \"koef1\", modbusAddress: 2 },\n    { globalName: \"koef2\", modbusAddress: 4 }, { globalName: \"koef3\", modbusAddress: 6 },\n    { globalName: \"koef4\", modbusAddress: 8 }, { globalName: \"koef5\", modbusAddress: 10 },\n    { globalName: \"koef6\", modbusAddress: 12 }, { globalName: \"koef7\", modbusAddress: 14 },\n    { globalName: \"konst0\", modbusAddress: 16 }, { globalName: \"konst1\", modbusAddress: 18 },\n    { globalName: \"konst2\", modbusAddress: 20 }, { globalName: \"konst3\", modbusAddress: 22 },\n    { globalName: \"konst4\", modbusAddress: 24 }, { globalName: \"konst5\", modbusAddress: 26 },\n    { globalName: \"konst6\", modbusAddress: 28 }, { globalName: \"konst7\", modbusAddress: 30 },\n    // Параметры итераций n1-pk5\n    { globalName: \"n1\", modbusAddress: 32 }, { globalName: \"k1\", modbusAddress: 42 },\n    { globalName: \"h1\", modbusAddress: 52 }, { globalName: \"p1\", modbusAddress: 62 },\n    { globalName: \"pk1\", modbusAddress: 72 }, { globalName: \"n2\", modbusAddress: 34 },\n    { globalName: \"k2\", modbusAddress: 44 }, { globalName: \"h2\", modbusAddress: 54 },\n    { globalName: \"p2\", modbusAddress: 64 }, { globalName: \"pk2\", modbusAddress: 74 },\n    { globalName: \"n3\", modbusAddress: 36 }, { globalName: \"k3\", modbusAddress: 46 },\n    { globalName: \"h3\", modbusAddress: 56 }, { globalName: \"p3\", modbusAddress: 66 },\n    { globalName: \"pk3\", modbusAddress: 76 }, { globalName: \"n4\", modbusAddress: 38 },\n    { globalName: \"k4\", modbusAddress: 48 }, { globalName: \"h4\", modbusAddress: 58 },\n    { globalName: \"p4\", modbusAddress: 68 }, { globalName: \"pk4\", modbusAddress: 78 },\n    { globalName: \"n5\", modbusAddress: 40 }, { globalName: \"k5\", modbusAddress: 50 },\n    { globalName: \"h5\", modbusAddress: 60 }, { globalName: \"p5\", modbusAddress: 70 },\n    { globalName: \"pk5\", modbusAddress: 80 },\n    // Параметры PH\n    { globalName: \"ai2t1h1koef1\", modbusAddress: 82 }, { globalName: \"ai2t1h1konst1\", modbusAddress: 84 },\n    { globalName: \"ai2t1t2h1h2koef\", modbusAddress: 86 }, { globalName: \"ai2t1t2h1h2konst\", modbusAddress: 88 },\n    { globalName: \"ai2t2h2koef2\", modbusAddress: 90 }, { globalName: \"ai2t2h2konst2\", modbusAddress: 92 },\n    { globalName: \"phkonstamm\", modbusAddress: 94 }, { globalName: \"phkonstkisl\", modbusAddress: 96 },\n    { globalName: \"phminamm\", modbusAddress: 98 }, { globalName: \"phminkisl\", modbusAddress: 100 },\n    { globalName: \"phneitr\", modbusAddress: 102 },\n    // Параметры Redox\n    { globalName: \"ai3ph5koef\", modbusAddress: 104 }, { globalName: \"ai3ph5konst\", modbusAddress: 106 },\n    // Окна сглаживания\n    { globalName: \"window_smus\", modbusAddress: 108 }, // для PH/концентраций\n    { globalName: \"window_smusp\", modbusAddress: 110 }, // для Redox (с 'p')\n    // Уставки AO LC Config\n    { globalName: \"ao_lc_key_ch2\", modbusAddress: 112 },\n    { globalName: \"ao_lc_k_ch2\", modbusAddress: 114 },\n    { globalName: \"ao_lc_c_ch2\", modbusAddress: 116 },\n    { globalName: \"ao_lc_key_ch3\", modbusAddress: 118 },\n    { globalName: \"ao_lc_k_ch3\", modbusAddress: 120 },\n    { globalName: \"ao_lc_c_ch3\", modbusAddress: 122 },\n    { globalName: \"ao_lc_key_ch4\", modbusAddress: 124 },\n    { globalName: \"ao_lc_k_ch4\", modbusAddress: 126 },\n    { globalName: \"ao_lc_c_ch4\", modbusAddress: 128 },\n    // Уставки Redox2\n    { globalName: \"ai4p2h5koef\", modbusAddress: 130 },\n    { globalName: \"ai4p2h5konst\", modbusAddress: 132 },\n    { globalName: \"window_smusp2\", modbusAddress: 134 },\n    // --- ДОБАВЛЕНО: Уставки и параметры ПИД-регулятора ---\n    { globalName: \"pid_setpoint\", modbusAddress: 136 },\n    { globalName: \"pid_prop_band\", modbusAddress: 138 },\n    { globalName: \"pid_t_integral\", modbusAddress: 140 },\n    { globalName: \"pid_t_derivative\", modbusAddress: 142 },\n    { globalName: \"pid_max_interval\", modbusAddress: 144 },\n    { globalName: \"pid_smooth_factor\", modbusAddress: 146 },\n    { globalName: \"pid_enable\", modbusAddress: 148 },          // 0 или 1\n    { globalName: \"pid_disabled_op\", modbusAddress: 150 },\n    { globalName: \"pid_pv_select_key\", modbusAddress: 152 },  // Код выбранной PV\n    { globalName: \"pid_valve_is_NC\", modbusAddress: 154 },    // 0-NO, 1-NC\n    // Версия проекта (float DDMMYYYYHHmm)\n    { globalName: \"VER\", modbusAddress: 156 },\n\n    // --- Измеренные/Расчетные значения (Начинаются с адреса 400) ---\n    // Измеренные значения aiXhY\n    { globalName: \"ai1h1\", modbusAddress: 400 }, { globalName: \"ai1h2\", modbusAddress: 402 },\n    { globalName: \"ai1h3\", modbusAddress: 404 }, { globalName: \"ai1h4\", modbusAddress: 406 },\n    { globalName: \"ai1h5\", modbusAddress: 408 },\n    { globalName: \"ai2h1\", modbusAddress: 410 }, { globalName: \"ai2h2\", modbusAddress: 412 },\n    { globalName: \"ai2h3\", modbusAddress: 414 }, { globalName: \"ai2h4\", modbusAddress: 416 },\n    { globalName: \"ai2h5\", modbusAddress: 418 },\n    { globalName: \"ai3h1\", modbusAddress: 420 }, { globalName: \"ai3h2\", modbusAddress: 422 },\n    { globalName: \"ai3h3\", modbusAddress: 424 }, { globalName: \"ai3h4\", modbusAddress: 426 },\n    { globalName: \"ai3h5\", modbusAddress: 428 }, // Вход для Redox 1\n    { globalName: \"ai4h1\", modbusAddress: 430 }, { globalName: \"ai4h2\", modbusAddress: 432 },\n    { globalName: \"ai4h3\", modbusAddress: 434 }, { globalName: \"ai4h4\", modbusAddress: 436 },\n    { globalName: \"ai4h5\", modbusAddress: 438 }, // Вход для Redox 2\n    { globalName: \"ai5h1\", modbusAddress: 440 }, { globalName: \"ai5h2\", modbusAddress: 442 },\n    { globalName: \"ai5h3\", modbusAddress: 444 }, { globalName: \"ai5h4\", modbusAddress: 446 },\n    { globalName: \"ai5h5\", modbusAddress: 448 },\n    { globalName: \"ai6h1\", modbusAddress: 450 }, { globalName: \"ai6h2\", modbusAddress: 452 },\n    { globalName: \"ai6h3\", modbusAddress: 454 }, { globalName: \"ai6h4\", modbusAddress: 456 },\n    { globalName: \"ai6h5\", modbusAddress: 458 },\n    { globalName: \"ai7h1\", modbusAddress: 460 }, { globalName: \"ai7h2\", modbusAddress: 462 },\n    { globalName: \"ai7h3\", modbusAddress: 464 }, { globalName: \"ai7h4\", modbusAddress: 466 },\n    { globalName: \"ai7h5\", modbusAddress: 468 },\n    { globalName: \"ai8h1\", modbusAddress: 470 }, { globalName: \"ai8h2\", modbusAddress: 472 },\n    { globalName: \"ai8h3\", modbusAddress: 474 }, { globalName: \"ai8h4\", modbusAddress: 476 },\n    { globalName: \"ai8h5\", modbusAddress: 478 },\n    // Другие переменные итерации\n    { globalName: \"nh\", modbusAddress: 480 },\n    { globalName: \"x\", modbusAddress: 482 },\n\n    { globalName: \"ai2t1h1\", modbusAddress: 484 },\n    { globalName: \"ai2t1t2h1h2\", modbusAddress: 486 },\n    { globalName: \"ai2t2h2\", modbusAddress: 488 },\n    \n    // Рассчитанные значения PH и концентраций\n    { globalName: \"cammkisl\", modbusAddress: 490 },\n    { globalName: \"camm\", modbusAddress: 492 },\n    { globalName: \"ckisl\", modbusAddress: 494 },\n    { globalName: \"cammkisl_smus\", modbusAddress: 496 },\n    { globalName: \"ph\", modbusAddress: 498 },\n    // Рассчитанные Redox\n    { globalName: \"ai3ph5\", modbusAddress: 500 },\n    { globalName: \"ai3ph5smus\", modbusAddress: 502 },\n    // Рассчитанные токи AO LC\n    { globalName: \"ao_lc_calculated_mA_ch2\", modbusAddress: 504 },\n    { globalName: \"ao_lc_calculated_mA_ch3\", modbusAddress: 506 },\n    { globalName: \"ao_lc_calculated_mA_ch4\", modbusAddress: 508 },\n    // Рассчитанные Redox2\n    { globalName: \"ai4p2h5\", modbusAddress: 510 },\n    { globalName: \"ai4p2h5smus\", modbusAddress: 512 },\n    // --- ДОБАВЛЕНО: Измеряемые/расчетные значения ПИД ---\n    { globalName: \"pid_current_pv_value\", modbusAddress: 514 },\n    { globalName: \"pid_output_actual\", modbusAddress: 516 },\n    { globalName: \"pid_valve_command_final\", modbusAddress: 518 },\n     { globalName: \"pid_integral_persist\", modbusAddress: 520}// Сохраненный интеграл\n];\n\n\n\nlet updatesMade = 0;\nlet errorsCount = 0;\n\nvariableMap.forEach(item => {\n    const floatValue = global.get(item.globalName);\n    let msgForServer = {}; \n\n    if (typeof floatValue === 'number' && !isNaN(floatValue)) {\n        const byteBuffer = Buffer.alloc(4);\n        byteBuffer.writeFloatBE(floatValue, 0); \n        const word_AB = byteBuffer.readUInt16BE(0);\n        const word_CD = byteBuffer.readUInt16BE(2);\n        byteBuffer.writeUInt16BE(word_CD, 0);\n        byteBuffer.writeUInt16BE(word_AB, 2);\n        const valueAsByteArray_CDAB = Array.from(byteBuffer);\n\n        msgForServer.payload = {\n            'value': valueAsByteArray_CDAB,\n            'register': 'holding',\n            'address': item.modbusAddress,\n            'disableMsgOutput': 1\n        };\n        node.send(msgForServer);\n        updatesMade++;\n    } else {\n        node.warn(`Не удалось получить числовое значение для global.${item.globalName}. Получено: ${JSON.stringify(floatValue)}`);\n        errorsCount++;\n    }\n});\n\nif (errorsCount > 0) {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Обновлено ${updatesMade} из ${variableMap.length} (основные). Ошибок чтения global: ${errorsCount}` });\n} else {\n    node.status({ fill: \"green\", shape: \"dot\", text: `Обновлено ${updatesMade} переменных в Modbus (основные)` });\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 240,
        "wires": [
            [
                "574001dcc2713387"
            ]
        ]
    },
    {
        "id": "a96b7ba188656685",
        "type": "split",
        "z": "4f802f288b4a6b48",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "x": 830,
        "y": 60,
        "wires": [
            [
                "12dab302181b9f02"
            ]
        ]
    },
    {
        "id": "12dab302181b9f02",
        "type": "modbus-flex-write",
        "z": "4f802f288b4a6b48",
        "name": "Acknowledge New Setpoint",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "eb35cce35ef3368f",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1060,
        "y": 60,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f4ae9155e43f3f5a",
        "type": "function",
        "z": "4f802f288b4a6b48",
        "name": "Process New Setpoints & Ack",
        "func": "// Карта переменных-уставок, которые можно изменять с HMI\nconst setpointsToManage = [\n    { globalName: \"koef0\", readAddr: 0, newWriteAddr: 1000 },\n    { globalName: \"koef1\", readAddr: 2, newWriteAddr: 1002 },\n    { globalName: \"koef2\", readAddr: 4, newWriteAddr: 1004 },\n    { globalName: \"koef3\", readAddr: 6, newWriteAddr: 1006 },\n    { globalName: \"koef4\", readAddr: 8, newWriteAddr: 1008 },\n    { globalName: \"koef5\", readAddr: 10, newWriteAddr: 1010 },\n    { globalName: \"koef6\", readAddr: 12, newWriteAddr: 1012 },\n    { globalName: \"koef7\", readAddr: 14, newWriteAddr: 1014 },\n    { globalName: \"konst0\", readAddr: 16, newWriteAddr: 1016 },\n    { globalName: \"konst1\", readAddr: 18, newWriteAddr: 1018 },\n    { globalName: \"konst2\", readAddr: 20, newWriteAddr: 1020 },\n    { globalName: \"konst3\", readAddr: 22, newWriteAddr: 1022 },\n    { globalName: \"konst4\", readAddr: 24, newWriteAddr: 1024 },\n    { globalName: \"konst5\", readAddr: 26, newWriteAddr: 1026 },\n    { globalName: \"konst6\", readAddr: 28, newWriteAddr: 1028 },\n    { globalName: \"konst7\", readAddr: 30, newWriteAddr: 1030 },\n    { globalName: \"n1\", readAddr: 32, newWriteAddr: 1032 },\n    { globalName: \"n2\", readAddr: 34, newWriteAddr: 1034 },\n    { globalName: \"n3\", readAddr: 36, newWriteAddr: 1036 },\n    { globalName: \"n4\", readAddr: 38, newWriteAddr: 1038 },\n    { globalName: \"n5\", readAddr: 40, newWriteAddr: 1040 },\n    { globalName: \"k1\", readAddr: 42, newWriteAddr: 1042 },\n    { globalName: \"k2\", readAddr: 44, newWriteAddr: 1044 },\n    { globalName: \"k3\", readAddr: 46, newWriteAddr: 1046 },\n    { globalName: \"k4\", readAddr: 48, newWriteAddr: 1048 },\n    { globalName: \"k5\", readAddr: 50, newWriteAddr: 1050 },\n    { globalName: \"h1\", readAddr: 52, newWriteAddr: 1052 },\n    { globalName: \"h2\", readAddr: 54, newWriteAddr: 1054 },\n    { globalName: \"h3\", readAddr: 56, newWriteAddr: 1056 },\n    { globalName: \"h4\", readAddr: 58, newWriteAddr: 1058 },\n    { globalName: \"h5\", readAddr: 60, newWriteAddr: 1060 },\n    { globalName: \"p1\", readAddr: 62, newWriteAddr: 1062 },\n    { globalName: \"p2\", readAddr: 64, newWriteAddr: 1064 },\n    { globalName: \"p3\", readAddr: 66, newWriteAddr: 1066 },\n    { globalName: \"p4\", readAddr: 68, newWriteAddr: 1068 },\n    { globalName: \"p5\", readAddr: 70, newWriteAddr: 1070 },\n    { globalName: \"pk1\", readAddr: 72, newWriteAddr: 1072 },\n    { globalName: \"pk2\", readAddr: 74, newWriteAddr: 1074 },\n    { globalName: \"pk3\", readAddr: 76, newWriteAddr: 1076 },\n    { globalName: \"pk4\", readAddr: 78, newWriteAddr: 1078 },\n    { globalName: \"pk5\", readAddr: 80, newWriteAddr: 1080 },\n    { globalName: \"ai2t1h1koef1\", readAddr: 82, newWriteAddr: 1082 },\n    { globalName: \"ai2t1h1konst1\", readAddr: 84, newWriteAddr: 1084 },\n    { globalName: \"ai2t1t2h1h2koef\", readAddr: 86, newWriteAddr: 1086 },\n    { globalName: \"ai2t1t2h1h2konst\", readAddr: 88, newWriteAddr: 1088 },\n    { globalName: \"ai2t2h2koef2\", readAddr: 90, newWriteAddr: 1090 },\n    { globalName: \"ai2t2h2konst2\", readAddr: 92, newWriteAddr: 1092 },\n    { globalName: \"phkonstamm\", readAddr: 94, newWriteAddr: 1094 },\n    { globalName: \"phkonstkisl\", readAddr: 96, newWriteAddr: 1096 },\n    { globalName: \"phminamm\", readAddr: 98, newWriteAddr: 1098 },\n    { globalName: \"phminkisl\", readAddr: 100, newWriteAddr: 1100 },\n    { globalName: \"phneitr\", readAddr: 102, newWriteAddr: 1102 },\n    { globalName: \"ai3ph5koef\", readAddr: 104, newWriteAddr: 1104 },\n    { globalName: \"ai3ph5konst\", readAddr: 106, newWriteAddr: 1106 },\n    { globalName: \"window_smus\", readAddr: 108, newWriteAddr: 1108 },\n    { globalName: \"window_smusp\", readAddr: 110, newWriteAddr: 1110 },\n    { globalName: \"ao_lc_key_ch2\", readAddr: 112, newWriteAddr: 1112 },\n    { globalName: \"ao_lc_k_ch2\", readAddr: 114, newWriteAddr: 1114 },\n    { globalName: \"ao_lc_c_ch2\", readAddr: 116, newWriteAddr: 1116 },\n    { globalName: \"ao_lc_key_ch3\", readAddr: 118, newWriteAddr: 1118 },\n    { globalName: \"ao_lc_k_ch3\", readAddr: 120, newWriteAddr: 1120 },\n    { globalName: \"ao_lc_c_ch3\", readAddr: 122, newWriteAddr: 1122 },\n    { globalName: \"ao_lc_key_ch4\", readAddr: 124, newWriteAddr: 1124 },\n    { globalName: \"ao_lc_k_ch4\", readAddr: 126, newWriteAddr: 1126 },\n    { globalName: \"ao_lc_c_ch4\", readAddr: 128, newWriteAddr: 1128 },\n    { globalName: \"ai4p2h5koef\", readAddr: 130, newWriteAddr: 1130 },\n    { globalName: \"ai4p2h5konst\", readAddr: 132, newWriteAddr: 1132 },\n    { globalName: \"window_smusp2\", readAddr: 134, newWriteAddr: 1134 },\n    { globalName: \"pid_setpoint\", readAddr: 136, newWriteAddr: 1136 },\n    { globalName: \"pid_prop_band\", readAddr: 138, newWriteAddr: 1138 },\n    { globalName: \"pid_t_integral\", readAddr: 140, newWriteAddr: 1140 },\n    { globalName: \"pid_t_derivative\", readAddr: 142, newWriteAddr: 1142 },\n    { globalName: \"pid_max_interval\", readAddr: 144, newWriteAddr: 1144 },\n    { globalName: \"pid_smooth_factor\", readAddr: 146, newWriteAddr: 1146 },\n    { globalName: \"pid_enable\", readAddr: 148, newWriteAddr: 1148 },\n    { globalName: \"pid_disabled_op\", readAddr: 150, newWriteAddr: 1150 },\n    { globalName: \"pid_pv_select_key\", readAddr: 152, newWriteAddr: 1152 },\n    { globalName: \"pid_valve_is_NC\", readAddr: 154, newWriteAddr: 1154 }\n];\n\nconst polledRegisters = msg.payload;\nlet messagesToModbusServer = [];\nlet changesMadeCount = 0;\n\nlet triggerAllVarsUI = false; let triggerCalcVarsUI = false; let triggerPhVarsUI = false;\nlet triggerRedoxVarsUI = false; let triggerAOLCVarsUI = false; let triggerRedox2VarsUI = false;\nlet triggerPidConfigUI = false;\n\nlet triggerAllVarsSave = false; let triggerCalcVarsSave = false; let triggerPhVarsSave = false;\nlet triggerRedoxVarsSave = false; let triggerAOLCVarsSave = false; let triggerRedox2VarsSave = false;\nlet triggerPidConfigSave = false;\n\nif (!Array.isArray(polledRegisters) || polledRegisters.length < 156) {\n    node.warn(`Опрос \\\"Новых уставок\\\": получено недостаточно регистров. Ожидается >= 156, получено ${polledRegisters.length}.`);\n    return null;\n}\n\nfor (let i = 0; i < setpointsToManage.length; i++) {\n    const sp = setpointsToManage[i];\n    const contextKeyLastPolled = `last_polled_val_at_${sp.newWriteAddr}`;\n    const baseIndexInPolledData = sp.newWriteAddr - 1000; // Используем базовый адрес 1000 для уставок\n\n    if (baseIndexInPolledData < 0 || (baseIndexInPolledData + 1) >= polledRegisters.length) {\n        node.warn(`Ошибка индексации для ${sp.globalName} (newWriteAddr: ${sp.newWriteAddr}, baseIndex: ${baseIndexInPolledData}). Длина polledRegisters: ${polledRegisters.length}`);\n        continue;\n    }\n\n    const word_CD_fromPoll = polledRegisters[baseIndexInPolledData];\n    const word_AB_fromPoll = polledRegisters[baseIndexInPolledData + 1];\n\n    const receivedBufferCDAB = Buffer.alloc(4);\n    receivedBufferCDAB.writeUInt16BE(word_CD_fromPoll, 0);\n    receivedBufferCDAB.writeUInt16BE(word_AB_fromPoll, 2);\n\n    const reorderedBufferABCD = Buffer.alloc(4);\n    reorderedBufferABCD.writeUInt16BE(word_AB_fromPoll, 0);\n    reorderedBufferABCD.writeUInt16BE(word_CD_fromPoll, 2);\n    const newDesiredValueFloat = reorderedBufferABCD.readFloatBE(0);\n\n    let currentGlobalValue = global.get(sp.globalName);\n    if (typeof currentGlobalValue !== 'number' || isNaN(currentGlobalValue)) {\n        if (['pid_enable', 'pid_valve_is_NC', 'pid_pv_select_key'].includes(sp.globalName)) {\n            currentGlobalValue = 0;\n        } else {\n            currentGlobalValue = 0.0;\n        }\n    }\n\n    let lastPolledValueFloat = flow.get(contextKeyLastPolled);\n    if (typeof lastPolledValueFloat !== 'number' || isNaN(lastPolledValueFloat)) {\n        lastPolledValueFloat = newDesiredValueFloat;\n        flow.set(contextKeyLastPolled, lastPolledValueFloat);\n    }\n\n    if (Math.abs(newDesiredValueFloat - lastPolledValueFloat) > 0.00001) {\n        node.log(`Обнаружено новое значение ${newDesiredValueFloat.toFixed(3)} для ${sp.globalName} (адрес ${sp.newWriteAddr}). Предыдущее опрошенное: ${lastPolledValueFloat.toFixed(3)}`);\n\n        let valueToSetGlobal = newDesiredValueFloat;\n        if (['pid_enable', 'pid_valve_is_NC'].includes(sp.globalName)) {\n            valueToSetGlobal = Math.round(newDesiredValueFloat) === 1 ? 1 : 0;\n        } else if (['pid_t_integral', 'pid_t_derivative', 'pid_max_interval', 'pid_pv_select_key', 'window_smus', 'window_smusp', 'window_smusp2'].includes(sp.globalName) || sp.globalName.startsWith('ao_lc_key_ch')) {\n            valueToSetGlobal = Math.round(newDesiredValueFloat);\n        }\n\n        if (Math.abs(valueToSetGlobal - currentGlobalValue) > 0.00001 || currentGlobalValue !== valueToSetGlobal) {\n            global.set(sp.globalName, valueToSetGlobal);\n            node.log(`Глобальная переменная ${sp.globalName} обновлена на: ${valueToSetGlobal}`);\n            changesMadeCount++;\n\n            // --- ДОБАВЛЕНО: Логика сброса истории при изменении окна сглаживания с HMI ---\n            if (sp.globalName === 'window_smusp') {\n                global.set('redox_history', []);\n                node.log(`[HMI_INPUT] История Redox (redox_history) сброшена.`);\n            } else if (sp.globalName === 'window_smusp2') {\n                global.set('redox2_history', []);\n                node.log(`[HMI_INPUT] История Redox2 (redox2_history) сброшена.`);\n            } else if (sp.globalName === 'window_smus') {\n                global.set('cammkisl_history', []);\n                node.log(`[HMI_INPUT] История PH/концентраций (cammkisl_history) сброшена.`);\n            }\n            // --- КОНЕЦ ДОБАВЛЕННОГО БЛОКА ---\n\n            let uiStateAll = global.get('uiStateAll') || {};\n            let uiStateCalc = global.get('uiStateCalc') || {};\n            let uiStatePh = global.get('uiState_ph') || {};\n            let uiStateRedox = global.get('uiState_redox') || {};\n            let uiStateAOLC = global.get('uiState_aolc') || {};\n            let uiStateRedox2 = global.get('uiState_redox2') || {};\n            let uiStatePidConfig = global.get('uiState_pidconfig') || {};\n\n            if (['n1', 'k1', 'h1', 'p1', 'pk1', 'n2', 'k2', 'h2', 'p2', 'pk2', 'n3', 'k3', 'h3', 'p3', 'pk3', 'n4', 'k4', 'h4', 'p4', 'pk4', 'n5', 'k5', 'h5', 'p5', 'pk5'].includes(sp.globalName)) {\n                triggerAllVarsUI = true; uiStateAll[sp.globalName] = valueToSetGlobal; global.set('uiStateAll', uiStateAll); triggerAllVarsSave = true;\n            } else if (['koef0', 'koef1', 'koef2', 'koef3', 'koef4', 'koef5', 'koef6', 'koef7', 'konst0', 'konst1', 'konst2', 'konst3', 'konst4', 'konst5', 'konst6', 'konst7'].includes(sp.globalName)) {\n                triggerCalcVarsUI = true; uiStateCalc[sp.globalName] = valueToSetGlobal; global.set('uiStateCalc', uiStateCalc); triggerCalcVarsSave = true;\n            } else if (['ai2t1h1koef1', 'ai2t1h1konst1', 'ai2t1t2h1h2koef', 'ai2t1t2h1h2konst', 'ai2t2h2koef2', 'ai2t2h2konst2', 'phkonstamm', 'phkonstkisl', 'phminamm', 'phminkisl', 'phneitr', 'window_smus'].includes(sp.globalName)) {\n                triggerPhVarsUI = true; uiStatePh[sp.globalName] = valueToSetGlobal; global.set('uiState_ph', uiStatePh); triggerPhVarsSave = true;\n            } else if (['ai3ph5koef', 'ai3ph5konst', 'window_smusp'].includes(sp.globalName)) {\n                triggerRedoxVarsUI = true; uiStateRedox[sp.globalName] = valueToSetGlobal; global.set('uiState_redox', uiStateRedox); triggerRedoxVarsSave = true;\n            } else if (['ao_lc_key_ch2', 'ao_lc_k_ch2', 'ao_lc_c_ch2', 'ao_lc_key_ch3', 'ao_lc_k_ch3', 'ao_lc_c_ch3', 'ao_lc_key_ch4', 'ao_lc_k_ch4', 'ao_lc_c_ch4'].includes(sp.globalName)) {\n                triggerAOLCVarsUI = true; uiStateAOLC[sp.globalName] = valueToSetGlobal; global.set('uiState_aolc', uiStateAOLC); triggerAOLCVarsSave = true;\n            } else if (['ai4p2h5koef', 'ai4p2h5konst', 'window_smusp2'].includes(sp.globalName)) {\n                triggerRedox2VarsUI = true; uiStateRedox2[sp.globalName] = valueToSetGlobal; global.set('uiState_redox2', uiStateRedox2); triggerRedox2VarsSave = true;\n            } else if (['pid_setpoint', 'pid_prop_band', 'pid_t_integral', 'pid_t_derivative', 'pid_max_interval', 'pid_smooth_factor', 'pid_enable', 'pid_disabled_op', 'pid_pv_select_key', 'pid_valve_is_NC'].includes(sp.globalName)) {\n                triggerPidConfigUI = true; uiStatePidConfig[sp.globalName] = valueToSetGlobal; global.set('uiState_pidconfig', uiStatePidConfig); triggerPidConfigSave = true;\n            }\n        }\n        messagesToModbusServer.push({\n            payload: { value: [word_CD_fromPoll, word_AB_fromPoll], fc: 16, unitid: 1, address: sp.newWriteAddr, quantity: 2 }\n        });\n        flow.set(contextKeyLastPolled, newDesiredValueFloat);\n    }\n}\n\nlet modbusAcks = (messagesToModbusServer.length > 0) ? messagesToModbusServer : null;\nlet msgAllUI = null, msgCalcUI = null, msgPhUI = null, msgRedoxUI = null, msgAOLCUI = null, msgRedox2UI = null, msgPidConfigUI = null;\nlet msgAllSave = null, msgCalcSave = null, msgPhSave = null, msgRedoxSave = null, msgAOLCSave = null, msgRedox2Save = null, msgPidConfigSave = null;\n\nif (changesMadeCount > 0) {\n    const uiTriggerMsg = { payload: `hmi_vars_changed_${Date.now()}`, topic: \"ui_update_trigger_from_server\" };\n    if (triggerAllVarsUI) msgAllUI = { ...uiTriggerMsg };\n    if (triggerCalcVarsUI) msgCalcUI = { ...uiTriggerMsg };\n    if (triggerPhVarsUI) msgPhUI = { ...uiTriggerMsg };\n    if (triggerRedoxVarsUI) msgRedoxUI = { ...uiTriggerMsg };\n    if (triggerAOLCVarsUI) msgAOLCUI = { ...uiTriggerMsg };\n    if (triggerRedox2VarsUI) msgRedox2UI = { ...uiTriggerMsg };\n    if (triggerPidConfigUI) msgPidConfigUI = { ...uiTriggerMsg };\n\n    const saveTriggerMsg = { payload: \"write_request\", topic: \"hmi_initiated_save\" };\n    if (triggerAllVarsSave) msgAllSave = { ...saveTriggerMsg };\n    if (triggerCalcVarsSave) msgCalcSave = { ...saveTriggerMsg };\n    if (triggerPhVarsSave) msgPhSave = { ...saveTriggerMsg };\n    if (triggerRedoxVarsSave) msgRedoxSave = { ...saveTriggerMsg };\n    if (triggerAOLCVarsSave) msgAOLCSave = { ...saveTriggerMsg };\n    if (triggerRedox2VarsSave) msgRedox2Save = { ...saveTriggerMsg };\n    if (triggerPidConfigSave) msgPidConfigSave = { ...saveTriggerMsg };\n\n    node.log(`Изменено ${changesMadeCount} уставок с HMI. Инициирую обновление UI и СОХРАНЕНИЕ ФАЙЛОВ.`);\n    node.status({ fill: \"green\", shape: \"dot\", text: `Обновлено ${changesMadeCount}. UI триггер. Сохранение.` });\n} else {\n    node.status({ fill: \"grey\", shape: \"ring\", text: `Опрос уставок HMI: нет изменений` });\n}\n\nreturn [\n    modbusAcks,\n    msgAllUI, msgCalcUI, msgPhUI, msgRedoxUI, msgAOLCUI, msgRedox2UI, msgPidConfigUI,\n    msgAllSave, msgCalcSave, msgPhSave, msgRedoxSave, msgAOLCSave, msgRedox2Save, msgPidConfigSave\n];",
        "outputs": 15,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 240,
        "wires": [
            [
                "a96b7ba188656685"
            ],
            [
                "153ff17068380336"
            ],
            [
                "3045711bf9f849ad"
            ],
            [
                "f8ee1bc0592471c3"
            ],
            [
                "ada4c733cd9b319d"
            ],
            [
                "874112f1e272a720"
            ],
            [
                "8037559386027da7"
            ],
            [
                "6112cd68b0e19f5a"
            ],
            [
                "cccbd4047eb1b324"
            ],
            [
                "2f5f8d973fe5dd3f"
            ],
            [
                "1ee00c0cfeadb19b"
            ],
            [
                "4f9d0f95bac82b9a"
            ],
            [
                "400d015646b769fa"
            ],
            [
                "923d1b5993c3174f"
            ],
            [
                "a2a14647a259db12"
            ]
        ]
    },
    {
        "id": "153ff17068380336",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger All Vars UI Update",
        "mode": "link",
        "links": [
            "812190053ecfd8ba",
            "9cb0b4091b53be26"
        ],
        "x": 1235,
        "y": 80,
        "wires": []
    },
    {
        "id": "3045711bf9f849ad",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger Calc UI Update",
        "mode": "link",
        "links": [
            "195c30723715fceb"
        ],
        "x": 1235,
        "y": 120,
        "wires": []
    },
    {
        "id": "f8ee1bc0592471c3",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger PH UI Update",
        "mode": "link",
        "links": [
            "28e53b9cbb68405c"
        ],
        "x": 1235,
        "y": 160,
        "wires": []
    },
    {
        "id": "d3484b563df7340a",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger Redox UI Update",
        "mode": "link",
        "links": [
            "32e563ea5013d5ae"
        ],
        "x": 1235,
        "y": 200,
        "wires": []
    },
    {
        "id": "cccbd4047eb1b324",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger All Vars Save from HMI",
        "mode": "link",
        "links": [
            "2df574ef89bc8dab"
        ],
        "x": 1175,
        "y": 340,
        "wires": []
    },
    {
        "id": "2f5f8d973fe5dd3f",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger Calc Save from HMI",
        "mode": "link",
        "links": [
            "097f508f0c552526"
        ],
        "x": 1175,
        "y": 380,
        "wires": []
    },
    {
        "id": "1ee00c0cfeadb19b",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger PH Save from HMI",
        "mode": "link",
        "links": [
            "9668ac078fb75df3"
        ],
        "x": 1175,
        "y": 420,
        "wires": []
    },
    {
        "id": "225e8068031d1bd5",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger Redox Save from HMI",
        "mode": "link",
        "links": [
            "fb532bafbf742f1c"
        ],
        "x": 1175,
        "y": 460,
        "wires": []
    },
    {
        "id": "0c5aaa6d719faef8",
        "type": "inject",
        "z": "4f802f288b4a6b48",
        "name": "Сброс flow.lastPolledValues",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 380,
        "wires": [
            [
                "de281671353ea641"
            ]
        ]
    },
    {
        "id": "de281671353ea641",
        "type": "function",
        "z": "4f802f288b4a6b48",
        "name": "Очистить lastPolledValues",
        "func": "// Массив setpointsToManage должен быть таким же, как в \"Process New Setpoints & Ack\"\nconst setpointsToManage = [\n    // !!! СКОПИРУЙТЕ СЮДА ВАШ ПОЛНЫЙ МАССИВ setpointsToManage ИЗ УЗЛА b45055e60a3a85b0 !!!\n    { globalName: \"koef0\", readAddr: 0, newWriteAddr: 1000 },\n    { globalName: \"koef1\", readAddr: 2, newWriteAddr: 1002 },\n    { globalName: \"koef2\", readAddr: 4, newWriteAddr: 1004 },\n    { globalName: \"koef3\", readAddr: 6, newWriteAddr: 1006 },\n    { globalName: \"koef4\", readAddr: 8, newWriteAddr: 1008 },\n    { globalName: \"koef5\", readAddr: 10, newWriteAddr: 1010 },\n    { globalName: \"koef6\", readAddr: 12, newWriteAddr: 1012 },\n    { globalName: \"koef7\", readAddr: 14, newWriteAddr: 1014 },\n    { globalName: \"konst0\", readAddr: 16, newWriteAddr: 1016 },\n    { globalName: \"konst1\", readAddr: 18, newWriteAddr: 1018 },\n    { globalName: \"konst2\", readAddr: 20, newWriteAddr: 1020 },\n    { globalName: \"konst3\", readAddr: 22, newWriteAddr: 1022 },\n    { globalName: \"konst4\", readAddr: 24, newWriteAddr: 1024 },\n    { globalName: \"konst5\", readAddr: 26, newWriteAddr: 1026 },\n    { globalName: \"konst6\", readAddr: 28, newWriteAddr: 1028 },\n    { globalName: \"konst7\", readAddr: 30, newWriteAddr: 1030 },\n    { globalName: \"n1\", readAddr: 32, newWriteAddr: 1032 },\n    { globalName: \"n2\", readAddr: 34, newWriteAddr: 1034 },\n    { globalName: \"n3\", readAddr: 36, newWriteAddr: 1036 },\n    { globalName: \"n4\", readAddr: 38, newWriteAddr: 1038 },\n    { globalName: \"n5\", readAddr: 40, newWriteAddr: 1040 },\n    { globalName: \"k1\", readAddr: 42, newWriteAddr: 1042 },\n    { globalName: \"k2\", readAddr: 44, newWriteAddr: 1044 },\n    { globalName: \"k3\", readAddr: 46, newWriteAddr: 1046 },\n    { globalName: \"k4\", readAddr: 48, newWriteAddr: 1048 },\n    { globalName: \"k5\", readAddr: 50, newWriteAddr: 1050 },\n    { globalName: \"h1\", readAddr: 52, newWriteAddr: 1052 },\n    { globalName: \"h2\", readAddr: 54, newWriteAddr: 1054 },\n    { globalName: \"h3\", readAddr: 56, newWriteAddr: 1056 },\n    { globalName: \"h4\", readAddr: 58, newWriteAddr: 1058 },\n    { globalName: \"h5\", readAddr: 60, newWriteAddr: 1060 },\n    { globalName: \"p1\", readAddr: 62, newWriteAddr: 1062 },\n    { globalName: \"p2\", readAddr: 64, newWriteAddr: 1064 },\n    { globalName: \"p3\", readAddr: 66, newWriteAddr: 1066 },\n    { globalName: \"p4\", readAddr: 68, newWriteAddr: 1068 },\n    { globalName: \"p5\", readAddr: 70, newWriteAddr: 1070 },\n    { globalName: \"pk1\", readAddr: 72, newWriteAddr: 1072 },\n    { globalName: \"pk2\", readAddr: 74, newWriteAddr: 1074 },\n    { globalName: \"pk3\", readAddr: 76, newWriteAddr: 1076 },\n    { globalName: \"pk4\", readAddr: 78, newWriteAddr: 1078 },\n    { globalName: \"pk5\", readAddr: 80, newWriteAddr: 1080 },\n    { globalName: \"ai2t1h1koef1\", readAddr: 82, newWriteAddr: 1082 },\n    { globalName: \"ai2t1h1konst1\", readAddr: 84, newWriteAddr: 1084 },\n    { globalName: \"ai2t1t2h1h2koef\", readAddr: 86, newWriteAddr: 1086 },\n    { globalName: \"ai2t1t2h1h2konst\", readAddr: 88, newWriteAddr: 1088 },\n    { globalName: \"ai2t2h2koef2\", readAddr: 90, newWriteAddr: 1090 },\n    { globalName: \"ai2t2h2konst2\", readAddr: 92, newWriteAddr: 1092 },\n    { globalName: \"phkonstamm\", readAddr: 94, newWriteAddr: 1094 },\n    { globalName: \"phkonstkisl\", readAddr: 96, newWriteAddr: 1096 },\n    { globalName: \"phminamm\", readAddr: 98, newWriteAddr: 1098 },\n    { globalName: \"phminkisl\", readAddr: 100, newWriteAddr: 1100 },\n    { globalName: \"phneitr\", readAddr: 102, newWriteAddr: 1102 },\n    { globalName: \"ai3ph5koef\", readAddr: 104, newWriteAddr: 1104 },\n    { globalName: \"ai3ph5konst\", readAddr: 106, newWriteAddr: 1106 },\n    { globalName: \"window_smus\", readAddr: 108, newWriteAddr: 1108 },\n    { globalName: \"window_smusp\", readAddr: 110, newWriteAddr: 1110 },\n{ globalName: \"ao_lc_key_ch2\", readAddr: 112, newWriteAddr: 1112 },\n{ globalName: \"ao_lc_k_ch2\", readAddr: 114, newWriteAddr: 1114 },\n{ globalName: \"ao_lc_c_ch2\", readAddr: 116, newWriteAddr: 1116 },\n{ globalName: \"ao_lc_key_ch3\", readAddr: 118, newWriteAddr: 1118 },\n{ globalName: \"ao_lc_k_ch3\", readAddr: 120, newWriteAddr: 1120 },\n{ globalName: \"ao_lc_c_ch3\", readAddr: 122, newWriteAddr: 1122 },\n{ globalName: \"ao_lc_key_ch4\", readAddr: 124, newWriteAddr: 1124 },\n{ globalName: \"ao_lc_k_ch4\", readAddr: 126, newWriteAddr: 1126 },\n{ globalName: \"ao_lc_c_ch4\", readAddr: 128, newWriteAddr:1128 },\n    // <--- ДОБАВЛЕНО: Новые уставки для Redox2 --->\n    { globalName: \"ai4p2h5koef\", readAddr: 130, newWriteAddr: 1130 },\n    { globalName: \"ai4p2h5konst\", readAddr: 132, newWriteAddr: 1132 },\n    { globalName: \"window_smusp2\", readAddr: 134, newWriteAddr: 1134 },\n\n// <--- ДОБАВЛЕНО: Новые уставки ПИД --->\n    { globalName: \"pid_setpoint\", readAddr: 136, newWriteAddr:1136 },\n    { globalName: \"pid_prop_band\", readAddr: 138, newWriteAddr: 1138 },\n    { globalName: \"pid_t_integral\", readAddr: 140, newWriteAddr: 1140 },\n    { globalName: \"pid_t_derivative\", readAddr: 142, newWriteAddr: 1142 },\n    { globalName: \"pid_max_interval\", readAddr: 144, newWriteAddr: 1144 },\n    { globalName: \"pid_smooth_factor\", readAddr: 146, newWriteAddr: 1146 },\n    { globalName: \"pid_enable\", readAddr: 148, newWriteAddr: 1148 },\n    { globalName: \"pid_disabled_op\", readAddr: 150, newWriteAddr: 1150 },\n    { globalName: \"pid_pv_select_key\", readAddr: 152, newWriteAddr: 1152 },\n    { globalName: \"pid_valve_is_NC\", readAddr: 154, newWriteAddr: 1154 }\n\n];\n\nlet clearedCount = 0;\nnode.log(\"[Flow Reset] Сброс переменных flow.last_polled_val_at_...\");\n\nfor (const sp of setpointsToManage) {\n    const contextKeyLastPolled = `last_polled_val_at_${sp.newWriteAddr}`;\n    if (flow.get(contextKeyLastPolled) !== undefined) {\n        flow.set(contextKeyLastPolled, undefined); // Устанавливаем в undefined\n        clearedCount++;\n    }\n}\n\nnode.log(`[Flow Reset] Сброшено ${clearedCount} переменных flow.last_polled_val_at_...`);\nnode.status({ text: `Сброшено ${clearedCount} lastPolled flow vars` });\n\nreturn null; // Ничего не отправляем дальше",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 380,
        "wires": []
    },
    {
        "id": "874112f1e272a720",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger Redox UI Update",
        "mode": "link",
        "links": [
            "32e563ea5013d5ae"
        ],
        "x": 1235,
        "y": 240,
        "wires": []
    },
    {
        "id": "400d015646b769fa",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger Redox Save from HMI",
        "mode": "link",
        "links": [
            "05d8d549dd084005"
        ],
        "x": 1175,
        "y": 500,
        "wires": []
    },
    {
        "id": "5369fb9650419f52",
        "type": "modbus-flex-getter",
        "z": "4f802f288b4a6b48",
        "name": "Read Part 1 0-123",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "eb35cce35ef3368f",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 500,
        "wires": [
            [
                "dd0f3c8e9870229a"
            ],
            []
        ]
    },
    {
        "id": "fe2a719096539245",
        "type": "inject",
        "z": "4f802f288b4a6b48",
        "name": "Опрос 'Новых Уставок'  (10c 1.5 сек)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.5",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 230,
        "y": 560,
        "wires": [
            [
                "83592a06569d7d58"
            ]
        ]
    },
    {
        "id": "83592a06569d7d58",
        "type": "function",
        "z": "4f802f288b4a6b48",
        "name": "Prepare Request Part 1 0-123",
        "func": "msg.payload = {\n    'fc': 3,\n    'unitid': 1, // Твой Unit ID\n    'address': 1000,\n    'quantity': 123\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "5369fb9650419f52"
            ]
        ]
    },
    {
        "id": "dd0f3c8e9870229a",
        "type": "function",
        "z": "4f802f288b4a6b48",
        "name": "Store Part 1 & Prepare/Trigger Part 2 0-123 + 123-",
        "func": "// Вход: msg от Modbus-Flex-Getter \"Read Part 1\"\nlet part1DataArray;\n\n// Извлеки массив данных (адаптируй путь, если нужно, после проверки Debug)\nif (msg.payload && Array.isArray(msg.payload.data)) {\n    part1DataArray = msg.payload.data;\n} else if (msg.payload && Array.isArray(msg.payload)) {\n    part1DataArray = msg.payload;\n} else {\n    node.error(\"Часть 1: Массив данных не найден в ответе Modbus-Flex-Getter!\", msg);\n    return null; // Остановить поток\n}\n\nif (!part1DataArray || part1DataArray.length !== 123) {\n    node.error(`Часть 1: Ожидалось 123 регистра, получено ${part1DataArray ? part1DataArray.length : 'нет'}. Остановка.`, msg);\n    return null;\n}\n\nflow.set(\"modbus_part1_data\", part1DataArray); // Сохраняем в контекст потока\nnode.log(\"Часть 1 (123 регистра) прочитана и сохранена.\");\n\n// Это сообщение запустит подготовку запроса для Части 2\nreturn { payload: \"trigger_read_part_2\" };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 440,
        "wires": [
            [
                "48fb836b5b26c84d"
            ]
        ]
    },
    {
        "id": "48fb836b5b26c84d",
        "type": "function",
        "z": "4f802f288b4a6b48",
        "name": "Prepare Request Part 2 (Total 156 regs",
        "func": "// Вход: msg от \"Store Part 1 & Prepare/Trigger Part 2\"\n// Этот узел просто формирует запрос для второй части\nmsg.payload = {\n    'fc': 3,\n    'unitid': 1, // Твой Unit ID\n    'address': 1123, // Начальный адрес для второй части (600 + 123)\n    'quantity': 33   // Количество оставшихся регистров \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 440,
        "wires": [
            [
                "f0322309657b9389"
            ]
        ]
    },
    {
        "id": "f0322309657b9389",
        "type": "modbus-flex-getter",
        "z": "4f802f288b4a6b48",
        "name": "Read Part 2 (Remaining 33 regs)",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "eb35cce35ef3368f",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 200,
        "y": 380,
        "wires": [
            [
                "24e9f1f0f567d207"
            ],
            []
        ]
    },
    {
        "id": "24e9f1f0f567d207",
        "type": "function",
        "z": "4f802f288b4a6b48",
        "name": "Combine Parts (123 + 33 = 156 regs)",
        "func": "// Вход: msg от Modbus-Flex-Getter \"Read Part 2\"\nlet part2DataArray;\n\n// Извлеки массив данных для Части 2 (адаптируй путь, если нужно)\nif (msg.payload && Array.isArray(msg.payload.data)) {\n    part2DataArray = msg.payload.data;\n} else if (msg.payload && Array.isArray(msg.payload)) {\n    part2DataArray = msg.payload;\n} else {\n    node.error(\"Часть 2: Массив данных не найден в ответе Modbus-Flex-Getter!\", msg);\n    return null; // Остановить поток\n}\n\nif (!part2DataArray || part2DataArray.length !== 33) {\n    node.error(`Часть 2: Ожидалось 33 регистров, получено ${part2DataArray ? part2DataArray.length : 'нет'}. Остановка.`, msg);\n    return null;\n}\n\nconst part1DataArray = flow.get(\"modbus_part1_data\");\n\nif (!part1DataArray) {\n    node.error(\"Данные Части 1 не найдены в контексте потока! Невозможно объединить.\", msg);\n    return null;\n}\n\n// Объединяем массивы\nconst combinedPolledRegisters = part1DataArray.concat(part2DataArray);\n\n// Очищаем сохраненные данные Части 1 для следующего цикла опроса\nflow.set(\"modbus_part1_data\", undefined);\n\nif (combinedPolledRegisters.length === 156) {\n    node.log(`Успешно объединены данные Modbus: ${combinedPolledRegisters.length} регистров.`);\n    msg.payload = combinedPolledRegisters; // Это и есть твой полный массив polledRegisters\n    return msg;\n} else {\n    node.error(`Ошибка объединения: итоговая длина ${combinedPolledRegisters.length}, ожидалось 156.`, msg);\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 320,
        "wires": [
            [
                "f4ae9155e43f3f5a"
            ]
        ]
    },
    {
        "id": "11b75960d48bee3e",
        "type": "debug",
        "z": "4f802f288b4a6b48",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1530,
        "y": 140,
        "wires": []
    },
    {
        "id": "b9f8bdbc54160920",
        "type": "debug",
        "z": "4f802f288b4a6b48",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1530,
        "y": 80,
        "wires": []
    },
    {
        "id": "8037559386027da7",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger Redox2 UI Update from HMI",
        "mode": "link",
        "links": [
            "9f400a8399ef39f0"
        ],
        "x": 1235,
        "y": 280,
        "wires": []
    },
    {
        "id": "923d1b5993c3174f",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger Redox2 Save from HMI",
        "mode": "link",
        "links": [
            "e6265335edd58a1e"
        ],
        "x": 1185,
        "y": 540,
        "wires": []
    },
    {
        "id": "6112cd68b0e19f5a",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger PID Config UI from HMI",
        "mode": "link",
        "links": [
            "aec16a9ed4444628"
        ],
        "x": 1235,
        "y": 320,
        "wires": []
    },
    {
        "id": "a2a14647a259db12",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger PID Config Save from HMI",
        "mode": "link",
        "links": [
            "3ff3a84089069a8b"
        ],
        "x": 1185,
        "y": 580,
        "wires": []
    },
    {
        "id": "ada4c733cd9b319d",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger AO LC UI Update",
        "mode": "link",
        "links": [
            "788f0fd8f6c24ef9"
        ],
        "x": 1235,
        "y": 280,
        "wires": []
    },
    {
        "id": "4f9d0f95bac82b9a",
        "type": "link out",
        "z": "4f802f288b4a6b48",
        "name": "Trigger AO LC Save from HMI",
        "mode": "link",
        "links": [
            "05d8d549dd084005"
        ],
        "x": 1235,
        "y": 480,
        "wires": []
    },
    {
        "id": "8b6ca52d0dcbce33",
        "type": "function",
        "z": "4f802f288b4a6b48",
        "name": "Ожидание готовности UI",
        "func": "const cloneMessage = (source) => {\n    if (typeof RED !== 'undefined' && RED.util && RED.util.cloneMessage) {\n        return RED.util.cloneMessage(source);\n    }\n    return JSON.parse(JSON.stringify(source));\n};\nlet enabled = context.get('uiReady') === true;\nif (msg && msg.enable === true) {\n    if (!enabled) {\n        enabled = true;\n        context.set('uiReady', true);\n    }\n    const pending = context.get('pending');\n    if (pending) {\n        context.set('pending', null);\n        return pending;\n    }\n    return null;\n}\nif (!enabled) {\n    context.set('pending', cloneMessage(msg));\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "634c520c332dfa39"
            ]
        ]
    },
    {
        "id": "652112f83f70b1e1",
        "type": "link in",
        "z": "4f802f288b4a6b48",
        "name": "link in: UI Ready",
        "links": [
            "35f8cce28c86843b"
        ],
        "x": 210,
        "y": 120,
        "wires": [
            [
                "8b6ca52d0dcbce33"
            ]
        ]
    },
    {
        "id": "b642a7350331cebd",
        "type": "ui_button",
        "z": "7a2b68c9f92e1313",
        "name": "Чтение AO LC",
        "group": "bec8068378872fb4",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение из файла",
        "tooltip": "Прочитать сохраненную конфигурацию АО LC из файла",
        "icon": "fa-download",
        "payload": "read",
        "payloadType": "str",
        "topic": "read_aolc",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "d2f315b4fe5b7fb3"
            ]
        ]
    },
    {
        "id": "d2f315b4fe5b7fb3",
        "type": "link out",
        "z": "7a2b68c9f92e1313",
        "name": "link out: aolc read",
        "links": [
            "4f859da4ee156b8c"
        ],
        "x": 390,
        "y": 60,
        "wires": []
    },
    {
        "id": "e785bf1e2cc2cbbf",
        "type": "ui_text",
        "z": "7a2b68c9f92e1313",
        "group": "bec8068378872fb4",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус AO LC",
        "label": "Статус:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 930,
        "y": 180,
        "wires": []
    },
    {
        "id": "876bc339b7a0f48e",
        "type": "ui_button",
        "z": "7a2b68c9f92e1313",
        "name": "Запись AO LC",
        "group": "bec8068378872fb4",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись в файл",
        "tooltip": "Сохранить текущую конфигурацию АО LC в файл",
        "icon": "fa-upload",
        "payload": "save",
        "payloadType": "str",
        "topic": "save_aolc",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "be7e763239dd4fe2"
            ]
        ]
    },
    {
        "id": "be7e763239dd4fe2",
        "type": "link out",
        "z": "7a2b68c9f92e1313",
        "name": "link out: aolc save",
        "links": [
            "05d8d549dd084005"
        ],
        "x": 390,
        "y": 120,
        "wires": []
    },
    {
        "id": "ef75cb7b7fbf99cf",
        "type": "ui_numeric",
        "z": "7a2b68c9f92e1313",
        "name": "Ключ Ch2 (2NN)",
        "label": "Ключ 2NN (ao_lc_key_ch2):",
        "group": "7d3209aa86af4056",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_key_ch2",
        "format": "{{value}}",
        "min": 200,
        "max": 2999,
        "step": 1,
        "x": 630,
        "y": 120,
        "wires": [
            [
                "0a77d40f64b0d219"
            ]
        ]
    },
    {
        "id": "63b40fc7d77a5068",
        "type": "ui_numeric",
        "z": "7a2b68c9f92e1313",
        "name": "K Ch2",
        "label": "K (ao_lc_k_ch2):",
        "group": "7d3209aa86af4056",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_k_ch2",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "0a77d40f64b0d219"
            ]
        ]
    },
    {
        "id": "d9d48b9fbcbac150",
        "type": "ui_numeric",
        "z": "7a2b68c9f92e1313",
        "name": "C Ch2",
        "label": "C (ao_lc_c_ch2):",
        "group": "7d3209aa86af4056",
        "order": 3,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_c_ch2",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 590,
        "y": 240,
        "wires": [
            [
                "0a77d40f64b0d219"
            ]
        ]
    },
    {
        "id": "d6d48ee947a0ae19",
        "type": "ui_text",
        "z": "7a2b68c9f92e1313",
        "group": "7d3209aa86af4056",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Переменная:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 380,
        "wires": []
    },
    {
        "id": "fa65376ef6b8869c",
        "type": "ui_text",
        "z": "7a2b68c9f92e1313",
        "group": "7d3209aa86af4056",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Ток (мА) (ao_lc_calculated_mA_ch2):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 700,
        "y": 420,
        "wires": []
    },
    {
        "id": "6d40131870358eeb",
        "type": "ui_numeric",
        "z": "7a2b68c9f92e1313",
        "name": "Ключ Ch3 (3NN)",
        "label": "Ключ 3NN (ao_lc_key_ch3):",
        "group": "79593de977c7d35f",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_key_ch3",
        "format": "{{value}}",
        "min": 300,
        "max": 3999,
        "step": 1,
        "x": 670,
        "y": 480,
        "wires": [
            [
                "0a77d40f64b0d219"
            ]
        ]
    },
    {
        "id": "ceec4b97140e1778",
        "type": "ui_numeric",
        "z": "7a2b68c9f92e1313",
        "name": "K Ch3",
        "label": "K (ao_lc_k_ch3):",
        "group": "79593de977c7d35f",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_k_ch3",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 670,
        "y": 520,
        "wires": [
            [
                "0a77d40f64b0d219"
            ]
        ]
    },
    {
        "id": "cef08ee0f4dd2679",
        "type": "ui_numeric",
        "z": "7a2b68c9f92e1313",
        "name": "C Ch3",
        "label": "C (ao_lc_c_ch3):",
        "group": "79593de977c7d35f",
        "order": 3,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_c_ch3",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 670,
        "y": 560,
        "wires": [
            [
                "0a77d40f64b0d219"
            ]
        ]
    },
    {
        "id": "e5d72c2d67ad34de",
        "type": "ui_text",
        "z": "7a2b68c9f92e1313",
        "group": "79593de977c7d35f",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Переменная:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 600,
        "wires": []
    },
    {
        "id": "9a87dc76f568bf7c",
        "type": "ui_text",
        "z": "7a2b68c9f92e1313",
        "group": "79593de977c7d35f",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Ток (мА) (ao_lc_calculated_mA_ch3):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 640,
        "wires": []
    },
    {
        "id": "07297e8d4ef9e19f",
        "type": "ui_numeric",
        "z": "7a2b68c9f92e1313",
        "name": "Ключ Ch4 (4NN)",
        "label": "Ключ 4NN (ao_lc_key_ch4):",
        "group": "a0107089e1d26bc9",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_key_ch4",
        "format": "{{value}}",
        "min": 400,
        "max": 4999,
        "step": 1,
        "x": 670,
        "y": 700,
        "wires": [
            [
                "0a77d40f64b0d219"
            ]
        ]
    },
    {
        "id": "d57ffc628efd4cca",
        "type": "ui_numeric",
        "z": "7a2b68c9f92e1313",
        "name": "K Ch4",
        "label": "K (ao_lc_k_ch4):",
        "group": "a0107089e1d26bc9",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_k_ch4",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 670,
        "y": 740,
        "wires": [
            [
                "0a77d40f64b0d219"
            ]
        ]
    },
    {
        "id": "953fcbd7cf8fc12a",
        "type": "ui_numeric",
        "z": "7a2b68c9f92e1313",
        "name": "C Ch4",
        "label": "C (ao_lc_c_ch4):",
        "group": "a0107089e1d26bc9",
        "order": 3,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "ao_lc_c_ch4",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.001,
        "x": 670,
        "y": 780,
        "wires": [
            [
                "0a77d40f64b0d219"
            ]
        ]
    },
    {
        "id": "2b634c3789a512fa",
        "type": "ui_text",
        "z": "7a2b68c9f92e1313",
        "group": "a0107089e1d26bc9",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Переменная:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 820,
        "wires": []
    },
    {
        "id": "e86834e76d0054fa",
        "type": "ui_text",
        "z": "7a2b68c9f92e1313",
        "group": "a0107089e1d26bc9",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Ток (мА) (ao_lc_calculated_mA_ch4):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 670,
        "y": 860,
        "wires": []
    },
    {
        "id": "788f0fd8f6c24ef9",
        "type": "link in",
        "z": "7a2b68c9f92e1313",
        "name": "link in: trigger-aolc-ui-update",
        "links": [
            "ab87de4279646fad",
            "3c09a6f998385ab4",
            "0cdf32d8c1d51c10",
            "ada4c733cd9b319d"
        ],
        "x": 255,
        "y": 520,
        "wires": [
            [
                "1e990834244bca08"
            ]
        ]
    },
    {
        "id": "1e990834244bca08",
        "type": "function",
        "z": "7a2b68c9f92e1313",
        "name": "Update AO LC UI Elements",
        "func": "const uiState = global.get('uiState_aolc') || {};\nconst savedState = global.get('savedState_aolc') || {};\nconst outputs = new Array(10).fill(null);\n\nconst configVars = [\n    'ao_lc_key_ch2', 'ao_lc_k_ch2', 'ao_lc_c_ch2',\n    'ao_lc_key_ch3', 'ao_lc_k_ch3', 'ao_lc_c_ch3',\n    'ao_lc_key_ch4', 'ao_lc_k_ch4', 'ao_lc_c_ch4'\n];\n\nconfigVars.forEach((key, index) => {\n    const value = uiState.hasOwnProperty(key) ? Number(uiState[key]) : (key.includes('k_') ? 1.0 : 0.0) ;\n    outputs[index] = {payload: value, topic: key};\n});\n\nlet hasUnsavedChanges = false;\nfor (const key of configVars) {\n    const savedNum = savedState.hasOwnProperty(key) ? Number(savedState[key]) : (key.includes('k_') ? 1.0 : 0.0);\n    const uiNum = uiState.hasOwnProperty(key) ? Number(uiState[key]) : (key.includes('k_') ? 1.0 : 0.0);\n    if (Math.abs(savedNum - uiNum) > 0.00001 && !(isNaN(savedNum) && isNaN(uiNum))) { \n        hasUnsavedChanges = true; break;\n    }\n}\n\noutputs[9] = {payload: (hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\")};\n\nreturn outputs;",
        "outputs": 10,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "ef75cb7b7fbf99cf"
            ],
            [
                "63b40fc7d77a5068"
            ],
            [
                "d9d48b9fbcbac150"
            ],
            [
                "6d40131870358eeb"
            ],
            [
                "ceec4b97140e1778"
            ],
            [
                "cef08ee0f4dd2679"
            ],
            [
                "07297e8d4ef9e19f"
            ],
            [
                "d57ffc628efd4cca"
            ],
            [
                "953fcbd7cf8fc12a"
            ],
            [
                "e785bf1e2cc2cbbf"
            ]
        ]
    },
    {
        "id": "0a77d40f64b0d219",
        "type": "function",
        "z": "7a2b68c9f92e1313",
        "name": "Handle AO LC UI Input",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\nlet uiState = global.get('uiState_aolc') || {};\nconst savedState = global.get('savedState_aolc') || {};\n\nconst savableVars = [\n    'ao_lc_key_ch2', 'ao_lc_k_ch2', 'ao_lc_c_ch2',\n    'ao_lc_key_ch3', 'ao_lc_k_ch3', 'ao_lc_c_ch3',\n    'ao_lc_key_ch4', 'ao_lc_k_ch4', 'ao_lc_c_ch4'\n];\n\nif (savableVars.includes(varName) && typeof newValue === 'number' && !isNaN(newValue)) {\n    uiState[varName] = newValue;\n    global.set('uiState_aolc', uiState);\n} else {\n    node.warn(\"[UI_AOLC_INPUT] Некорректный ввод: \" + JSON.stringify(msg));\n    return null;\n}\n\nlet hasUnsavedChanges = false;\nfor (const key of savableVars) {\n    const savedVal = savedState.hasOwnProperty(key) ? Number(savedState[key]) : (key.includes('k_') ? 1.0 : 0.0);\n    const uiVal = uiState.hasOwnProperty(key) ? Number(uiState[key]) : (key.includes('k_') ? 1.0 : 0.0);\n    if (Math.abs(savedVal - uiVal) > 0.00001 && !(isNaN(savedVal) && isNaN(uiVal))) { \n        hasUnsavedChanges = true; break;\n    }\n}\nconst statusMsg = hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\";\nreturn { payload: statusMsg };",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 300,
        "wires": [
            [
                "e785bf1e2cc2cbbf",
                "0cdf32d8c1d51c10"
            ]
        ]
    },
    {
        "id": "0cdf32d8c1d51c10",
        "type": "link out",
        "z": "7a2b68c9f92e1313",
        "name": "refresh status on input",
        "links": [
            "788f0fd8f6c24ef9"
        ],
        "x": 1130,
        "y": 300,
        "wires": []
    },
    {
        "id": "b9fa184100a50a30",
        "type": "link in",
        "z": "7a2b68c9f92e1313",
        "name": "link in: Update mA Val Ch2",
        "links": [
            "da071253b80b3f43"
        ],
        "x": 430,
        "y": 420,
        "wires": [
            [
                "fa65376ef6b8869c",
                "f7030e0d1c70124e"
            ]
        ]
    },
    {
        "id": "9da0db7f5c0da452",
        "type": "link in",
        "z": "7a2b68c9f92e1313",
        "name": "link in: Update mA Val Ch3",
        "links": [
            "70e3c7a9daee5ff6"
        ],
        "x": 430,
        "y": 640,
        "wires": [
            [
                "9a87dc76f568bf7c",
                "f5bae8c7b83d76c4"
            ]
        ]
    },
    {
        "id": "1af192c2cca71098",
        "type": "link in",
        "z": "7a2b68c9f92e1313",
        "name": "link in: Update mA Val Ch4",
        "links": [
            "40014a56427e26cf"
        ],
        "x": 430,
        "y": 860,
        "wires": [
            [
                "e86834e76d0054fa",
                "a01c75560aed6d89"
            ]
        ]
    },
    {
        "id": "d23bdd5e84eb8734",
        "type": "link in",
        "z": "7a2b68c9f92e1313",
        "name": "link in: Update Src Val Ch2",
        "links": [
            "d64e83efdf3cbb21"
        ],
        "x": 430,
        "y": 380,
        "wires": [
            [
                "d6d48ee947a0ae19"
            ]
        ]
    },
    {
        "id": "b00f7aab29f9cc5e",
        "type": "link in",
        "z": "7a2b68c9f92e1313",
        "name": "link in: Update Src Val Ch3",
        "links": [
            "3eda9bd9f0ab2f07"
        ],
        "x": 430,
        "y": 600,
        "wires": [
            [
                "e5d72c2d67ad34de"
            ]
        ]
    },
    {
        "id": "671c1d8ade871767",
        "type": "link in",
        "z": "7a2b68c9f92e1313",
        "name": "link in: Update Src Val Ch4",
        "links": [
            "e5214fed88d0bdcf"
        ],
        "x": 430,
        "y": 820,
        "wires": [
            [
                "2b634c3789a512fa"
            ]
        ]
    },
    {
        "id": "8e3b49d84bff2178",
        "type": "ui_chart",
        "z": "7a2b68c9f92e1313",
        "name": "График Токов АО LC",
        "group": "599e611306f451f2",
        "order": 1,
        "width": 12,
        "height": 8,
        "label": "Выходные токи (4-20 мА)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "4",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "className": "",
        "x": 1260,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "bd69f25b60c4cb80",
        "type": "change",
        "z": "7a2b68c9f92e1313",
        "name": "Set Topic AO_LC_Ch2_mA",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AO_LC_Ch2_mA",
                "tot": "str"
            }
        ],
        "x": 1080,
        "y": 480,
        "wires": [
            [
                "e6d74d49ecc89abf"
            ]
        ]
    },
    {
        "id": "ea625dec3d1246b2",
        "type": "change",
        "z": "7a2b68c9f92e1313",
        "name": "Set Topic AO_LC_Ch3_mA",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AO_LC_Ch3_mA",
                "tot": "str"
            }
        ],
        "x": 1020,
        "y": 600,
        "wires": [
            [
                "e6d74d49ecc89abf"
            ]
        ]
    },
    {
        "id": "157ec22ffcf67eeb",
        "type": "change",
        "z": "7a2b68c9f92e1313",
        "name": "Set Topic AO_LC_Ch4_mA",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AO_LC_Ch4_mA",
                "tot": "str"
            }
        ],
        "x": 1000,
        "y": 740,
        "wires": [
            [
                "e6d74d49ecc89abf"
            ]
        ]
    },
    {
        "id": "f7030e0d1c70124e",
        "type": "rbe",
        "z": "7a2b68c9f92e1313",
        "name": "Filter unchanged mA Ch2",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "x": 760,
        "y": 420,
        "wires": [
            [
                "bd69f25b60c4cb80"
            ]
        ]
    },
    {
        "id": "f5bae8c7b83d76c4",
        "type": "rbe",
        "z": "7a2b68c9f92e1313",
        "name": "Filter unchanged mA Ch3",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "x": 760,
        "y": 640,
        "wires": [
            [
                "ea625dec3d1246b2"
            ]
        ]
    },
    {
        "id": "a01c75560aed6d89",
        "type": "rbe",
        "z": "7a2b68c9f92e1313",
        "name": "Filter unchanged mA Ch4",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "x": 760,
        "y": 860,
        "wires": [
            [
                "157ec22ffcf67eeb"
            ]
        ]
    },
    {
        "id": "4c1c9ab8808b0bdc",
        "type": "link in",
        "z": "7a2b68c9f92e1313",
        "name": "link in: AO LC charts toggle",
        "links": [
            "fd6f780872fa444d"
        ],
        "x": 120,
        "y": 40,
        "wires": [
            [
                "ae25986cd0fb4be9"
            ]
        ]
    },
    {
        "id": "ae25986cd0fb4be9",
        "type": "function",
        "z": "7a2b68c9f92e1313",
        "name": "Управление графиками AO LC",
        "func": "const enabled = msg.payload === true || msg.enabled === true;\nflow.set('aoLcChartsEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "8e3b49d84bff2178"
            ]
        ]
    },
    {
        "id": "b09e044856d24f95",
        "type": "inject",
        "z": "7a2b68c9f92e1313",
        "name": "AO LC графики: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "ao_lc_charts_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "ae25986cd0fb4be9"
            ]
        ]
    },
    {
        "id": "e6d74d49ecc89abf",
        "type": "function",
        "z": "7a2b68c9f92e1313",
        "name": "Фильтр графика AO LC",
        "func": "let enabled = flow.get('aoLcChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('aoLcChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 660,
        "wires": [
            [
                "8e3b49d84bff2178"
            ]
        ]
    },
    {
        "id": "f0a17859a2979231",
        "type": "inject",
        "z": "931d498f262979ce",
        "name": "При старте (PID Config) 0.5с",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "init_pid_config",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 60,
        "wires": [
            [
                "a0828c28fe191ae9"
            ]
        ]
    },
    {
        "id": "f886e662cd1a1a29",
        "type": "link in",
        "z": "931d498f262979ce",
        "name": "link in: trigger-read-pid-config",
        "links": [
            "f04bfec6c608a192"
        ],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "a0828c28fe191ae9"
            ]
        ]
    },
    {
        "id": "a0828c28fe191ae9",
        "type": "file in",
        "z": "931d498f262979ce",
        "name": "Прочитать pid_config.json",
        "filename": "/home/root/.node-red/save/pid_config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 420,
        "y": 140,
        "wires": [
            [
                "ae2bfd55c4724805"
            ]
        ]
    },
    {
        "id": "9ba3948fbdd6d850",
        "type": "catch",
        "z": "931d498f262979ce",
        "name": "Ошибка чтения pid_config.json",
        "scope": [
            "a0828c28fe191ae9"
        ],
        "uncaught": false,
        "x": 500,
        "y": 220,
        "wires": [
            [
                "6f0dec117adc94fe"
            ]
        ]
    },
    {
        "id": "ae2bfd55c4724805",
        "type": "json",
        "z": "931d498f262979ce",
        "name": "Разобрать JSON (PID Config)",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 680,
        "y": 140,
        "wires": [
            [
                "6f0dec117adc94fe"
            ]
        ]
    },
    {
        "id": "6f0dec117adc94fe",
        "type": "function",
        "z": "931d498f262979ce",
        "name": "Init/Read PID Globals & State",
        "func": "const defaultPidConfig = {\n    pid_setpoint: 7.0,       // Уставка (например, для pH)\n    pid_prop_band: 100.0,    // Пропорциональный диапазон\n    pid_t_integral: 3600,  // Время интегрирования (сек)\n    pid_t_derivative: 0,   // Время дифференцирования (сек)\n    pid_max_interval: 60,    // Макс. интервал выборки (сек)\n    pid_smooth_factor: 0,    // Коэф. сглаживания производной\n    pid_enable: 0,           // ПИД выключен по умолчанию (0 - выкл, 1 - вкл)\n    pid_disabled_op: 0.0,    // Выход ПИД при отключении (0-1)\n    pid_pv_select_key: 498,  // Ключ выбранной PV (например, 498 для pH)\n    pid_valve_is_NC: 1,      // Тип клапана (1 - NC Норм.Закр., 0 - NO Норм.Откр.)\n    pid_integral_persist: 0.0 // Сохраненное значение интеграла\n};\n\nconst savableKeys = Object.keys(defaultPidConfig);\nlet loadedConfig = {};\nlet source = msg.topic === 'init_pid_config' ? '[INIT_PID_CONFIG]' : '[READ_BTN_PID_CONFIG]';\n\nconst isValidPayload = msg.payload && typeof msg.payload === 'object' && !Array.isArray(msg.payload) && savableKeys.every(key => msg.payload.hasOwnProperty(key));\n\nif (isValidPayload) {\n    loadedConfig = msg.payload;\n    node.warn(source + \" Конфигурация ПИД загружена из файла pid_config.json.\");\n} else {\n    loadedConfig = { ...defaultPidConfig };\n    if (msg.error) {\n         node.warn(source + \" Ошибка чтения файла pid_config.json: \" + msg.error.message + \". Используются значения по умолчанию.\");\n    } else if (msg.topic !== 'init_pid_config'){\n         node.warn(source + \" Файл pid_config.json не найден/поврежден. Используются значения по умолчанию.\");\n    } else {\n        node.log(source + \" Файл pid_config.json не найден. Используются значения по умолчанию.\");\n    }\n}\n\nlet globalsChangedCount = 0;\nfor (const key of savableKeys) {\n    let valueToSet = loadedConfig.hasOwnProperty(key) ? loadedConfig[key] : defaultPidConfig[key];\n    const numValue = Number(valueToSet);\n\n    if (isNaN(numValue) && typeof defaultPidConfig[key] === 'number') { // Проверяем, если должно быть числом\n        node.warn(`[${source}] Некорректный формат числа для ${key}: ${valueToSet}. Используется значение по умолчанию: ${defaultPidConfig[key]}`);\n        valueToSet = defaultPidConfig[key];\n    }\n    // Для булевых (0/1) проверяем отдельно, если нужно\n    if (key === 'pid_enable' || key === 'pid_valve_is_NC') {\n        valueToSet = (valueToSet === 1 || valueToSet === true) ? 1 : 0;\n    }\n\n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChangedCount++;\n    }\n    loadedConfig[key] = valueToSet; // Сохраняем проверенное значение в loadedConfig\n}\n\n// Эти переменные не сохраняются в pid_config.json, но инициализируются\nglobal.set('pid_current_pv_value', 0);\nglobal.set('pid_output_actual', 0);\nglobal.set('pid_valve_command_final', 0);\n\nglobal.set('savedState_pidconfig', { ...loadedConfig }); \nglobal.set('uiState_pidconfig', { ...loadedConfig });\n\nif (globalsChangedCount > 0) {\n    node.log(source + ` Глобальные переменные конфигурации ПИД (${globalsChangedCount} шт.) установлены/обновлены.`);\n} else if (msg.topic === 'init_pid_config') {\n    node.log(source + \" Глобальные переменные конфигурации ПИД уже были установлены.\");\n}\n\nreturn { payload: true }; // Триггер для UI",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "65556b17942ffd5e"
            ]
        ]
    },
    {
        "id": "65556b17942ffd5e",
        "type": "link out",
        "z": "931d498f262979ce",
        "name": "link out: trigger-pid-config-ui-update",
        "mode": "link",
        "links": [
            "aec16a9ed4444628"
        ],
        "x": 905,
        "y": 240,
        "wires": []
    },
    {
        "id": "3ff3a84089069a8b",
        "type": "link in",
        "z": "c3e5092eba83b800",
        "name": "link in: trigger-save-pid-config",
        "links": [
            "9517907e16f444b9",
            "a2a14647a259db12"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "154036a69463a255"
            ]
        ]
    },
    {
        "id": "154036a69463a255",
        "type": "function",
        "z": "c3e5092eba83b800",
        "name": "Apply Globals, Save State & File (PID)",
        "func": "const uiState = global.get('uiState_pidconfig') || {};\nconst defaultPidConfig = { /* ... ваши defaultPidConfig ... */ }; // Повторите defaultPidConfig для полноты или считайте из global\nconst savableKeys = [\n    'pid_setpoint', 'pid_prop_band', 'pid_t_integral', 'pid_t_derivative', \n    'pid_max_interval', 'pid_smooth_factor', 'pid_enable', 'pid_disabled_op', \n    'pid_pv_select_key', 'pid_valve_is_NC', 'pid_integral_persist'\n];\n\nlet stateToSave = {};\nlet globalsChangedCount = 0;\n\nfor (const key of savableKeys) {\n    let valueToSet = uiState.hasOwnProperty(key) ? uiState[key] : (defaultPidConfig[key] !== undefined ? defaultPidConfig[key] : null);\n    // Валидация и приведение типов, если необходимо (по аналогии с Init/Read)\n    if (key === 'pid_enable' || key === 'pid_valve_is_NC') {\n        valueToSet = (valueToSet === 1 || valueToSet === true) ? 1 : 0;\n    } else {\n        const numValue = Number(valueToSet);\n        if (isNaN(numValue) && typeof defaultPidConfig[key] === 'number') {\n            node.warn(`[SAVE_PID_CONFIG] Некорректное значение для ${key}: ${valueToSet}. Будет использовано значение по умолчанию.`);\n            valueToSet = defaultPidConfig[key];\n        } else if (!isNaN(numValue)){\n            valueToSet = numValue;\n        }\n    }\n    \n    stateToSave[key] = valueToSet;\n    if (global.get(key) !== valueToSet) {\n        global.set(key, valueToSet);\n        globalsChangedCount++;\n    }\n}\n\nglobal.set('savedState_pidconfig', { ...stateToSave });\nglobal.set('uiState_pidconfig', { ...stateToSave }); // Синхронизируем uiState с сохраненным\n\nif (globalsChangedCount > 0) {\n    node.log(\"[WRITE_BTN_PID_CONFIG] Глобальные переменные ПИД обновлены и готовы к сохранению.\");\n} else {\n    node.log(\"[WRITE_BTN_PID_CONFIG] Глобальные переменные ПИД не требовали обновления.\");\n}\n\nconst filePayload = { payload: { ...stateToSave } };\nconst statusMessage = { payload: \"<font color='green'>Конфигурация ПИД сохранена</font>\" };\n\n// Важно: pid_integral_persist обновляется из другого потока (PID Control Logic)\n// Здесь мы его только читаем из uiState (которое должно было обновиться) и сохраняем.\n\nreturn [filePayload, statusMessage];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 100,
        "wires": [
            [
                "fd0c808692ec53f2"
            ],
            [
                "4e3e22bc6c834ba8"
            ]
        ]
    },
    {
        "id": "fd0c808692ec53f2",
        "type": "json",
        "z": "c3e5092eba83b800",
        "name": "Объект в JSON (PID)",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "e10203c379a5ac25"
            ]
        ]
    },
    {
        "id": "e10203c379a5ac25",
        "type": "file",
        "z": "c3e5092eba83b800",
        "name": "Сохранить pid_config.json",
        "filename": "/home/root/.node-red/save/pid_config.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "1e88dc1dd333b26b"
            ]
        ]
    },
    {
        "id": "1e88dc1dd333b26b",
        "type": "ui_toast",
        "z": "c3e5092eba83b800",
        "position": "top right",
        "displayTime": "3",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Сохранение ПИД",
        "name": "Уведомление о сохранении ПИД",
        "x": 480,
        "y": 340,
        "wires": []
    },
    {
        "id": "4e3e22bc6c834ba8",
        "type": "link out",
        "z": "c3e5092eba83b800",
        "name": "link out: update-pid-config-status-text",
        "links": [
            "aec16a9ed4444628"
        ],
        "x": 770,
        "y": 100,
        "wires": []
    },
    {
        "id": "aec16a9ed4444628",
        "type": "link in",
        "z": "cb1fe40a440a5967",
        "name": "link in: trigger-pid-config-ui-update",
        "links": [
            "65556b17942ffd5e",
            "4e3e22bc6c834ba8",
            "6112cd68b0e19f5a"
        ],
        "x": 175,
        "y": 440,
        "wires": [
            [
                "0a829669cd48e541"
            ]
        ]
    },
    {
        "id": "0a829669cd48e541",
        "type": "function",
        "z": "cb1fe40a440a5967",
        "name": "Update PID Config UI",
        "func": "const uiState = global.get('uiState_pidconfig') || {};\nconst savedState = global.get('savedState_pidconfig') || {};\nconst messages = [];\n\nconst paramOrder = [\n    'pid_pv_select_key', 'pid_setpoint', 'pid_enable', 'pid_valve_is_NC', 'pid_disabled_op', // Group 1\n    'pid_prop_band', 'pid_t_integral', 'pid_t_derivative', // Group 2\n    'pid_max_interval', 'pid_smooth_factor', 'pid_integral_persist' // Group 3\n];\n\nparamOrder.forEach(key => {\n    messages.push({ topic: key, payload: uiState[key] });\n});\n\nlet hasUnsavedChanges = false;\nfor (const key in savedState) {\n    if (uiState.hasOwnProperty(key)) {\n        const sVal = Number(savedState[key]);\n        const uVal = Number(uiState[key]);\n        if (!isNaN(sVal) && !isNaN(uVal)) {\n            if (Math.abs(sVal - uVal) > 0.00001) { \n                hasUnsavedChanges = true; break;\n            }\n        } else if (String(savedState[key]) !== String(uiState[key])) {\n            hasUnsavedChanges = true; break;\n        }\n    }\n}\n\nconst statusMsg = hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\";\nmessages.push({ payload: statusMsg }); // Status message\n\nreturn messages;",
        "outputs": 12,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "533db090f9b2d2df"
            ],
            [
                "8348a40bfc547952"
            ],
            [
                "bfd8a4a54f9b75e8"
            ],
            [
                "088c74eccfd10f31"
            ],
            [
                "fb24299e7440a5cd"
            ],
            [
                "e6110b88405d05b1"
            ],
            [
                "6e7bb39471b73827"
            ],
            [
                "c6dae8234561c40a"
            ],
            [
                "960231a0c37d3df8"
            ],
            [
                "88db10f7d91e7970"
            ],
            [
                "7e0846b07d744ac6"
            ],
            [
                "314305f48fb71db2"
            ]
        ]
    },
    {
        "id": "79c853a0739d406c",
        "type": "function",
        "z": "cb1fe40a440a5967",
        "name": "Handle PID Config UI Input",
        "func": "const varName = msg.topic;\nconst newValue = msg.payload;\nlet uiState = global.get('uiState_pidconfig') || {};\nconst savedState = global.get('savedState_pidconfig') || {};\n\nconst numericKeys = ['pid_setpoint', 'pid_prop_band', 'pid_t_integral', 'pid_t_derivative', 'pid_max_interval', 'pid_smooth_factor', 'pid_disabled_op', 'pid_pv_select_key', 'pid_integral_persist'];\n//const numericKeys = ['pid_setpoint', 'pid_prop_band', 'pid_t_integral', 'pid_t_derivative', 'pid_max_interval', 'pid_smooth_factor', 'pid_disabled_op', 'pid_pv_select_key'];\nconst booleanKeys = ['pid_enable', 'pid_valve_is_NC'];\n\nif (numericKeys.includes(varName)) {\n    if (typeof newValue === 'number' && !isNaN(newValue)) {\n        uiState[varName] = newValue;\n    } else {\n        node.warn(`[UI_PID_CONFIG] Ожидалось число для ${varName}, получено: ${newValue}`);\n        return null; \n    }\n} else if (booleanKeys.includes(varName)) {\n    uiState[varName] = (newValue === true || newValue === 1) ? 1 : 0;\n} else {\n    node.warn(`[UI_PID_CONFIG] Неизвестный topic от UI: ${varName}`);\n    return null;\n}\nglobal.set('uiState_pidconfig', uiState);\n\nlet hasUnsavedChanges = false;\nfor (const key in savedState) {\n    if (uiState.hasOwnProperty(key)) {\n        const sVal = Number(savedState[key]);\n        const uVal = Number(uiState[key]);\n        if (!isNaN(sVal) && !isNaN(uVal)) {\n            if (Math.abs(sVal - uVal) > 0.00001) { hasUnsavedChanges = true; break; }\n        } else if (String(savedState[key]) !== String(uiState[key])) {\n            hasUnsavedChanges = true; break;\n        }\n    }\n}\nconst statusMessage = hasUnsavedChanges ? \"<font color='orange'>Есть несохраненные изменения!</font>\" : \"<font color='green'>Все изменения сохранены</font>\";\nreturn { payload: statusMessage };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 380,
        "wires": [
            [
                "314305f48fb71db2"
            ]
        ]
    },
    {
        "id": "3236a4ac575e94ab",
        "type": "ui_button",
        "z": "cb1fe40a440a5967",
        "name": "Чтение PID Config",
        "group": "830dda0ecad0b212",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Чтение PID",
        "tooltip": "Прочитать конфигурацию ПИД из файла",
        "icon": "fa-download",
        "payload": "read_pid_config",
        "payloadType": "str",
        "topic": "read_pid_config",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "f04bfec6c608a192"
            ]
        ]
    },
    {
        "id": "f04bfec6c608a192",
        "type": "link out",
        "z": "cb1fe40a440a5967",
        "name": "link out: trigger-read-pid-config",
        "links": [
            "f886e662cd1a1a29"
        ],
        "x": 430,
        "y": 60,
        "wires": []
    },
    {
        "id": "314305f48fb71db2",
        "type": "ui_text",
        "z": "cb1fe40a440a5967",
        "group": "830dda0ecad0b212",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Статус PID Config",
        "label": "Статус:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 950,
        "y": 500,
        "wires": []
    },
    {
        "id": "a3c7008505de6f52",
        "type": "ui_button",
        "z": "cb1fe40a440a5967",
        "name": "Запись PID Config",
        "group": "830dda0ecad0b212",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Запись PID",
        "tooltip": "Сохранить конфигурацию ПИД в файл",
        "icon": "fa-upload",
        "payload": "save_pid_config",
        "payloadType": "str",
        "topic": "save_pid_config",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "9517907e16f444b9"
            ]
        ]
    },
    {
        "id": "9517907e16f444b9",
        "type": "link out",
        "z": "cb1fe40a440a5967",
        "name": "link out: trigger-save-pid-config",
        "links": [
            "3ff3a84089069a8b"
        ],
        "x": 430,
        "y": 120,
        "wires": []
    },
    {
        "id": "533db090f9b2d2df",
        "type": "ui_dropdown",
        "z": "cb1fe40a440a5967",
        "name": "Выбор PV для ПИД",
        "label": "Контролируемая переменная (PV) (pid_pv_select_key):",
        "tooltip": "Выберите переменную для ПИД-регулирования",
        "group": "ccc1572df90c68cb",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Кислотность (ckisl - 494)",
                "value": 494,
                "type": "num"
            },
            {
                "label": "Аммиак (camm - 492)",
                "value": 492,
                "type": "num"
            },
            {
                "label": "pH (ph - 498)",
                "value": 498,
                "type": "num"
            },
            {
                "label": "Redox (ai3ph5smus - 502)",
                "value": 502,
                "type": "num"
            },
            {
                "label": "Redox 2 (ai4p2h5smus - 514)",
                "value": 514,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "pid_pv_select_key",
        "topicType": "str",
        "className": "",
        "x": 680,
        "y": 60,
        "wires": [
            [
                "79c853a0739d406c"
            ]
        ]
    },
    {
        "id": "8348a40bfc547952",
        "type": "ui_numeric",
        "z": "cb1fe40a440a5967",
        "name": "Уставка ПИД",
        "label": "Уставка (Setpoint) (pid_setpoint):",
        "group": "ccc1572df90c68cb",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_setpoint",
        "format": "{{value | number:3}}",
        "min": -10000,
        "max": 10000,
        "step": 0.01,
        "x": 680,
        "y": 100,
        "wires": [
            [
                "79c853a0739d406c"
            ]
        ]
    },
    {
        "id": "bfd8a4a54f9b75e8",
        "type": "ui_switch",
        "z": "cb1fe40a440a5967",
        "name": "Включить ПИД",
        "label": "ПИД Включен (pid_enable):",
        "group": "ccc1572df90c68cb",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "topic": "pid_enable",
        "onvalue": "1",
        "onvalueType": "num",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "offcolor": "",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "79c853a0739d406c"
            ]
        ]
    },
    {
        "id": "088c74eccfd10f31",
        "type": "ui_switch",
        "z": "cb1fe40a440a5967",
        "name": "Тип клапана",
        "label": "Клапан Нормально Закрытый (NC) (pid_valve_is_NC):",
        "tooltip": "ВКЛ если клапан НЗ, ВЫКЛ если клапан НО",
        "group": "ccc1572df90c68cb",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_valve_is_NC",
        "onvalue": "1",
        "onvalueType": "num",
        "offvalue": "0",
        "offvalueType": "num",
        "x": 950,
        "y": 140,
        "wires": [
            [
                "79c853a0739d406c"
            ]
        ]
    },
    {
        "id": "fb24299e7440a5cd",
        "type": "ui_numeric",
        "z": "cb1fe40a440a5967",
        "name": "Выход при отключении",
        "label": "Выход при откл. (0-1) (pid_disabled_op):",
        "group": "ccc1572df90c68cb",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_disabled_op",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": 1,
        "step": 0.01,
        "x": 970,
        "y": 200,
        "wires": [
            [
                "79c853a0739d406c"
            ]
        ]
    },
    {
        "id": "e6110b88405d05b1",
        "type": "ui_numeric",
        "z": "cb1fe40a440a5967",
        "name": "Пропорциональный диапазон",
        "label": "Пропорц. диапазон (pid_prop_band):",
        "group": "9768866a16b8bcd2",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_prop_band",
        "format": "{{value | number:2}}",
        "min": 0,
        "max": 10000,
        "step": 0.1,
        "x": 680,
        "y": 260,
        "wires": [
            [
                "79c853a0739d406c"
            ]
        ]
    },
    {
        "id": "6e7bb39471b73827",
        "type": "ui_numeric",
        "z": "cb1fe40a440a5967",
        "name": "Время интегрирования",
        "label": "Время интегрир. (сек) (pid_t_integral):",
        "group": "9768866a16b8bcd2",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_t_integral",
        "format": "{{value}}",
        "min": 0,
        "max": 72000,
        "step": 1,
        "x": 680,
        "y": 300,
        "wires": [
            [
                "79c853a0739d406c"
            ]
        ]
    },
    {
        "id": "c6dae8234561c40a",
        "type": "ui_numeric",
        "z": "cb1fe40a440a5967",
        "name": "Время дифференцирования",
        "label": "Время дифф. (сек) (pid_t_derivative):",
        "group": "9768866a16b8bcd2",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_t_derivative",
        "format": "{{value}}",
        "min": 0,
        "max": 72000,
        "step": 1,
        "x": 680,
        "y": 340,
        "wires": [
            [
                "79c853a0739d406c"
            ]
        ]
    },
    {
        "id": "960231a0c37d3df8",
        "type": "ui_numeric",
        "z": "cb1fe40a440a5967",
        "name": "Макс. интервал выборки",
        "label": "Макс. интервал (сек) (pid_max_interval):",
        "group": "08127e8709d06964",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_max_interval",
        "format": "{{value}}",
        "min": 1,
        "max": 3600,
        "step": 1,
        "x": 680,
        "y": 460,
        "wires": [
            [
                "79c853a0739d406c"
            ]
        ]
    },
    {
        "id": "88db10f7d91e7970",
        "type": "ui_numeric",
        "z": "cb1fe40a440a5967",
        "name": "Коэф. сглаживания произв.",
        "label": "Коэф. сглаж. произв. (pid_smooth_factor):",
        "group": "08127e8709d06964",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "pid_smooth_factor",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": 10,
        "step": 0.1,
        "x": 680,
        "y": 500,
        "wires": [
            [
                "79c853a0739d406c"
            ]
        ]
    },
    {
        "id": "7e0846b07d744ac6",
        "type": "ui_text",
        "z": "cb1fe40a440a5967",
        "group": "08127e8709d06964",
        "order": 3,
        "width": 12,
        "height": 1,
        "name": "Сохраненный интеграл",
        "label": "Сохраненный Интеграл (для pid_integral_default):",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 680,
        "y": 540,
        "wires": []
    },
    {
        "id": "2a28d6a187abf0b9",
        "type": "link in",
        "z": "cb1fe40a440a5967",
        "name": "link in: integral live update",
        "links": [
            "53e5a81cffce8c50"
        ],
        "x": 195,
        "y": 600,
        "wires": [
            [
                "c4b8c403990c7514"
            ]
        ]
    },
    {
        "id": "c4b8c403990c7514",
        "type": "function",
        "z": "cb1fe40a440a5967",
        "name": "Update uiState with Live Integral",
        "func": "const uiState = global.get('uiState_pidconfig') || {};\n\n// Обновляем значение интеграла в состоянии UI\n// Это важно, чтобы при сохранении записалось актуальное значение\nuiState.pid_integral_persist = msg.payload;\nglobal.set('uiState_pidconfig', uiState);\n\n// Просто передаем значение дальше для отображения\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 600,
        "wires": [
            [
                "5a69aa46d69f5e71"
            ]
        ]
    },
    {
        "id": "5a69aa46d69f5e71",
        "type": "change",
        "z": "cb1fe40a440a5967",
        "name": "Format to 3 decimal places",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$round(payload, 3)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 620,
        "wires": [
            [
                "7e0846b07d744ac6"
            ]
        ]
    },
    {
        "id": "8a9bacf0c5cf0842",
        "type": "link in",
        "z": "cb1fe40a440a5967",
        "name": "link in: PV/SP for PID Chart",
        "links": [
            "c3c0242ee4b71051"
        ],
        "x": 1025,
        "y": 700,
        "wires": [
            [
                "ad764a2f74f0002f"
            ]
        ]
    },
    {
        "id": "341a79ac8f229b30",
        "type": "ui_chart",
        "z": "cb1fe40a440a5967",
        "name": "PV и Уставка (SP)",
        "group": "641334a6e067f93d",
        "order": 1,
        "width": 12,
        "height": 6,
        "label": "Процесс (PV) vs Уставка (SP)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#d62728",
            "#9467bd",
            "#8c564b",
            "#e377c2",
            "#7f7f7f",
            "#bcbd22"
        ],
        "outputs": 1,
        "useDifferentColor": true,
        "x": 1245,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "a8f20e9e706a38f0",
        "type": "link in",
        "z": "cb1fe40a440a5967",
        "name": "link in: MV (0-1) for PID Chart",
        "links": [
            "fdceb3f0da616468"
        ],
        "x": 1025,
        "y": 760,
        "wires": [
            [
                "f82341f13ce971fa"
            ]
        ]
    },
    {
        "id": "c9cee4fe8cccba9e",
        "type": "ui_chart",
        "z": "cb1fe40a440a5967",
        "name": "Выход ПИД (0-1)",
        "group": "641334a6e067f93d",
        "order": 2,
        "width": 12,
        "height": 6,
        "label": "Управляющее воздействие (0-1)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "0",
        "ymax": "1",
        "removeOlder": "5",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#2ca02c"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1245,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "3084fffd1249faba",
        "type": "link in",
        "z": "cb1fe40a440a5967",
        "name": "link in: MV (4-20mA) for PID Chart",
        "links": [
            "f3975a8e11025935"
        ],
        "x": 1025,
        "y": 820,
        "wires": [
            [
                "1cc75797d3982ff0"
            ]
        ]
    },
    {
        "id": "8ad2838b99a8abc5",
        "type": "ui_chart",
        "z": "cb1fe40a440a5967",
        "name": "Сигнал на клапан (4-20 мА)",
        "group": "641334a6e067f93d",
        "order": 3,
        "width": 12,
        "height": 6,
        "label": "Ток на клапане (4-20 мА)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Ожидание данных...",
        "dot": false,
        "ymin": "4",
        "ymax": "20",
        "removeOlder": "5",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#d62728"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1245,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "ad764a2f74f0002f",
        "type": "rbe",
        "z": "cb1fe40a440a5967",
        "name": "Filter unchanged PV_SP",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 1185,
        "y": 700,
        "wires": [
            [
                "7a0770ac0dae20a9"
            ]
        ]
    },
    {
        "id": "f82341f13ce971fa",
        "type": "rbe",
        "z": "cb1fe40a440a5967",
        "name": "Filter unchanged MV_01",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 1185,
        "y": 760,
        "wires": [
            [
                "8526365ecea9d9a5"
            ]
        ]
    },
    {
        "id": "1cc75797d3982ff0",
        "type": "rbe",
        "z": "cb1fe40a440a5967",
        "name": "Filter unchanged MV_4_20",
        "func": "rbe",
        "inout": "out",
        "property": "payload",
        "x": 1185,
        "y": 820,
        "wires": [
            [
                "9851654f06783846"
            ]
        ]
    },
    {
        "id": "3636f60bbbb113d9",
        "type": "link in",
        "z": "cb1fe40a440a5967",
        "name": "link in: ПИД charts toggle",
        "links": [
            "931a8249edb87845"
        ],
        "x": 120,
        "y": 40,
        "wires": [
            [
                "719517c8c1255304"
            ]
        ]
    },
    {
        "id": "719517c8c1255304",
        "type": "function",
        "z": "cb1fe40a440a5967",
        "name": "Управление графиками ПИД",
        "func": "const enabled = msg.payload === true || msg.enabled === true;\nflow.set('pidChartsEnabled', enabled);\nmsg.ui_control = { hide: !enabled };\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "341a79ac8f229b30",
                "c9cee4fe8cccba9e",
                "8ad2838b99a8abc5"
            ]
        ]
    },
    {
        "id": "200ffb9937fce8cb",
        "type": "inject",
        "z": "cb1fe40a440a5967",
        "name": "ПИД графики: выключить по умолчанию",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "pid_charts_enabled",
        "payload": "false",
        "payloadType": "bool",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "719517c8c1255304"
            ]
        ]
    },
    {
        "id": "7a0770ac0dae20a9",
        "type": "function",
        "z": "cb1fe40a440a5967",
        "name": "Фильтр графика ПИД",
        "func": "let enabled = flow.get('pidChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('pidChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1105,
        "y": 700,
        "wires": [
            [
                "341a79ac8f229b30"
            ]
        ]
    },
    {
        "id": "8526365ecea9d9a5",
        "type": "function",
        "z": "cb1fe40a440a5967",
        "name": "Фильтр графика ПИД",
        "func": "let enabled = flow.get('pidChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('pidChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1105,
        "y": 760,
        "wires": [
            [
                "c9cee4fe8cccba9e"
            ]
        ]
    },
    {
        "id": "9851654f06783846",
        "type": "function",
        "z": "cb1fe40a440a5967",
        "name": "Фильтр графика ПИД",
        "func": "let enabled = flow.get('pidChartsEnabled');\nif (enabled === undefined) {\n    enabled = false;\n    flow.set('pidChartsEnabled', enabled);\n}\nif (!enabled) {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1105,
        "y": 820,
        "wires": [
            [
                "8ad2838b99a8abc5"
            ]
        ]
    },
    {
        "id": "89ce1e92165fd407",
        "type": "inject",
        "z": "a609182e19a3ce4d",
        "name": "Запуск ПИД 17c (каждые 5 сек)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "17",
        "topic": "calculate_pid",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 100,
        "wires": [
            [
                "d566d16884ddfc52"
            ]
        ]
    },
    {
        "id": "d566d16884ddfc52",
        "type": "function",
        "z": "a609182e19a3ce4d",
        "name": "Prepare PID Input & Parameters",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\nconst pvKeyMap = {\n    494: \"ckisl\",\n    492: \"camm\",\n    498: \"ph\",\n    502: \"ai3ph5smus\",\n    514: \"ai4p2h5smus\"\n};\n\nconst selectedPvKeyCode = g('pid_pv_select_key') || 498;\nconst pvGlobalVarName = pvKeyMap[selectedPvKeyCode];\n\nif (!pvGlobalVarName) {\n    node.error(`Неизвестный ключ PV для ПИД: ${selectedPvKeyCode}`);\n    return null;\n}\n\nconst processValue = Number(g(pvGlobalVarName));\nif (isNaN(processValue)) {\n    node.error(`Значение для PV '${pvGlobalVarName}' не является числом: ${g(pvGlobalVarName)}`);\n    s('pid_current_pv_value', null);\n    return null;\n}\n\ns('pid_current_pv_value', processValue);\n\n// Выход 0: Сообщение для ПИД-узла\nlet pidMsg = { payload: processValue };\npidMsg.setpoint = Number(g('pid_setpoint') || 0);\nconst propBand = Number(g('pid_prop_band') || 100);\npidMsg.prop_band = propBand;\npidMsg.t_integral = Number(g('pid_t_integral') || 3600);\npidMsg.t_derivative = Number(g('pid_t_derivative') || 0);\npidMsg.max_interval = Number(g('pid_max_interval') || 60);\npidMsg.smooth_factor = Number(g('pid_smooth_factor') || 0);\npidMsg.enable = (g('pid_enable') === 1 || g('pid_enable') === true) ? 1 : 0;\npidMsg.disabled_op = Number(g('pid_disabled_op') || 0);\n\nconst integralPersist = Number(g('pid_integral_persist') || 0);\nif (propBand !== 0) {\n    pidMsg.integral_default = 0.5 - (integralPersist / propBand);\n} else {\n    pidMsg.integral_default = 0.5;\n}\n\nnode.status({ text: `PV (${pvGlobalVarName}): ${processValue.toFixed(3)}, SP: ${pidMsg.setpoint.toFixed(3)}` });\n\n// Выход 1: PV для графика\nconst pvChartMsg = { topic: \"PV_PID\", payload: processValue };\n// Выход 2: SP для графика\nconst spChartMsg = { topic: \"Setpoint_PID\", payload: pidMsg.setpoint };\n\nreturn [pidMsg, pvChartMsg, spChartMsg];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "fa5e79120378ae11"
            ],
            [
                "c3c0242ee4b71051"
            ],
            [
                "c3c0242ee4b71051"
            ]
        ]
    },
    {
        "id": "abfc7d24236c263f",
        "type": "function",
        "z": "a609182e19a3ce4d",
        "name": "Process PID Output & Valve Logic",
        "func": "const g = global.get.bind(global);\nconst s = global.set.bind(global);\n\nconst pidOutputRaw = Number(msg.payload);\nconst currentIntegral = msg.integral;\n\ns('pid_output_actual', pidOutputRaw);\ns('pid_integral_persist', currentIntegral);\n\nconst valveIsNC = (g('pid_valve_is_NC') === 1 || g('pid_valve_is_NC') === true);\nlet valveCommandFinal = pidOutputRaw;\n\nif (!valveIsNC) {\n    valveCommandFinal = 1.0 - pidOutputRaw;\n    node.log(`PID Output (raw): ${pidOutputRaw.toFixed(3)}, Valve NO, Final Command: ${valveCommandFinal.toFixed(3)}`);\n} else {\n    node.log(`PID Output (raw): ${pidOutputRaw.toFixed(3)}, Valve NC, Final Command: ${valveCommandFinal.toFixed(3)}`);\n}\n\ns('pid_valve_command_final', valveCommandFinal);\n\n// Выход 0: Финальная команда на клапан (для отладки/прямой передачи)\nlet outputMsgValveCmd = { payload: valveCommandFinal };\n\n// Выход 1: Обновленное значение pid_integral_persist для UI\nlet outputMsgIntegral = { topic: \"pid_integral_persist\", payload: currentIntegral };\n\n// Выход 2: Команда на клапан для графика\nlet outputMsgValveCmdForChart = { topic: \"MV_0-1_PID\", payload: valveCommandFinal };\n\nreturn [outputMsgValveCmd, outputMsgIntegral, outputMsgValveCmdForChart];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            [
                "5efe09f024f3dcef"
            ],
            [
                "53e5a81cffce8c50"
            ],
            [
                "fdceb3f0da616468"
            ]
        ]
    },
    {
        "id": "5efe09f024f3dcef",
        "type": "debug",
        "z": "a609182e19a3ce4d",
        "name": "Debug: Final Valve Command (0-1)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 820,
        "y": 200,
        "wires": []
    },
    {
        "id": "53e5a81cffce8c50",
        "type": "link out",
        "z": "a609182e19a3ce4d",
        "name": "Update Integral Persist in UI",
        "mode": "link",
        "links": [
            "2a28d6a187abf0b9"
        ],
        "x": 1075,
        "y": 260,
        "wires": []
    },
    {
        "id": "fa5e79120378ae11",
        "type": "PID",
        "z": "a609182e19a3ce4d",
        "name": "ПИД Регулятор Процесса",
        "setpoint": 21,
        "pb": 1,
        "ti": 9999,
        "td": 0,
        "integral_default": 0.5,
        "smooth_factor": 3,
        "max_interval": 600,
        "enable": 1,
        "disabled_op": 0,
        "x": 780,
        "y": 40,
        "wires": [
            [
                "abfc7d24236c263f"
            ]
        ]
    },
    {
        "id": "c3c0242ee4b71051",
        "type": "link out",
        "z": "a609182e19a3ce4d",
        "name": "link out: PV/SP for Chart",
        "mode": "link",
        "links": [
            "8a9bacf0c5cf0842"
        ],
        "x": 435,
        "y": 320,
        "wires": []
    },
    {
        "id": "fdceb3f0da616468",
        "type": "link out",
        "z": "a609182e19a3ce4d",
        "name": "link out: MV (0-1) for Chart",
        "mode": "link",
        "links": [
            "a8f20e9e706a38f0"
        ],
        "x": 995,
        "y": 320,
        "wires": []
    },
    {
        "id": "b0eaf7ae5f6c3015",
        "type": "inject",
        "z": "b40e2016c7b21a31",
        "name": "Ежедневно в 03:00",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "daily_backup",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "071523070b4f7814"
            ]
        ]
    },
    {
        "id": "071523070b4f7814",
        "type": "function",
        "z": "b40e2016c7b21a31",
        "name": "Подготовка путей для бэкапа (7 файлов)",
        "func": "const sourceDir = '/home/root/.node-red/save/';\nconst backupDir = '/home/root/.node-red/backup/'; \nconst filesToBackup = [\n    'variables_all.json', \n    'variables_calculation.json', \n    'ph_calc_variables.json',\n    'redox_variables.json',\n    'ao_lc_config.json',\n    'redox_variables2.json',\n    'pid_config.json' // Добавлен 7-й файл\n];\n\nconst now = new Date();\nconst year = now.getFullYear();\nconst month = (now.getMonth() + 1).toString().padStart(2, '0');\nconst day = now.getDate().toString().padStart(2, '0');\nconst dateSuffix = `${year}-${month}-${day}`;\n\nlet messages = [];\nlet isManual = (msg.topic === 'manual_backup'); \nlet sourceTrigger = isManual ? \"[Manual Backup]\" : \"[Daily Backup]\";\n\nnode.log(`${sourceTrigger} Запуск резервного копирования для ${filesToBackup.length} файлов...`);\n\nfor (const filename of filesToBackup) {\n    const sourcePath = sourceDir + filename;\n    const baseName = filename.split('.json')[0];\n    const backupFilename = `${baseName}_${dateSuffix}.json`;\n    const backupPath = backupDir + backupFilename;\n    \nmessages.push({ \n        sourceFilename: sourcePath, \n        backupFilename: backupPath,\n        topic: filename, \n        manualTrigger: isManual \n    });\n}\nreturn [ messages[0], messages[1], messages[2], messages[3], messages[4], messages[5], messages[6] ];",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "1c619c6b504da6f1"
            ],
            [
                "100b63dcaaa550ae"
            ],
            [
                "80cd38b1ed13addc"
            ],
            [
                "78ebfc6c2f0e1f55"
            ],
            [
                "065c551d974ffa57"
            ],
            [
                "d8b5c1e9deb2b750"
            ],
            [
                "c57bcbaf8726e9d3"
            ]
        ],
        "inputLabels": [
            "Daily or Manual Trigger"
        ]
    },
    {
        "id": "1c619c6b504da6f1",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read variables_all.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 690,
        "y": 60,
        "wires": [
            [
                "f15963044cf0ba7b"
            ]
        ]
    },
    {
        "id": "f15963044cf0ba7b",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Backup 1",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 60,
        "wires": [
            [
                "d2b21d7acde058ef"
            ]
        ]
    },
    {
        "id": "d2b21d7acde058ef",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Success Msg 1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 60,
        "wires": [
            [
                "1677ce0696eeccc9"
            ]
        ]
    },
    {
        "id": "100b63dcaaa550ae",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read variables_calculation.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 120,
        "wires": [
            [
                "f46a370add4fae54"
            ]
        ]
    },
    {
        "id": "f46a370add4fae54",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Backup 2",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 120,
        "wires": [
            [
                "5838da28e8b9f138"
            ]
        ]
    },
    {
        "id": "5838da28e8b9f138",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Success Msg 2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 120,
        "wires": [
            [
                "1677ce0696eeccc9"
            ]
        ]
    },
    {
        "id": "80cd38b1ed13addc",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read ph_calc_variables.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 660,
        "y": 180,
        "wires": [
            [
                "9bdb27dde881d868"
            ]
        ]
    },
    {
        "id": "9bdb27dde881d868",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Backup 3",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 180,
        "wires": [
            [
                "25b44d98e6a72544"
            ]
        ]
    },
    {
        "id": "25b44d98e6a72544",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Success Msg 3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 180,
        "wires": [
            [
                "1677ce0696eeccc9"
            ]
        ]
    },
    {
        "id": "78ebfc6c2f0e1f55",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read redox_variables.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 240,
        "wires": [
            [
                "9a7a086a20a8d759"
            ]
        ]
    },
    {
        "id": "9a7a086a20a8d759",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Backup 4",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 240,
        "wires": [
            [
                "43da9764e1eaf80b"
            ]
        ]
    },
    {
        "id": "43da9764e1eaf80b",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Success Msg 4",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 240,
        "wires": [
            [
                "1677ce0696eeccc9"
            ]
        ]
    },
    {
        "id": "065c551d974ffa57",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read ao_lc_config.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 300,
        "wires": [
            [
                "acbe8319ca978a5f"
            ]
        ]
    },
    {
        "id": "acbe8319ca978a5f",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Backup 5",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 300,
        "wires": [
            [
                "7e2f063961e03459"
            ]
        ]
    },
    {
        "id": "7e2f063961e03459",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Success Msg 5",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 300,
        "wires": [
            [
                "1677ce0696eeccc9"
            ]
        ]
    },
    {
        "id": "d8b5c1e9deb2b750",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read redox_variables2.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "02d15b6075fec843"
            ]
        ]
    },
    {
        "id": "02d15b6075fec843",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Backup 6",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 360,
        "wires": [
            [
                "8fbb5cecde67cd15"
            ]
        ]
    },
    {
        "id": "8fbb5cecde67cd15",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Success Msg 6",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 360,
        "wires": [
            [
                "1677ce0696eeccc9"
            ]
        ]
    },
    {
        "id": "c57bcbaf8726e9d3",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read pid_config.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 420,
        "wires": [
            [
                "4c8bb2ff067aac0e"
            ]
        ]
    },
    {
        "id": "4c8bb2ff067aac0e",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Backup 7",
        "filename": "backupFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 920,
        "y": 420,
        "wires": [
            [
                "9e20cee91cc431ec"
            ]
        ]
    },
    {
        "id": "9e20cee91cc431ec",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Success Msg 7",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Бэкап ${topic} (${backupFilename}) создан.`",
                "tot": "jsonata"
            }
        ],
        "x": 1120,
        "y": 420,
        "wires": [
            [
                "1677ce0696eeccc9"
            ]
        ]
    },
    {
        "id": "1677ce0696eeccc9",
        "type": "join",
        "z": "b40e2016c7b21a31",
        "name": "Join Backup Success (7)",
        "mode": "count",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "5",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1330,
        "y": 220,
        "wires": [
            [
                "9d55374852d5ab9c"
            ]
        ]
    },
    {
        "id": "9d55374852d5ab9c",
        "type": "ui_toast",
        "z": "b40e2016c7b21a31",
        "position": "top right",
        "displayTime": "5",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Резервное Копирование",
        "name": "Backup Success Toast",
        "x": 1400,
        "y": 280,
        "wires": []
    },
    {
        "id": "8b9dc118323cc993",
        "type": "catch",
        "z": "b40e2016c7b21a31",
        "name": "Catch Backup Errors",
        "scope": [
            "1c619c6b504da6f1",
            "f15963044cf0ba7b",
            "100b63dcaaa550ae",
            "f46a370add4fae54",
            "80cd38b1ed13addc",
            "9bdb27dde881d868",
            "78ebfc6c2f0e1f55",
            "9a7a086a20a8d759",
            "065c551d974ffa57",
            "acbe8319ca978a5f",
            "d8b5c1e9deb2b750",
            "02d15b6075fec843",
            "c57bcbaf8726e9d3",
            "4c8bb2ff067aac0e"
        ],
        "uncaught": false,
        "x": 1100,
        "y": 480,
        "wires": [
            [
                "efbe5b298e000013",
                "881d998ab43a1b6b"
            ]
        ]
    },
    {
        "id": "efbe5b298e000013",
        "type": "debug",
        "z": "b40e2016c7b21a31",
        "name": "Backup Error Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 480,
        "wires": []
    },
    {
        "id": "881d998ab43a1b6b",
        "type": "ui_toast",
        "z": "b40e2016c7b21a31",
        "position": "top right",
        "displayTime": "7",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Ошибка Резервного Копирования",
        "name": "Backup Error Toast",
        "x": 1370,
        "y": 540,
        "wires": []
    },
    {
        "id": "a788e9550960b83e",
        "type": "link in",
        "z": "b40e2016c7b21a31",
        "name": "From Manual Backup Btn",
        "links": [
            "fa4f7c63be7a2049"
        ],
        "x": 95,
        "y": 280,
        "wires": [
            [
                "071523070b4f7814"
            ]
        ]
    },
    {
        "id": "fb3eaedb991238cd",
        "type": "link in",
        "z": "b40e2016c7b21a31",
        "name": "From Restore Backup Btn",
        "links": [
            "092e65324c6d5488"
        ],
        "x": 105,
        "y": 460,
        "wires": [
            [
                "9e8e13543920229d"
            ]
        ]
    },
    {
        "id": "9e8e13543920229d",
        "type": "function",
        "z": "b40e2016c7b21a31",
        "name": "Подготовка путей для восстановления (7 файлов)",
        "func": "const backupDir = '/home/root/.node-red/backup/'; \nconst destDir = '/home/root/.node-red/save/'; \nconst filesToRestore = [\n    'variables_all.json', \n    'variables_calculation.json', \n    'ph_calc_variables.json',\n    'redox_variables.json',\n    'ao_lc_config.json',\n    'redox_variables2.json',\n    'pid_config.json' // Добавлен 7-й файл\n];\n\nconst now = new Date();\nconst year = now.getFullYear();\nconst month = (now.getMonth() + 1).toString().padStart(2, '0');\nconst day = now.getDate().toString().padStart(2, '0');\nconst dateSuffix = `${year}-${month}-${day}`; \n\nlet messages = [];\nnode.log(`[Manual Restore] Попытка восстановления из бэкапа от ${dateSuffix} для ${filesToRestore.length} файлов...`);\n\nfor (const filename of filesToRestore) {\n    const destPath = destDir + filename; \n    const baseName = filename.split('.json')[0];\n    const backupFilename = `${baseName}_${dateSuffix}.json`;\n    const sourcePath = backupDir + backupFilename; \n    \nmessages.push({ \n        sourceFilename: sourcePath, \n        destFilename: destPath,    \n        topic: filename,\n        backupDate: dateSuffix \n    });\n}\nreturn [ messages[0], messages[1], messages[2], messages[3], messages[4], messages[5], messages[6] ];",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "57f2c745505788db"
            ],
            [
                "ec18138679effad8"
            ],
            [
                "5b0dca4b29ca4dd5"
            ],
            [
                "1b2c2a9eba3ca584"
            ],
            [
                "6766a713ee79d367"
            ],
            [
                "4502465199d6e127"
            ],
            [
                "342994f1d54f513c"
            ]
        ],
        "inputLabels": [
            "Restore Button Trigger"
        ]
    },
    {
        "id": "57f2c745505788db",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read Backup variables_all.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 650,
        "y": 460,
        "wires": [
            [
                "28bc53c447cc138e"
            ]
        ]
    },
    {
        "id": "28bc53c447cc138e",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Restored 1",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 460,
        "wires": [
            [
                "0b658d6586a20e3c"
            ]
        ]
    },
    {
        "id": "0b658d6586a20e3c",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Restore Success 1",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "82d2f7a760f1c29d"
            ]
        ]
    },
    {
        "id": "ec18138679effad8",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read Backup variables_calculation.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 660,
        "y": 520,
        "wires": [
            [
                "694115d1d35b195f"
            ]
        ]
    },
    {
        "id": "694115d1d35b195f",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Restored 2",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 520,
        "wires": [
            [
                "cdca9adda53f18b5"
            ]
        ]
    },
    {
        "id": "cdca9adda53f18b5",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Restore Success 2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 520,
        "wires": [
            [
                "82d2f7a760f1c29d"
            ]
        ]
    },
    {
        "id": "5b0dca4b29ca4dd5",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read Backup ph_calc_variables.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 650,
        "y": 580,
        "wires": [
            [
                "cef6c213c5e0ed61"
            ]
        ]
    },
    {
        "id": "cef6c213c5e0ed61",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Restored 3",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 580,
        "wires": [
            [
                "ccfcae8a700b8a12"
            ]
        ]
    },
    {
        "id": "ccfcae8a700b8a12",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Restore Success 3",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 580,
        "wires": [
            [
                "82d2f7a760f1c29d"
            ]
        ]
    },
    {
        "id": "1b2c2a9eba3ca584",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read Backup redox_variables.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 640,
        "wires": [
            [
                "8be8c73a240d43fa"
            ]
        ]
    },
    {
        "id": "8be8c73a240d43fa",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Restored 4",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 640,
        "wires": [
            [
                "8d131812e5ec6ff3"
            ]
        ]
    },
    {
        "id": "8d131812e5ec6ff3",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Restore Success 4",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 640,
        "wires": [
            [
                "82d2f7a760f1c29d"
            ]
        ]
    },
    {
        "id": "6766a713ee79d367",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read Backup ao_lc_config.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 700,
        "wires": [
            [
                "acbe8319ca978a5f"
            ]
        ]
    },
    {
        "id": "d5f5987b602e7743",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Restore Success 5",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 700,
        "wires": [
            [
                "82d2f7a760f1c29d"
            ]
        ]
    },
    {
        "id": "4502465199d6e127",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read Backup redox_variables2.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 760,
        "wires": [
            [
                "c4a76d6d1455c0af"
            ]
        ]
    },
    {
        "id": "c4a76d6d1455c0af",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Restored 6",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 760,
        "wires": [
            [
                "b25dfbd3239dbbb9"
            ]
        ]
    },
    {
        "id": "b25dfbd3239dbbb9",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Restore Success 6",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 760,
        "wires": [
            [
                "82d2f7a760f1c29d"
            ]
        ]
    },
    {
        "id": "342994f1d54f513c",
        "type": "file in",
        "z": "b40e2016c7b21a31",
        "name": "Read Backup pid_config.json",
        "filename": "sourceFilename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "utf8",
        "allProps": false,
        "x": 670,
        "y": 820,
        "wires": [
            [
                "a50c776f47fe5ec9"
            ]
        ]
    },
    {
        "id": "a50c776f47fe5ec9",
        "type": "file",
        "z": "b40e2016c7b21a31",
        "name": "Write Restored 7",
        "filename": "destFilename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 930,
        "y": 820,
        "wires": [
            [
                "eabcc33d35a753ed"
            ]
        ]
    },
    {
        "id": "eabcc33d35a753ed",
        "type": "change",
        "z": "b40e2016c7b21a31",
        "name": "Restore Success 7",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "`Файл ${topic} (${destFilename}) восстановлен из бэкапа от ${backupDate}.`",
                "tot": "jsonata"
            }
        ],
        "x": 1130,
        "y": 820,
        "wires": [
            [
                "82d2f7a760f1c29d"
            ]
        ]
    },
    {
        "id": "82d2f7a760f1c29d",
        "type": "join",
        "z": "b40e2016c7b21a31",
        "name": "Join Restore Success (7)",
        "mode": "count",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "5",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1350,
        "y": 610,
        "wires": [
            [
                "e03375836be6cf29",
                "f4dc4ffac71ae933",
                "f52bc22201e6b765",
                "86b9fc9de9d45503",
                "35a8e51325004943",
                "f26d58708186d492",
                "a4c14e4a4e99c131",
                "0514d42e01e41607"
            ]
        ]
    },
    {
        "id": "e03375836be6cf29",
        "type": "ui_toast",
        "z": "b40e2016c7b21a31",
        "position": "top right",
        "displayTime": "5",
        "highlight": "green",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Восстановление Завершено",
        "name": "Restore Success Toast",
        "x": 1420,
        "y": 700,
        "wires": []
    },
    {
        "id": "d8c8af4591c16441",
        "type": "catch",
        "z": "b40e2016c7b21a31",
        "name": "Catch Restore Errors",
        "scope": [
            "57f2c745505788db",
            "28bc53c447cc138e",
            "ec18138679effad8",
            "694115d1d35b195f",
            "5b0dca4b29ca4dd5",
            "cef6c213c5e0ed61",
            "1b2c2a9eba3ca584",
            "8be8c73a240d43fa",
            "6766a713ee79d367",
            "acbe8319ca978a5f",
            "4502465199d6e127",
            "c4a76d6d1455c0af",
            "342994f1d54f513c",
            "a50c776f47fe5ec9"
        ],
        "uncaught": false,
        "x": 1120,
        "y": 880,
        "wires": [
            [
                "b245de9979692575",
                "6d3aea2baa2ffa5b"
            ]
        ]
    },
    {
        "id": "b245de9979692575",
        "type": "debug",
        "z": "b40e2016c7b21a31",
        "name": "Restore Error Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 880,
        "wires": []
    },
    {
        "id": "6d3aea2baa2ffa5b",
        "type": "ui_toast",
        "z": "b40e2016c7b21a31",
        "position": "top right",
        "displayTime": "7",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Ошибка Восстановления",
        "name": "Restore Error Toast",
        "x": 1390,
        "y": 940,
        "wires": []
    },
    {
        "id": "f4dc4ffac71ae933",
        "type": "link out",
        "z": "b40e2016c7b21a31",
        "name": "Trigger Read All Vars",
        "mode": "link",
        "links": [
            "109756e5a4d5ea04"
        ],
        "x": 1625,
        "y": 520,
        "wires": []
    },
    {
        "id": "f52bc22201e6b765",
        "type": "link out",
        "z": "b40e2016c7b21a31",
        "name": "Trigger Read Calc Vars",
        "mode": "link",
        "links": [
            "175cd26666835156"
        ],
        "x": 1625,
        "y": 560,
        "wires": []
    },
    {
        "id": "86b9fc9de9d45503",
        "type": "link out",
        "z": "b40e2016c7b21a31",
        "name": "Trigger Read PH Vars",
        "mode": "link",
        "links": [
            "ecbdac89e2b3ef27"
        ],
        "x": 1625,
        "y": 600,
        "wires": []
    },
    {
        "id": "35a8e51325004943",
        "type": "link out",
        "z": "b40e2016c7b21a31",
        "name": "Trigger Read Redox Vars",
        "mode": "link",
        "links": [
            "3bc967f31c9e3a95"
        ],
        "x": 1625,
        "y": 640,
        "wires": []
    },
    {
        "id": "f26d58708186d492",
        "type": "link out",
        "z": "b40e2016c7b21a31",
        "name": "Trigger Read AO LC Vars",
        "mode": "link",
        "links": [
            "4f859da4ee156b8c"
        ],
        "x": 1625,
        "y": 680,
        "wires": []
    },
    {
        "id": "a4c14e4a4e99c131",
        "type": "link out",
        "z": "b40e2016c7b21a31",
        "name": "Trigger Read Redox2 Vars after Restore",
        "mode": "link",
        "links": [
            "1d83ce1bd0bd4b83"
        ],
        "x": 1625,
        "y": 720,
        "wires": []
    },
    {
        "id": "0514d42e01e41607",
        "type": "link out",
        "z": "b40e2016c7b21a31",
        "name": "Trigger Read PID Config after Restore",
        "mode": "link",
        "links": [
            "f886e662cd1a1a29"
        ],
        "x": 1625,
        "y": 760,
        "wires": []
    }
]